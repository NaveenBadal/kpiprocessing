<?xml version="1.0"?>
<doc>
    <assembly>
        "RohdeSchwarz.ViCom.Net"
    </assembly>
    <members>
        <member name="M:RohdeSchwarz.ViCom.Net.JustATestForInterfaceDataProcessor.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.JustATestForInterfaceDataProcessor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComLoader`1.m_typeOfGeneric">
The type of the generic parameter.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoader`1.Disconnect">
Releases the hardware

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoader`1.Connected">
Return wether there is a connection to the receiver.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoader`1.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComError@,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
Loads the TSMW

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoader`1.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComError@)">
Loads the TSMW

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoader`1.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
Loads the TSMW

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoader`1.Connect(System.String)">
Loads the TSMW

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoader`1.SetSettings(RohdeSchwarz.ViCom.Net.SReceiverSettings)">
Sets the receiver settings

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoader`1.GetBasicInterface">
Returns a reference to the basic interface, not present in the native version

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoader`1.GetInterface">
Returns a reference to the specific technology interface

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoader`1.Dispose">
Destructor

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoader`1.#ctor(RohdeSchwarz.ViCom.Net.DeviceType)">
C-tor

</member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComLoader`1">
The ViCom.NET loaders, wrappers around their native ViCom counterpart

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComLoader`1.Disconnect">
Releases the hardware

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComLoader`1.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComError@,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
Loads the TSMW

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComLoader`1.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComError@)">
Loads the TSMW

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComLoader`1.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
Loads the TSMW

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComLoader`1.Connect(System.String)">
Loads the TSMW

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComLoader`1.SetSettings(RohdeSchwarz.ViCom.Net.SReceiverSettings)">
Sets the receiver settings

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComLoader`1.GetBasicInterface">
Returns a reference to the basic interface, not present in the native version

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComLoader`1.GetInterface">
Returns a reference to the specific technology interface

</member>
        <member name="T:RohdeSchwarz.ViCom.Net.DeviceType">
The device type - the .NET bridge version

</member>
        <member name="F:RohdeSchwarz.ViCom.Net.DeviceType.TsmTest">
Special value for mocked device.

</member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderGps.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderGps.m_loader">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderGps.GetInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderGps.GetBasicInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderGps.SetSettings(RohdeSchwarz.ViCom.Net.SReceiverSettings)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderGps.Disconnect">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderGps.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComError@,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderGps.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderGps.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderGps.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderGps">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmxPps2LoaderGps.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmxPps2LoaderGps.m_loader">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmxPps2LoaderGps.GetInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmxPps2LoaderGps.GetBasicInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmxPps2LoaderGps.SetSettings(RohdeSchwarz.ViCom.Net.SReceiverSettings)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmxPps2LoaderGps.Disconnect">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmxPps2LoaderGps.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComError@,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmxPps2LoaderGps.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmxPps2LoaderGps.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmxPps2LoaderGps.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComTsmxPps2LoaderGps">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderCWScan.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderCWScan.m_loader">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderCWScan.GetInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderCWScan.GetBasicInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderCWScan.SetSettings(RohdeSchwarz.ViCom.Net.SReceiverSettings)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderCWScan.Disconnect">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderCWScan.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComError@,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderCWScan.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderCWScan.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderCWScan.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderCWScan">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderCdma.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderCdma.m_loader">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderCdma.GetInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderCdma.GetBasicInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderCdma.SetSettings(RohdeSchwarz.ViCom.Net.SReceiverSettings)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderCdma.Disconnect">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderCdma.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComError@,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderCdma.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderCdma.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderCdma.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderCdma">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.CViComCWScanInterface.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.CViComCWScanInterface.GetType">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.CViComCWScanInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.CWScan.CViComCWScanInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.CViComCWScanInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.CWScan.CViComCWScanInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
@note
Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage, it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComLteInterface::GetResult() and vice versa.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.CViComCWScanInterface.GetSettings">
            <summary>
Using the methods SetConfiguration(), SetMeasurementType() and SetDetector() the internal settings of the measurement device are changed. This function reads the current configuration from the internal software and returns all those settings for read-only access.
All settings have default values. By means of this function you can retrieve the Channel Power Receiver settings which apply at the moment for measurements to be started or during running measurements.
@note
The result, like all other results too, is only for reading. To change settings the functions mentioned above shall be used.
</summary>
            <return>
a structure filled with the currently valid values or NULL if the call was not processed successfully.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.CViComCWScanInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.CWScan.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary>
SChannelSettings contains the number of channels and the table of frequencies. The frequency or channel index is counted from zero and referenced in other data e.g. the measurement result.
</summary>
            <param name="rFrequencySettings">
Contains the channel configuration that shall be measured. The configuration consists of a set of frequencies and bandwidths, for which a measurement time and attenuation is specified.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.CViComCWScanInterface.GetMeasRateLimits">
            <summary>
Limits for Parameter SChannelSettings::dwMeasRatePer1000Sec
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.CViComCWScanInterface.GetChannelCountLimits">
            <summary>
Limits for Parameter SChannelSettings::dwCount
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.CViComCWScanInterface.GetBasicInterface">
            <summary>
Returns reference to basic interface object implementation.
The basic interface is a part of any application specific ViCom interface. It is used for different R&amp;S TSM applications. The purpose is to control basic R&amp;S TSM functions, which are not specific for a certain measurement.
CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.CViComCWScanInterface.#ctor(RohdeSchwarz.ViCom.CWScan.CViComCWScanInterface*)">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.CViComCWScanInterface.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.CViComCWScanInterface.m_converter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.CViComCWScanInterface.m_nativeIf">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.CViComCWScanInterface.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CWScan.CViComCWScanInterface">
            <summary>
Interface to perform channel power measurements (also called CW measurements).
Channel power measurements do not perform any RAT specific measurements like demodulation or others. In this way they can easily be adopted to new technologies and can be used to perform the first, generic measurements.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.ICViComCWScanInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.CWScan.CViComCWScanInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.ICViComCWScanInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.CWScan.CViComCWScanInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
@note
Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage, it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComLteInterface::GetResult() and vice versa.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.ICViComCWScanInterface.GetSettings">
            <summary>
Using the methods SetConfiguration(), SetMeasurementType() and SetDetector() the internal settings of the measurement device are changed. This function reads the current configuration from the internal software and returns all those settings for read-only access.
All settings have default values. By means of this function you can retrieve the Channel Power Receiver settings which apply at the moment for measurements to be started or during running measurements.
@note
The result, like all other results too, is only for reading. To change settings the functions mentioned above shall be used.
</summary>
            <return>
a structure filled with the currently valid values or NULL if the call was not processed successfully.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.ICViComCWScanInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.CWScan.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary>
SChannelSettings contains the number of channels and the table of frequencies. The frequency or channel index is counted from zero and referenced in other data e.g. the measurement result.
</summary>
            <param name="rFrequencySettings">
Contains the channel configuration that shall be measured. The configuration consists of a set of frequencies and bandwidths, for which a measurement time and attenuation is specified.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.ICViComCWScanInterface.GetMeasRateLimits">
            <summary>
Limits for Parameter SChannelSettings::dwMeasRatePer1000Sec
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.ICViComCWScanInterface.GetChannelCountLimits">
            <summary>
Limits for Parameter SChannelSettings::dwCount
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.ICViComCWScanInterface.GetBasicInterface">
            <summary>
Returns reference to basic interface object implementation.
The basic interface is a part of any application specific ViCom interface. It is used for different R&amp;S TSM applications. The purpose is to control basic R&amp;S TSM functions, which are not specific for a certain measurement.
CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CWScan.ICViComCWScanInterface">
            <summary>
Interface to perform channel power measurements (also called CW measurements).
Channel power measurements do not perform any RAT specific measurements like demodulation or others. In this way they can easily be adopted to new technologies and can be used to perform the first, generic measurements.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.CViComCWScanInterfaceDataProcessor.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CWScan.CViComCWScanInterfaceDataProcessor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.CWScan.CViComCWScanInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.CWScan.SMeasResult&gt;*)">
   Unregister a formerly registered ScannerData listener to remove it from the list of objects that
   shall get notification about new measurement data.

   @param[in] pListener
      The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered
      objects, an error is indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.CWScan.CViComCWScanInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.CWScan.SMeasResult&gt;*)">
   Register a ScannerData listener that will be notified when new data is available. Note that it is
   important to Unregister the listener again once it is getting deleted, to avoid crashes.

   @note Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage,
   it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComLteInterface::GetResult() and vice versa.

   @param[in] pListener
      The object that shall be notified when new measurement data is available. This must not be
      null. If the listener has already been registered to the interface, it will not be
      registered a second time. Instead, an error will be indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.CWScan.CViComCWScanInterface.GetSettings">
   Using the methods SetConfiguration(), SetMeasurementType() and SetDetector() the internal settings of
   the measurement device are changed. This function reads the current configuration from the internal
   software and returns all those settings for read-only access.

   All settings have default values. By means of this function you can retrieve the Channel Power Receiver
   settings which apply at the moment for measurements to be started or during running measurements.

   @note
      The result, like all other results too, is only for reading. 
      To change settings the functions mentioned above shall be used.

   @return 
      a structure filled with the currently valid values or NULL if the call was not processed successfully.
   *
</member>
        <member name="M:RohdeSchwarz.ViCom.CWScan.CViComCWScanInterface.SetConfiguration(RohdeSchwarz.ViCom.CWScan.SChannelSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   SChannelSettings contains the number of channels and the table of frequencies.
   The frequency or channel index is counted from zero and referenced in other data e.g. the measurement result.

   @param[in] rFrequencySettings
      Contains the channel configuration that shall be measured. The configuration consists of a set of frequencies and
      bandwidths, for which a measurement time and attenuation is specified.

</member>
        <member name="M:RohdeSchwarz.ViCom.CWScan.CViComCWScanInterface.GetMeasRateLimits">
   Limits for Parameter SChannelSettings::dwMeasRatePer1000Sec

   @return
   pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
   as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.CWScan.CViComCWScanInterface.GetChannelCountLimits">
   Limits for Parameter SChannelSettings::dwCount

   @return
   pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
   as long as no other interface method is called.

</member>
        <member name="T:RohdeSchwarz.ViCom.CWScan.CViComCWScanInterface">
Interface to perform channel power measurements (also called CW measurements).

Channel power measurements do not perform any RAT specific measurements like demodulation or others. 
In this way they can easily be adopted to new technologies and can be used to perform the first, generic
measurements.
\@attribute[type="interface" supportedDevices="TSME"]

</member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmwLoaderIot.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmwLoaderIot.m_loader">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmwLoaderIot.GetInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmwLoaderIot.GetBasicInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmwLoaderIot.SetSettings(RohdeSchwarz.ViCom.Net.SReceiverSettings)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmwLoaderIot.Disconnect">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmwLoaderIot.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComError@,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmwLoaderIot.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmwLoaderIot.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmwLoaderIot.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComTsmwLoaderIot">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderIot.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderIot.m_loader">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderIot.GetInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderIot.GetBasicInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderIot.SetSettings(RohdeSchwarz.ViCom.Net.SReceiverSettings)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderIot.Disconnect">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderIot.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComError@,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderIot.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderIot.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderIot.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderIot">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmxLoaderIot.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmxLoaderIot.m_loader">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmxLoaderIot.GetInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmxLoaderIot.GetBasicInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmxLoaderIot.SetSettings(RohdeSchwarz.ViCom.Net.SReceiverSettings)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmxLoaderIot.Disconnect">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmxLoaderIot.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComError@,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmxLoaderIot.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmxLoaderIot.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmxLoaderIot.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComTsmxLoaderIot">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.DataConverterCViComCWScanInterfaceData.Convert2M(RohdeSchwarz.ViCom.Technology.Type)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.DataConverterCViComCWScanInterfaceData.Convert2M(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.DataConverterCViComCWScanInterfaceData.Convert2M(RohdeSchwarz.ViCom.CWScan.SMeasResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.DataConverterCViComCWScanInterfaceData.Convert2M(RohdeSchwarz.ViCom.CWScan.SSettings!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.DataConverterCViComCWScanInterfaceData.Convert2M(RohdeSchwarz.ViCom.SRange&lt;System.UInt32&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.DataConverterCViComCWScanInterfaceData.CleanUp(RohdeSchwarz.ViCom.CWScan.SChannelSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.CWScan.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.DataConverterCViComCWScanInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.CWScan.SChannelSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.CWScan.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.DataConverterCViComCWScanInterfaceData.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.DataConverterCViComCWScanInterfaceData.Instance">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.DataConverterCViComCWScanInterfaceData.s_instance">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CWScan.DataConverterCViComCWScanInterfaceData">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SMeasResult.ListMeasurementRates">
            <summary>
Measurement rate for all channels.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SMeasResult.ListOfChannels">
            <summary>
Actual set of measured channels.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SMeasResult.dwPcTimeStampInMs">
            <summary>
Measurement timestamp (PC tic) in ms.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.SMeasResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.SMeasResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SMeasResult.SChannel.bOverflow">
            <summary>
Overflow indicator. If true the channel level results reported in fPowerInDBm is invalid.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SMeasResult.SChannel.fPowerInDBm">
            <summary>
Measured channel power in dBm.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SMeasResult.SChannel.dwChannelIndex">
            <summary>
The channel to which all the data relates is specified using this index. The index refers to the position in the SChannelSettings::aTableOfFrequencySetting array.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.SMeasResult.SChannel.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.SMeasResult.SChannel.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CWScan.SMeasResult.SChannel">
            <summary>
Container for channel specific measurement results.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CWScan.SMeasResult">
            <summary>
The CWScan measurement result returned by CViComCWScanInterface::GetResult().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SSettings.ChannelSettings">
            <summary>
The set of frequencies that shall be measured.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SSettings.dwReceiverIndex">
            <summary>
Index to SConnectedReceiverTable::Receiver of the currently selected receiver.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.SSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CWScan.SSettings">
            <summary>
This structure contains all the currently active settings stored in the ViComCWScan interface, which are used to actually perform the measurement.
All the content has either been set by related Set methods of the CViComCWScanInterface, or they are still in their default values.
@note
The values in this structures cannot be changed, they are read-only. Even if they are modified after the structure is requested by the GetSettings() method, the changes will not be reflected in the internal settings.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SChannelSettings.pTableOfFrequencySetting">
            <summary>
This array of structures can be filled with single frequency configurations. Only dwCount entries from this table will be used.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SChannelSettings.dwCount">
            <summary>
Number of frequency configurations that shall be used from the pTableOfFrequencySetting to perform the measurement tasks. For value range see GetChannelCountLimits().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SChannelSettings.sChannelFilter">
            <summary>
The channel filter settings.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SChannelSettings.sMeasurementTimeDetector">
            <summary>
The measurement time detector settings for aggregation of sample data in frequency domain.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SChannelSettings.dwMeasRatePer1000Sec">
            <summary>
The total measurement rate for all channels. For default value and range see CViComCwInterface::GetMeasRateLimits().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SChannelSettings.sAttenuation">
            <summary>
The receiver attenuation settings.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SChannelSettings.dwFrontEndSelectionMask">
            <summary>
Receiver front end to be used by the scanner for this channel. Scanner tasks are not allowed to contain multiple FE's.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.SChannelSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CWScan.SChannelSettings">
            <summary>
This structure contains the list of frequencies and the bandwidths that make up the channels which shall be measured.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SFrequencySetting.dwChannelFilterIndex">
            <summary>
Link to filter shapes in SChannelFilter if not SDefs::INVALID_DWORD_VALUE. First filter element at index 0.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SFrequencySetting.dwBandwidthInHz">
            <summary>
Channel bandwidth in Hz. Ignored in case of active filters, e.g. dwChannelFilterIndex not SDefs::INVALID_DWORD_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SFrequencySetting.dCenterFrequencyInHz">
            <summary>
Channel center frequency in Hz.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.SFrequencySetting.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CWScan.SFrequencySetting">
            <summary>
Container for channel definitions.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SChannelFilter.pfTransferFunctionBuffer">
            <summary>
Actual buffer for dwCountOfBufferElements magnitudes of the transfer function in frequency domain. Linear interpolation of sample points.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SChannelFilter.dwCountOfBufferElements">
            <summary>
Number of elements in pfTransferFunctionBuffer.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SChannelFilter.pFilters">
            <summary>
Actual set of dwCountOfFilters filter definitions.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SChannelFilter.dwCountOfFilters">
            <summary>
Number of filter definitions.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.SChannelFilter.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SChannelFilter.SFilter.dwStartIndex">
            <summary>
The actual filter values are stored in SChannelFilter::pfTransferFunctionBuffer starting at dwStartIndex.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SChannelFilter.SFilter.dwCountOfSteps">
            <summary>
Number of steps.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SChannelFilter.SFilter.dwFrequencySpacingInHz">
            <summary>
Spacing of the frequency grid, e.g. frequency resolution.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.SChannelFilter.SFilter.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CWScan.SChannelFilter.SFilter">
            <summary>
Description of the filter magnitude transfer function in frequency domain (one-sided, filter assumed to be symmetrical).
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CWScan.SChannelFilter">
            <summary>
Container for channel filter configuration.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SAttenuation.eAttenuation">
            <summary>
Attenuation used during measurement. Only valid for bAutoAttenuation set to false;
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SAttenuation.bAutoAttenuation">
            <summary>
Receiver attenuation settings. Set to true for auto attenuation, false for fixed attenuation. Attention: It's highly recommended to use auto attenuation mode. Fixed attenuation mode shall only be used if absolutely necessary! Applying high power in a low attenuation mode scenario can drive the receiver into compression. Level accuracy stated in the receiver data sheet can't be guaranteed for fixed attenuation mode.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.SAttenuation.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.SAttenuation.Attenuation.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SAttenuation.Attenuation.Type.HIGH">
            <summary>
Preamplifier OFF, Attenuation 15dB.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SAttenuation.Attenuation.Type.MEDIUM">
            <summary>
Preamplifier OFF, Attenuation 0dB.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SAttenuation.Attenuation.Type.SMALL">
            <summary>
Preamplifier ON, Attenuation 0dB.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CWScan.SAttenuation.Attenuation.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CWScan.SAttenuation.Attenuation">
            <summary>
Definition of attenuation modes.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CWScan.SAttenuation">
            <summary>
Container for attenuation settings.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SMeasurementTimeDetector.eDetector">
            <summary>
Detector type used to aggregate samples in frequency domain.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SMeasurementTimeDetector.dwMeasTimeInNs">
            <summary>
The channel measurement time in nsec. The time span for measuring a CW channel relates to the number of samples and the chosen sampling rate which are internally determined for a given channel bandwidth. For TDD signals it might be necessary to override the automatically chosen setting. Set to 1 for automatic mode.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.SMeasurementTimeDetector.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CWScan.SMeasurementTimeDetector.Detector.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SMeasurementTimeDetector.Detector.Type.AVG">
            <summary>
Average detector (detects the average value)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SMeasurementTimeDetector.Detector.Type.MINPEAK">
            <summary>
Min detector (detects the minimum value)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SMeasurementTimeDetector.Detector.Type.RMS">
            <summary>
RMS detector (calculates the root mean square)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CWScan.SMeasurementTimeDetector.Detector.Type.PEAK">
            <summary>
Peak detector (detects the maximum value)
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CWScan.SMeasurementTimeDetector.Detector.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CWScan.SMeasurementTimeDetector.Detector">
            <summary>
Definition of measurement time detector modes.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CWScan.SMeasurementTimeDetector">
            <summary>
Container for measurement time detector settings.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SMeasResult.ListMeasurementRates">
Measurement rate for all channels.

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SMeasResult.ListOfChannels">
Actual set of measured channels.

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SMeasResult.SChannel.bOverflow">
Overflow indicator. If true the channel level results reported in fPowerInDBm is invalid.

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SMeasResult.SChannel.fPowerInDBm">
Measured channel power in dBm.

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SMeasResult.SChannel.dwChannelIndex">
The channel to which all the data relates is specified using this index.
The index refers to the position in the SChannelSettings::aTableOfFrequencySetting array.

</member>
        <member name="T:RohdeSchwarz.ViCom.CWScan.SMeasResult.SChannel">
Container for channel specific measurement results.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SMeasResult.dwPcTimeStampInMs">
Measurement timestamp (PC tic) in ms.

</member>
        <member name="T:RohdeSchwarz.ViCom.CWScan.SMeasResult">
The CWScan measurement result returned by CViComCWScanInterface::GetResult().
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.CWScan.SSettings">
This structure contains all the currently active settings stored in the ViCom CWScan interface, 
which are used to actually perform the measurement. 

All the content has either been set by related Set methods of the CViComCWScanInterface, or
they are still in their default values.

@note
    The values in this structures cannot be changed, they are read-only. Even if they
    are modified after the structure is requested by the GetSettings() method, the changes
    will not be reflected in the internal settings.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SChannelSettings.pTableOfFrequencySetting">
This array of structures can be filled with single frequency configurations.
Only dwCount entries from this table will be used.
\@attribute[type="array" size="dwCount" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SChannelSettings.dwCount">
Number of frequency configurations that shall be used from the pTableOfFrequencySetting to perform the measurement tasks.
For value range see GetChannelCountLimits().

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SChannelSettings.sChannelFilter">
The channel filter settings.

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SChannelSettings.sMeasurementTimeDetector">
The measurement time detector settings for aggregation of sample data in frequency domain.

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SChannelSettings.dwMeasRatePer1000Sec">
The total measurement rate for all channels. For default value and range see CViComCwInterface::GetMeasRateLimits().

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SChannelSettings.sAttenuation">
The receiver attenuation settings.

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SChannelSettings.dwFrontEndSelectionMask">
Receiver front end to be used by the scanner for this channel.
Scanner tasks are not allowed to contain multiple FE's.

</member>
        <member name="T:RohdeSchwarz.ViCom.CWScan.SChannelSettings">
This structure contains the list of frequencies and the bandwidths that make up the channels
which shall be measured.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SFrequencySetting.dwChannelFilterIndex">
Link to filter shapes in SChannelFilter if not SDefs::INVALID_DWORD_VALUE.
First filter element at index 0.

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SFrequencySetting.dwBandwidthInHz">
Channel bandwidth in Hz.
Ignored in case of active filters, e.g. dwChannelFilterIndex not SDefs::INVALID_DWORD_VALUE.

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SFrequencySetting.dCenterFrequencyInHz">
Channel center frequency in Hz.

</member>
        <member name="T:RohdeSchwarz.ViCom.CWScan.SFrequencySetting">
Container for channel definitions.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SChannelFilter.pfTransferFunctionBuffer">
Actual buffer for dwCountOfBufferElements magnitudes of the transfer function in frequency domain. Linear interpolation of sample points.
\@attribute[type="array" size="dwCountOfBufferElements" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SChannelFilter.dwCountOfBufferElements">
Number of elements in pfTransferFunctionBuffer.

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SChannelFilter.pFilters">
Actual set of dwCountOfFilters filter definitions.
\@attribute[type="array" size="dwCountOfFilters" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SChannelFilter.dwCountOfFilters">
Number of filter definitions.

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SChannelFilter.SFilter.dwStartIndex">
The actual filter values are stored in SChannelFilter::pfTransferFunctionBuffer starting
at dwStartIndex.

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SChannelFilter.SFilter.dwCountOfSteps">
Number of steps.

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SChannelFilter.SFilter.dwFrequencySpacingInHz">
Spacing of the frequency grid, e.g. frequency resolution.

</member>
        <member name="T:RohdeSchwarz.ViCom.CWScan.SChannelFilter.SFilter">
Description of the filter magnitude transfer function in frequency domain (one-sided, filter assumed to be symmetrical).
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.CWScan.SChannelFilter">
Container for channel filter configuration.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SAttenuation.eAttenuation">
Attenuation used during measurement. Only valid for bAutoAttenuation set to false;

</member>
        <member name="T:RohdeSchwarz.ViCom.CWScan.SAttenuation.Attenuation">
Definition of attenuation modes.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SAttenuation.bAutoAttenuation">
Receiver attenuation settings. Set to true for auto attenuation, false for fixed attenuation.
Attention:
It's highly recommended to use auto attenuation mode. Fixed attenuation mode shall only be used
if absolutely necessary!
Applying high power in a low attenuation mode scenario can drive the receiver into compression.
Level accuracy stated in the receiver data sheet can't be guaranteed for fixed attenuation mode.

</member>
        <member name="T:RohdeSchwarz.ViCom.CWScan.SAttenuation">
Container for attenuation settings.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SMeasurementTimeDetector.eDetector">
Detector type used to aggregate samples in frequency domain.

</member>
        <member name="T:RohdeSchwarz.ViCom.CWScan.SMeasurementTimeDetector.Detector">
Definition of measurement time detector modes.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.CWScan.SMeasurementTimeDetector.dwMeasTimeInNs">
The channel measurement time in nsec.
The time span for measuring a CW channel relates to the number of samples and the chosen sampling rate which are internally
determined for a given channel bandwidth. For TDD signals it might be necessary to override the automatically chosen setting.
Set to 1 for automatic mode.

</member>
        <member name="T:RohdeSchwarz.ViCom.CWScan.SMeasurementTimeDetector">
Container for measurement time detector settings.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.CWScan.etViComInterfaceVersion">
Data containers used for ViCom CW interface. Contains measurement configuration and result structures.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterface.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterface.GetType">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available.
@note
Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage, it is not allowed to call CViComBasicInterface::GetResultCounters() or GetResult() and vice versa.
@note
Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.Net.CDMA.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst,System.UInt32)">
            <summary>
Issue a request to the Layer 3 Decoder to decode the PDU contained by rSL3DecoderRequest. If the data has been decoded successfully within the time given by dwTimeOutInMs, the method creates the SL3DecoderResult and the buffer within on the heap, fills in the Layer 3 Decoder result and returns a pointer to it.
</summary>
            <param name="rSL3DecoderRequest">
Contains the data that was the result of a CDMA 2000 measurement and holds the message data that shall be decoded.
</param>
            <param name="dwTimeOutInMs">
Unless specified, the default timeout value to use.
</param>
            <return>
one measurement result on the heap, if the function succeeded. Otherwise NULL. Attention: The returned pointer is only valid until this function is called again.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterface.GetSettings">
            <summary>
By means of the functions: SetConfiguration, internal settings of the PN-Scanner may be changed. The functions SelectReceiver(), SetTimebaseSynchronisationMode() of CViComBasicInterface change basic settings. Except for frequency settings, all other settings have default values.
By means of this function you can retrieve the PN-Scanner settings which apply at the moment for measurements to be started or during running measurements. Note that the result, like all other results too, is only for reading. To change settings the functions mentioned above should be used.
</summary>
            <return>
pointer to a structure holding the current R&amp;S TSM settings. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterface.IssueDemodRequests(RohdeSchwarz.ViCom.Net.CDMA.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary>
Use this function to issue commands (specific demodulation requests, reset commands) for the BCH demodulator during measurement. To enable or disable BTS related demodulation, this can only be achieved using this method.
</summary>
            <param name="rDemodRequests">
When the function is called, this pointer contains the request parameters. For details see SDemodRequests.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterface.GetChannelState(System.UInt32)">
            <summary>
GetChannelState returns the current status of the configurable settings from the channel.
</summary>
            <param name="channelIndex">
Specifies the 0-based channel index to be queried.
</param>
            <return>
an object of SChannelState which contains the current state for the channel. The items in SChannelState can be modified during a running measurement using the ModifyChannel method.
SChannelState and ModifyChannel.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterface.ModifyChannel(RohdeSchwarz.ViCom.Net.CDMA.SChannelState!System.Runtime.CompilerServices.IsConst)">
            <summary>
ModifyChannel is used to modify configurable channel settings during a running measurement. SChannelState for items that can be modified.
</summary>
            <param name="sChannelState">
sChannelState contains the modified settings to be changed in the channel.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterface.AddChannel(System.Double,System.Boolean)">
            <summary>
AddChannel is used to add new channels to an already running measurement.
@warning
Unless a CDMA and EVDO channel are provided with SetConfiguration prior to starting the measurement, only one technology (CDMA or EVDO) is supported per interface.
@warning
Each channel frequency can only be added once. Attempting to add a channel frequency multiple times will return the index that is pertaining to the existing channel.
@note
This method cannot be called in the idle state (i.e. IsMeasurementStarted() must return TRUE), use SetConfiguration instead.
@note
The measurement settings from the first CDMA or EVDO channel index, as configured by SetConfiguration(), are used to create the new channel.
</summary>
            <param name="frequencyInHz">
Center frequency in Hertz for the channel.
</param>
            <param name="channelIsEvdo">
When set to true, indicates the channel type is EVDO. When set to false, indicates the channel type is CDMA.
</param>
            <return>
If success, the 0-based channel index for new channel is returned. If failure, 0xFFFFFFFF is returned indicating an invalid channel.
</return>
            <param name="VICEC_CDMA_EVDO_RECONFIGURATION">
when adding a CDMA channel and at least one CDMA channel was not configured prior to starting measurements.
</param>
            <param name="VICEC_CDMA_EVDO_RECONFIGURATION">
when adding an EVDO channel and at least one EVDO channel was not configured prior to starting measurements.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.CDMA.SChannelSettings!System.Runtime.CompilerServices.IsConst,RohdeSchwarz.ViCom.Net.CDMA.SDemodulationSettings!System.Runtime.CompilerServices.IsConst,RohdeSchwarz.ViCom.Net.CDMA.SyncChannelDemodulationMode.Type,RohdeSchwarz.ViCom.Net.CDMA.SEvdoControlSettings,RohdeSchwarz.ViCom.Net.CDMA.SMaxVelocity!System.Runtime.CompilerServices.IsConst)">
            <summary>
SChannelSettings contains the count of channels or frequencies and the table of frequencies in MHz. Each frequency has a table of PN Offset Arbitrary Limitation settings attached. The frequency or channel index is 0-based and is referenced in other data.
This function also sets the general BCH demodulation properties, including the Message Identifiers that should be read by the R&amp;S TSM when the BCH is demodulated. Different sets of messages may be read from different BCH channels. Once a demodulation is requested, the R&amp;S TSM device tries to serve the command as soon as possible. The demodulation settings can be changed during the measurement using the IssueDemodRequests() method below.
</summary>
            <param name="rChannelSettings">
Contains the definition which frequencies shall be measured.
SChannelSettings for a more detailed description on those settings.
</param>
            <param name="rDemodulationSettings">
Contains the definition which PDUs of BCH shall be measured.
SDemodulationSettings for a more detailed description on those settings.
</param>
            <param name="eMode">
eMode can have the following values: ONCE, ALL or FAST. eMode determines how often the Scanner will demodulate the Forward Synchronization Channel (F-SYNC) and decode the information elements in the synchronization message. The synchronization message is demodulated at least once per measured frequency. A smaller F-SYNC demodulation rate has no impact on the measurement but can considerably reduce the amount of result data.
</param>
            <param name="rEvdoControlSettings">
rEvdoControlSettings used to set scan attributes for the EVDO channels. Note that these settings only apply if at least one of the channels has its EVDO scanning attribute set to TRUE.
</param>
            <param name="rMaxVelocity">
Max speed of the test vehicle to adjust fading channel limitation in the measurement algorithms. rMaxVelocity.dMaxVelocityInKmPerHour gives the maximum expected speed in the test drive.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterface.GetMeasRateLimits">
            <summary>
Limits The resulting meas rate limits are specified for the SMeasurementRate::dwValuePer1000Sec setting. The maxmimum rating for EVDO is equal to the returned default value of the SRange container object.
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterface.GetDemodThresholdLimits">
            <summary>
Limits for Parameter SDemodulationSettings::lEcToIoThresholdInDB100_for_CDMA and SDemodulationSettings::lEcToIoThresholdInDB100_for_EVDO
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterface.GetChannelCountLimits">
            <summary>
Limits for Parameter SChannelSettings::dwCount
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterface.GetBasicInterface">
            <summary>
The basic interface is a part of any application specific ViCom interface. It is used for different R&amp;S TSM applications. The purpose is to control basic R&amp;S TSM functions, which are not specific for a certain measurement. See CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterface.#ctor(RohdeSchwarz.ViCom.CDMA.CViComCdmaInterface*)">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterface.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterface.m_converter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterface.m_nativeIf">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterface.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterface">
            <summary>
The following functions are specific to the ViComCdma interface, which is used when measuring CDMA2000 signals (including 1xEV-DO).
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.Convert2M(RohdeSchwarz.ViCom.Technology.Type)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.Convert2M(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.Convert2M(RohdeSchwarz.ViCom.CDMA.SMeasResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.Convert2M(RohdeSchwarz.ViCom.CDMA.SL3DecoderResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.Convert2M(RohdeSchwarz.ViCom.CDMA.SSettings!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.Convert2M(RohdeSchwarz.ViCom.CDMA.SChannelState)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.Convert2M(RohdeSchwarz.ViCom.SRange&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.Convert2M(RohdeSchwarz.ViCom.SRange&lt;System.UInt32&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.CleanUp(RohdeSchwarz.ViCom.CDMA.SL3DecoderRequest*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.CDMA.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.CDMA.SL3DecoderRequest*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.CDMA.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.CleanUp(RohdeSchwarz.ViCom.CDMA.SDemodRequests*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.CDMA.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.CDMA.SDemodRequests*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.CDMA.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.CleanUp(RohdeSchwarz.ViCom.CDMA.SChannelState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.CDMA.SChannelState!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.CDMA.SChannelState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.CDMA.SChannelState!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.CleanUp(RohdeSchwarz.ViCom.CDMA.SMaxVelocity*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.CDMA.SMaxVelocity!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.CDMA.SMaxVelocity*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.CDMA.SMaxVelocity!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.CleanUp(RohdeSchwarz.ViCom.CDMA.SEvdoControlSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.CDMA.SEvdoControlSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.CDMA.SEvdoControlSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.CDMA.SEvdoControlSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.Net.CDMA.SyncChannelDemodulationMode.Type)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.CleanUp(RohdeSchwarz.ViCom.CDMA.SDemodulationSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.CDMA.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.CDMA.SDemodulationSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.CDMA.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.CleanUp(RohdeSchwarz.ViCom.CDMA.SChannelSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.CDMA.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.CDMA.SChannelSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.CDMA.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.Instance">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData.s_instance">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.DataConverterCViComCdmaInterfaceData">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.ICViComCdmaInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.ICViComCdmaInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available.
@note
Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage, it is not allowed to call CViComBasicInterface::GetResultCounters() or GetResult() and vice versa.
@note
Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.ICViComCdmaInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.Net.CDMA.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst,System.UInt32)">
            <summary>
Issue a request to the Layer 3 Decoder to decode the PDU contained by rSL3DecoderRequest. If the data has been decoded successfully within the time given by dwTimeOutInMs, the method creates the SL3DecoderResult and the buffer within on the heap, fills in the Layer 3 Decoder result and returns a pointer to it.
</summary>
            <param name="rSL3DecoderRequest">
Contains the data that was the result of a CDMA 2000 measurement and holds the message data that shall be decoded.
</param>
            <param name="dwTimeOutInMs">
Unless specified, the default timeout value to use.
</param>
            <return>
one measurement result on the heap, if the function succeeded. Otherwise NULL. Attention: The returned pointer is only valid until this function is called again.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.ICViComCdmaInterface.GetSettings">
            <summary>
By means of the functions: SetConfiguration, internal settings of the PN-Scanner may be changed. The functions SelectReceiver(), SetTimebaseSynchronisationMode() of CViComBasicInterface change basic settings. Except for frequency settings, all other settings have default values.
By means of this function you can retrieve the PN-Scanner settings which apply at the moment for measurements to be started or during running measurements. Note that the result, like all other results too, is only for reading. To change settings the functions mentioned above should be used.
</summary>
            <return>
pointer to a structure holding the current R&amp;S TSM settings. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.ICViComCdmaInterface.IssueDemodRequests(RohdeSchwarz.ViCom.Net.CDMA.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary>
Use this function to issue commands (specific demodulation requests, reset commands) for the BCH demodulator during measurement. To enable or disable BTS related demodulation, this can only be achieved using this method.
</summary>
            <param name="rDemodRequests">
When the function is called, this pointer contains the request parameters. For details see SDemodRequests.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.ICViComCdmaInterface.GetChannelState(System.UInt32)">
            <summary>
GetChannelState returns the current status of the configurable settings from the channel.
</summary>
            <param name="channelIndex">
Specifies the 0-based channel index to be queried.
</param>
            <return>
an object of SChannelState which contains the current state for the channel. The items in SChannelState can be modified during a running measurement using the ModifyChannel method.
SChannelState and ModifyChannel.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.ICViComCdmaInterface.ModifyChannel(RohdeSchwarz.ViCom.Net.CDMA.SChannelState!System.Runtime.CompilerServices.IsConst)">
            <summary>
ModifyChannel is used to modify configurable channel settings during a running measurement. SChannelState for items that can be modified.
</summary>
            <param name="sChannelState">
sChannelState contains the modified settings to be changed in the channel.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.ICViComCdmaInterface.AddChannel(System.Double,System.Boolean)">
            <summary>
AddChannel is used to add new channels to an already running measurement.
@warning
Unless a CDMA and EVDO channel are provided with SetConfiguration prior to starting the measurement, only one technology (CDMA or EVDO) is supported per interface.
@warning
Each channel frequency can only be added once. Attempting to add a channel frequency multiple times will return the index that is pertaining to the existing channel.
@note
This method cannot be called in the idle state (i.e. IsMeasurementStarted() must return TRUE), use SetConfiguration instead.
@note
The measurement settings from the first CDMA or EVDO channel index, as configured by SetConfiguration(), are used to create the new channel.
</summary>
            <param name="frequencyInHz">
Center frequency in Hertz for the channel.
</param>
            <param name="channelIsEvdo">
When set to true, indicates the channel type is EVDO. When set to false, indicates the channel type is CDMA.
</param>
            <return>
If success, the 0-based channel index for new channel is returned. If failure, 0xFFFFFFFF is returned indicating an invalid channel.
</return>
            <param name="VICEC_CDMA_EVDO_RECONFIGURATION">
when adding a CDMA channel and at least one CDMA channel was not configured prior to starting measurements.
</param>
            <param name="VICEC_CDMA_EVDO_RECONFIGURATION">
when adding an EVDO channel and at least one EVDO channel was not configured prior to starting measurements.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.ICViComCdmaInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.CDMA.SChannelSettings!System.Runtime.CompilerServices.IsConst,RohdeSchwarz.ViCom.Net.CDMA.SDemodulationSettings!System.Runtime.CompilerServices.IsConst,RohdeSchwarz.ViCom.Net.CDMA.SyncChannelDemodulationMode.Type,RohdeSchwarz.ViCom.Net.CDMA.SEvdoControlSettings,RohdeSchwarz.ViCom.Net.CDMA.SMaxVelocity!System.Runtime.CompilerServices.IsConst)">
            <summary>
SChannelSettings contains the count of channels or frequencies and the table of frequencies in MHz. Each frequency has a table of PN Offset Arbitrary Limitation settings attached. The frequency or channel index is 0-based and is referenced in other data.
This function also sets the general BCH demodulation properties, including the Message Identifiers that should be read by the R&amp;S TSM when the BCH is demodulated. Different sets of messages may be read from different BCH channels. Once a demodulation is requested, the R&amp;S TSM device tries to serve the command as soon as possible. The demodulation settings can be changed during the measurement using the IssueDemodRequests() method below.
</summary>
            <param name="rChannelSettings">
Contains the definition which frequencies shall be measured.
SChannelSettings for a more detailed description on those settings.
</param>
            <param name="rDemodulationSettings">
Contains the definition which PDUs of BCH shall be measured.
SDemodulationSettings for a more detailed description on those settings.
</param>
            <param name="eMode">
eMode can have the following values: ONCE, ALL or FAST. eMode determines how often the Scanner will demodulate the Forward Synchronization Channel (F-SYNC) and decode the information elements in the synchronization message. The synchronization message is demodulated at least once per measured frequency. A smaller F-SYNC demodulation rate has no impact on the measurement but can considerably reduce the amount of result data.
</param>
            <param name="rEvdoControlSettings">
rEvdoControlSettings used to set scan attributes for the EVDO channels. Note that these settings only apply if at least one of the channels has its EVDO scanning attribute set to TRUE.
</param>
            <param name="rMaxVelocity">
Max speed of the test vehicle to adjust fading channel limitation in the measurement algorithms. rMaxVelocity.dMaxVelocityInKmPerHour gives the maximum expected speed in the test drive.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.ICViComCdmaInterface.GetMeasRateLimits">
            <summary>
Limits The resulting meas rate limits are specified for the SMeasurementRate::dwValuePer1000Sec setting. The maxmimum rating for EVDO is equal to the returned default value of the SRange container object.
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.ICViComCdmaInterface.GetDemodThresholdLimits">
            <summary>
Limits for Parameter SDemodulationSettings::lEcToIoThresholdInDB100_for_CDMA and SDemodulationSettings::lEcToIoThresholdInDB100_for_EVDO
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.ICViComCdmaInterface.GetChannelCountLimits">
            <summary>
Limits for Parameter SChannelSettings::dwCount
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.ICViComCdmaInterface.GetBasicInterface">
            <summary>
The basic interface is a part of any application specific ViCom interface. It is used for different R&amp;S TSM applications. The purpose is to control basic R&amp;S TSM functions, which are not specific for a certain measurement. See CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.ICViComCdmaInterface">
            <summary>
The following functions are specific to the ViComCdma interface, which is used when measuring CDMA2000 signals (including 1xEV-DO).
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterfaceDataProcessor.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.CViComCdmaInterfaceDataProcessor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.CDMA.CViComCdmaInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.CDMA.SMeasResult&gt;*)">
   Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get 
   notification about new measurement data.

   @param[in] pListener
      The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered
      objects, an error is indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.CDMA.CViComCdmaInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.CDMA.SMeasResult&gt;*)">
   Register a ScannerData listener that will be notified when new data is available.

   @note 
      Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage, it is 
      not allowed to call CViComBasicInterface::GetResultCounters() or GetResult() and vice versa.

   @note
      Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.

   @param[in] pListener
      The object that shall be notified when new measurement data is available. This must not be null. If the listener 
      has already been registered to the interface, it will not be registered a second time. Instead, an error will be 
      indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.CDMA.CViComCdmaInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.CDMA.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsLong)">
   Issue a request to the Layer 3 Decoder to decode the PDU contained by rSL3DecoderRequest.  If the data has been 
   decoded successfully within the time given by dwTimeOutInMs, the method creates the SL3DecoderResult and the buffer
   within on the heap, fills in the Layer 3 Decoder result and returns a pointer to it.

   @param[in] rSL3DecoderRequest
      Contains the data that was the result of a CDMA 2000 measurement and holds the message data that shall be decoded.

   @param[in] dwTimeOutInMs
      Unless specified, the default timeout value to use.

   @return
      one measurement result on the heap, if the function succeeded. Otherwise NULL.
      Attention: The returned pointer is only valid until this function is called again.

</member>
        <member name="M:RohdeSchwarz.ViCom.CDMA.CViComCdmaInterface.IssueDemodRequests(RohdeSchwarz.ViCom.CDMA.SDemodRequests!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   Use this function to issue commands (specific demodulation requests, reset commands) for the BCH demodulator 
   during measurement. To enable or disable BTS related demodulation, this can only be achieved using this method.

   @param[in] rDemodRequests
      When the function is called, this pointer contains the request parameters.
      For details see SDemodRequests.

</member>
        <member name="M:RohdeSchwarz.ViCom.CDMA.CViComCdmaInterface.GetChannelState(System.UInt32!System.Runtime.CompilerServices.IsLong)">
   GetChannelState returns the current status of the configurable settings from the channel.

   @param[in] channelIndex
      Specifies the 0-based channel index to be queried.

   @return
      an object of SChannelState which contains the current state for the channel.  The items in SChannelState 
      can be modified during a running measurement using the ModifyChannel method.
      @sa SChannelState and ModifyChannel.

</member>
        <member name="M:RohdeSchwarz.ViCom.CDMA.CViComCdmaInterface.ModifyChannel(RohdeSchwarz.ViCom.CDMA.SChannelState!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   ModifyChannel is used to modify configurable channel settings during a running measurement.
   @sa SChannelState for items that can be modified.

   @param[in] sChannelState
      sChannelState contains the modified settings to be changed in the channel.

</member>
        <member name="M:RohdeSchwarz.ViCom.CDMA.CViComCdmaInterface.AddChannel(System.Double,System.Boolean)">
   AddChannel is used to add new channels to an already running measurement.  

   @warning
      Unless a CDMA and EVDO channel are provided with SetConfiguration prior to starting the measurement, only one
      technology (CDMA or EVDO) is supported per interface.

   @warning
      Each channel frequency can only be added once. Attempting to add a channel frequency multiple times will return 
      the index that is pertaining to the existing channel.

   @note 
      This method cannot be called in the idle state (i.e. IsMeasurementStarted() must return TRUE), use 
      SetConfiguration instead.

   @note
      The measurement settings from the first CDMA or EVDO channel index, as configured by SetConfiguration(), are used 
      to create the new channel.

   @param[in] frequencyInHz
      Center frequency in Hertz for the channel.

   @param[in] channelIsEvdo
      When set to true, indicates the channel type is EVDO.  When set to false, indicates the channel type is CDMA.

   @return
      If success, the 0-based channel index for new channel is returned.  If failure, 0xFFFFFFFF is returned indicating an invalid channel.

   @throw 
      VICEC_CDMA_EVDO_RECONFIGURATION when adding a CDMA channel and at least one CDMA channel was not configured prior 
      to starting measurements.

   @throw 
      VICEC_CDMA_EVDO_RECONFIGURATION when adding an EVDO channel and at least one EVDO channel was not configured prior 
      to starting measurements.

</member>
        <member name="M:RohdeSchwarz.ViCom.CDMA.CViComCdmaInterface.GetMeasRateLimits">
   Limits 
   The resulting meas rate limits are specified for the SMeasurementRate::dwValuePer1000Sec setting. The maxmimum rating
   for EVDO is equal to the returned default value of the SRange container object.

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.CDMA.CViComCdmaInterface.GetDemodThresholdLimits">
   Limits for Parameter SDemodulationSettings::lEcToIoThresholdInDB100_for_CDMA
   and SDemodulationSettings::lEcToIoThresholdInDB100_for_EVDO

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.CDMA.CViComCdmaInterface.GetChannelCountLimits">
   Limits for Parameter SChannelSettings::dwCount

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.CViComCdmaInterface">
The following functions are specific to the ViComCdma interface, which is used when measuring CDMA2000 signals 
(including 1xEV-DO).
\@attribute[type="interface" supportedDevices="TSME"]

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterface.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterface.GetType">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
@note
Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage, it is not allowed to call CViComBasicInterface::GetResultCounters() or GetResult() and vice versa.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.Net.GSM.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst,System.UInt32)">
            <summary>
Issue a request to the Layer 3 Decoder to decode the System Information contained by rSL3DecoderRequest. If the data has been decoded successfully within the time given by dwTimeOutInMs, the method creates the SL3DecoderResult and the buffer within on the heap, fills in the Layer 3 Decoder result and returns a pointer to it.
</summary>
            <param name="rSL3DecoderRequest">
Contains the data that was the result of a GSM measurement and holds the System Information data that shall be decoded.
</param>
            <param name="dwTimeOutInMs">
Unless specified, the default timeout value to use.
</param>
            <return>
one measurement result on the heap, if the function succeeded. Otherwise NULL. Attention: The returned pointer is only valid until this function is called again.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterface.GetSettings">
            <summary>
By means of the function: SetConfiguration() internal settings of the GSM Network-Scanner may be changed and with the functions SelectReceiver() of CViComBasicInterface basic settings are changed.
All settings have default values. By means of this function you can retrieve the GSM Network-Scanner settings which apply at the moment for measurements to be started or during running measurements.
@note
The result, like all other results too, is only for reading. To change settings the functions mentioned above shall be used.
</summary>
            <return>
a structure filled with the currently valid values or NULL if the call was not processed successfully.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterface.IssueDemodRequests(RohdeSchwarz.ViCom.Net.GSM.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary>
Use this function to issue commands (demodulation requests, reset commands) for the System Information Type demodulator during measurement.
SI Types may be acquired for certain BTSs. Demodulation for BTSs or for channels may be reset.
Any SI Type requested here for a specific channel must have been registered for that channel before start of measurement in the SetDemodulationSettings() method, for example with mode SITYPE_DEMOD_ON_CMD.
</summary>
            <param name="rDemodRequests">
When the function is called, this pointer contains the request parameters. For details see SDemodRequests.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.GSM.SChannelSettings!System.Runtime.CompilerServices.IsConst,RohdeSchwarz.ViCom.Net.GSM.SDemodulationSettings!System.Runtime.CompilerServices.IsConst,RohdeSchwarz.ViCom.Net.GSM.SMeasurementDetails!System.Runtime.CompilerServices.IsConst)">
            <summary>
SChannelSettings contains the count of channels or frequencies and the table of frequencies in MHz. Each frequency has a table of PN Offset Arbitrary Limitation settings attached. The frequency or channel index is counted from zero and is referenced in other data.
This function also sets the general BCH demodulation properties, including the Message Identifiers that should be read by the R&amp;S TSM when the BCH is demodulated. Different sets of messages may be read from different BCH channels.
Once a demodulation is requested, the R&amp;S TSM device tries to serve the command as soon as possible. The demodulation settings can be changed during the measurement is active using the IssueDemodRequests() method below.
</summary>
            <param name="rChannelSettings">
Contains the definition which frequencies shall be measured.
SChannelSettings for a more detailed description on those settings.
</param>
            <param name="rDemodulationSettings">
Contains the definition which PDUs of BCH shall be measured.
SDemodulationSettings for a more detailed description on those settings.
</param>
            <param name="rMeasurementDetails" />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterface.GetMeasRateLimits">
            <summary>
Limits for Parameter SMeasurementRate::dwValuePer1000Sec.
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterface.GetDemodThresholdLimits">
            <summary>
Limits for Parameter SDemodulationSettings::lTotalPowerOffsetInDB10
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterface.GetChannelCountLimits">
            <summary>
Limits for Parameter SChannelSettings::dwCount
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterface.GetBasicInterface">
            <summary>
Returns reference to basic interface object implementation.
The basic interface is a part of any application specific ViCom interface. It is used for different R&amp;S TSM applications. The purpose is to control basic R&amp;S TSM functions, which are not specific for a certain measurement.
CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterface.#ctor(RohdeSchwarz.ViCom.GSM.CViComGsmInterface*)">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterface.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterface.m_converter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterface.m_nativeIf">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterface.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterface">
            <summary>
GSM measurement module for ViCom. Offers the configuration and result receiving methods for all GSM related measurement tasks.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.DataConverterCViComGsmInterfaceData.Convert2M(RohdeSchwarz.ViCom.Technology.Type)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.DataConverterCViComGsmInterfaceData.Convert2M(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.DataConverterCViComGsmInterfaceData.Convert2M(RohdeSchwarz.ViCom.GSM.SMeasResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.DataConverterCViComGsmInterfaceData.Convert2M(RohdeSchwarz.ViCom.GSM.SL3DecoderResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.DataConverterCViComGsmInterfaceData.Convert2M(RohdeSchwarz.ViCom.GSM.SSettings!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.DataConverterCViComGsmInterfaceData.Convert2M(RohdeSchwarz.ViCom.SRange&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.DataConverterCViComGsmInterfaceData.Convert2M(RohdeSchwarz.ViCom.SRange&lt;System.UInt32&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.DataConverterCViComGsmInterfaceData.CleanUp(RohdeSchwarz.ViCom.GSM.SL3DecoderRequest*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.GSM.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.DataConverterCViComGsmInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.GSM.SL3DecoderRequest*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.GSM.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.DataConverterCViComGsmInterfaceData.CleanUp(RohdeSchwarz.ViCom.GSM.SDemodRequests*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.GSM.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.DataConverterCViComGsmInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.GSM.SDemodRequests*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.GSM.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.DataConverterCViComGsmInterfaceData.CleanUp(RohdeSchwarz.ViCom.GSM.SMeasurementDetails*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.GSM.SMeasurementDetails!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.DataConverterCViComGsmInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.GSM.SMeasurementDetails*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.GSM.SMeasurementDetails!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.DataConverterCViComGsmInterfaceData.CleanUp(RohdeSchwarz.ViCom.GSM.SDemodulationSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.GSM.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.DataConverterCViComGsmInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.GSM.SDemodulationSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.GSM.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.DataConverterCViComGsmInterfaceData.CleanUp(RohdeSchwarz.ViCom.GSM.SChannelSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.GSM.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.DataConverterCViComGsmInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.GSM.SChannelSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.GSM.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.DataConverterCViComGsmInterfaceData.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.DataConverterCViComGsmInterfaceData.Instance">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.DataConverterCViComGsmInterfaceData.s_instance">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.DataConverterCViComGsmInterfaceData">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.ICViComGsmInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.ICViComGsmInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
@note
Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage, it is not allowed to call CViComBasicInterface::GetResultCounters() or GetResult() and vice versa.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.ICViComGsmInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.Net.GSM.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst,System.UInt32)">
            <summary>
Issue a request to the Layer 3 Decoder to decode the System Information contained by rSL3DecoderRequest. If the data has been decoded successfully within the time given by dwTimeOutInMs, the method creates the SL3DecoderResult and the buffer within on the heap, fills in the Layer 3 Decoder result and returns a pointer to it.
</summary>
            <param name="rSL3DecoderRequest">
Contains the data that was the result of a GSM measurement and holds the System Information data that shall be decoded.
</param>
            <param name="dwTimeOutInMs">
Unless specified, the default timeout value to use.
</param>
            <return>
one measurement result on the heap, if the function succeeded. Otherwise NULL. Attention: The returned pointer is only valid until this function is called again.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.ICViComGsmInterface.GetSettings">
            <summary>
By means of the function: SetConfiguration() internal settings of the GSM Network-Scanner may be changed and with the functions SelectReceiver() of CViComBasicInterface basic settings are changed.
All settings have default values. By means of this function you can retrieve the GSM Network-Scanner settings which apply at the moment for measurements to be started or during running measurements.
@note
The result, like all other results too, is only for reading. To change settings the functions mentioned above shall be used.
</summary>
            <return>
a structure filled with the currently valid values or NULL if the call was not processed successfully.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.ICViComGsmInterface.IssueDemodRequests(RohdeSchwarz.ViCom.Net.GSM.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary>
Use this function to issue commands (demodulation requests, reset commands) for the System Information Type demodulator during measurement.
SI Types may be acquired for certain BTSs. Demodulation for BTSs or for channels may be reset.
Any SI Type requested here for a specific channel must have been registered for that channel before start of measurement in the SetDemodulationSettings() method, for example with mode SITYPE_DEMOD_ON_CMD.
</summary>
            <param name="rDemodRequests">
When the function is called, this pointer contains the request parameters. For details see SDemodRequests.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.ICViComGsmInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.GSM.SChannelSettings!System.Runtime.CompilerServices.IsConst,RohdeSchwarz.ViCom.Net.GSM.SDemodulationSettings!System.Runtime.CompilerServices.IsConst,RohdeSchwarz.ViCom.Net.GSM.SMeasurementDetails!System.Runtime.CompilerServices.IsConst)">
            <summary>
SChannelSettings contains the count of channels or frequencies and the table of frequencies in MHz. Each frequency has a table of PN Offset Arbitrary Limitation settings attached. The frequency or channel index is counted from zero and is referenced in other data.
This function also sets the general BCH demodulation properties, including the Message Identifiers that should be read by the R&amp;S TSM when the BCH is demodulated. Different sets of messages may be read from different BCH channels.
Once a demodulation is requested, the R&amp;S TSM device tries to serve the command as soon as possible. The demodulation settings can be changed during the measurement is active using the IssueDemodRequests() method below.
</summary>
            <param name="rChannelSettings">
Contains the definition which frequencies shall be measured.
SChannelSettings for a more detailed description on those settings.
</param>
            <param name="rDemodulationSettings">
Contains the definition which PDUs of BCH shall be measured.
SDemodulationSettings for a more detailed description on those settings.
</param>
            <param name="rMeasurementDetails" />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.ICViComGsmInterface.GetMeasRateLimits">
            <summary>
Limits for Parameter SMeasurementRate::dwValuePer1000Sec.
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.ICViComGsmInterface.GetDemodThresholdLimits">
            <summary>
Limits for Parameter SDemodulationSettings::lTotalPowerOffsetInDB10
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.ICViComGsmInterface.GetChannelCountLimits">
            <summary>
Limits for Parameter SChannelSettings::dwCount
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.ICViComGsmInterface.GetBasicInterface">
            <summary>
Returns reference to basic interface object implementation.
The basic interface is a part of any application specific ViCom interface. It is used for different R&amp;S TSM applications. The purpose is to control basic R&amp;S TSM functions, which are not specific for a certain measurement.
CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.ICViComGsmInterface">
            <summary>
GSM measurement module for ViCom. Offers the configuration and result receiving methods for all GSM related measurement tasks.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterfaceDataProcessor.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.CViComGsmInterfaceDataProcessor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SL3DecoderResult.pcPduText">
            <summary>
Pointer to a buffer containing the decoded System Information Type text, as zero terminated ASCII string.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SL3DecoderResult.dwStringLength">
            <summary>
Number of decoding result text bytes in the buffer (incl. terminating '\0').
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SL3DecoderResult.ePDU">
            <summary>
System Information Type contained.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SL3DecoderResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SL3DecoderResult">
            <summary>
Result from the Layer 3 Decoder.
The string returned via this structure contains one completely decoded L3 System Information Message terminated by CR+LF. Data subsets (i.e. Information Elements) within the string are headed by "-&gt;CRLF" and terminated by "&lt;-CRLF".
For instance, a SI Type 3 will be decoded as follows:
System&lt;sp&gt;&lt;/sp&gt;Information&lt;sp&gt;&lt;/sp&gt;Type&lt;sp&gt;&lt;/sp&gt;3:&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Cell&lt;sp&gt;&lt;/sp&gt;Identity:&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;CIValue:&lt;sp&gt;&lt;/sp&gt;24023,&lt;sp&gt;&lt;/sp&gt;0x5DD7&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Location&lt;sp&gt;&lt;/sp&gt;Area&lt;sp&gt;&lt;/sp&gt;Identification:&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Mobile&lt;sp&gt;&lt;/sp&gt;Country&lt;sp&gt;&lt;/sp&gt;Code:&lt;sp&gt;&lt;/sp&gt;2&lt;sp&gt;&lt;/sp&gt;6&lt;sp&gt;&lt;/sp&gt;2&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Mobile&lt;sp&gt;&lt;/sp&gt;Network&lt;sp&gt;&lt;/sp&gt;Code:&lt;sp&gt;&lt;/sp&gt;0&lt;sp&gt;&lt;/sp&gt;2&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Location&lt;sp&gt;&lt;/sp&gt;Area&lt;sp&gt;&lt;/sp&gt;Code:&lt;sp&gt;&lt;/sp&gt;890,&lt;sp&gt;&lt;/sp&gt;0x37A&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Control&lt;sp&gt;&lt;/sp&gt;Channel&lt;sp&gt;&lt;/sp&gt;Description:&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;MSs&lt;sp&gt;&lt;/sp&gt;in&lt;sp&gt;&lt;/sp&gt;the&lt;sp&gt;&lt;/sp&gt;cell&lt;sp&gt;&lt;/sp&gt;should&lt;sp&gt;&lt;/sp&gt;apply&lt;sp&gt;&lt;/sp&gt;IMSI&lt;sp&gt;&lt;/sp&gt;attach&lt;sp&gt;&lt;/sp&gt;and&lt;sp&gt;&lt;/sp&gt;detach&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Blocks&lt;sp&gt;&lt;/sp&gt;reserved&lt;sp&gt;&lt;/sp&gt;for&lt;sp&gt;&lt;/sp&gt;access&lt;sp&gt;&lt;/sp&gt;grant:&lt;sp&gt;&lt;/sp&gt;2&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;1&lt;sp&gt;&lt;/sp&gt;basic&lt;sp&gt;&lt;/sp&gt;physical&lt;sp&gt;&lt;/sp&gt;channel&lt;sp&gt;&lt;/sp&gt;used&lt;sp&gt;&lt;/sp&gt;for&lt;sp&gt;&lt;/sp&gt;CCCH,&lt;sp&gt;&lt;/sp&gt;not&lt;sp&gt;&lt;/sp&gt;combined&lt;sp&gt;&lt;/sp&gt;with&lt;sp&gt;&lt;/sp&gt;SDCCHs&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;6&lt;sp&gt;&lt;/sp&gt;multiframes&lt;sp&gt;&lt;/sp&gt;period&lt;sp&gt;&lt;/sp&gt;for&lt;sp&gt;&lt;/sp&gt;transmission&lt;sp&gt;&lt;/sp&gt;of&lt;sp&gt;&lt;/sp&gt;PAGING&lt;sp&gt;&lt;/sp&gt;REQUEST&lt;sp&gt;&lt;/sp&gt;messages&lt;sp&gt;&lt;/sp&gt;to&lt;sp&gt;&lt;/sp&gt;the&lt;sp&gt;&lt;/sp&gt;same&lt;sp&gt;&lt;/sp&gt;paging&lt;sp&gt;&lt;/sp&gt;subgroup&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Time-out&lt;sp&gt;&lt;/sp&gt;value:&lt;sp&gt;&lt;/sp&gt;10&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Cell&lt;sp&gt;&lt;/sp&gt;Options:&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;PWRC&lt;sp&gt;&lt;/sp&gt;is&lt;sp&gt;&lt;/sp&gt;set&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;The&lt;sp&gt;&lt;/sp&gt;MSs&lt;sp&gt;&lt;/sp&gt;shall&lt;sp&gt;&lt;/sp&gt;use&lt;sp&gt;&lt;/sp&gt;discontinuous&lt;sp&gt;&lt;/sp&gt;transmission&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Radio-link-timeout:&lt;sp&gt;&lt;/sp&gt;24&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Cell&lt;sp&gt;&lt;/sp&gt;Selection&lt;sp&gt;&lt;/sp&gt;Parameters:&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Max.&lt;sp&gt;&lt;/sp&gt;TX&lt;sp&gt;&lt;/sp&gt;power&lt;sp&gt;&lt;/sp&gt;level:&lt;sp&gt;&lt;/sp&gt;5&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;6&lt;sp&gt;&lt;/sp&gt;dB&lt;sp&gt;&lt;/sp&gt;RXLEV&lt;sp&gt;&lt;/sp&gt;hysteresis&lt;sp&gt;&lt;/sp&gt;for&lt;sp&gt;&lt;/sp&gt;cell&lt;sp&gt;&lt;/sp&gt;re-selection&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Min.&lt;sp&gt;&lt;/sp&gt;received&lt;sp&gt;&lt;/sp&gt;signal&lt;sp&gt;&lt;/sp&gt;level:&lt;sp&gt;&lt;/sp&gt;4&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;NECI:&lt;sp&gt;&lt;/sp&gt;New&lt;sp&gt;&lt;/sp&gt;establishment&lt;sp&gt;&lt;/sp&gt;causes&lt;sp&gt;&lt;/sp&gt;are&lt;sp&gt;&lt;/sp&gt;supported&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;ACS:&lt;sp&gt;&lt;/sp&gt;System&lt;sp&gt;&lt;/sp&gt;information&lt;sp&gt;&lt;/sp&gt;type&lt;sp&gt;&lt;/sp&gt;16&lt;sp&gt;&lt;/sp&gt;and&lt;sp&gt;&lt;/sp&gt;17&lt;sp&gt;&lt;/sp&gt;are&lt;sp&gt;&lt;/sp&gt;not&lt;sp&gt;&lt;/sp&gt;broadcast&lt;sp&gt;&lt;/sp&gt;on&lt;sp&gt;&lt;/sp&gt;the&lt;sp&gt;&lt;/sp&gt;BCCH&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;RACH&lt;sp&gt;&lt;/sp&gt;Control&lt;sp&gt;&lt;/sp&gt;Parameters:&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Call&lt;sp&gt;&lt;/sp&gt;Reestablishment&lt;sp&gt;&lt;/sp&gt;not&lt;sp&gt;&lt;/sp&gt;allowed&lt;sp&gt;&lt;/sp&gt;in&lt;sp&gt;&lt;/sp&gt;the&lt;sp&gt;&lt;/sp&gt;cell&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;The&lt;sp&gt;&lt;/sp&gt;cell&lt;sp&gt;&lt;/sp&gt;is&lt;sp&gt;&lt;/sp&gt;not&lt;sp&gt;&lt;/sp&gt;barred&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;32&lt;sp&gt;&lt;/sp&gt;slots&lt;sp&gt;&lt;/sp&gt;used&lt;sp&gt;&lt;/sp&gt;to&lt;sp&gt;&lt;/sp&gt;spread&lt;sp&gt;&lt;/sp&gt;transmission&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Max.&lt;sp&gt;&lt;/sp&gt;4&lt;sp&gt;&lt;/sp&gt;retransmission(s)&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Emergency&lt;sp&gt;&lt;/sp&gt;call&lt;sp&gt;&lt;/sp&gt;allowed&lt;sp&gt;&lt;/sp&gt;to&lt;sp&gt;&lt;/sp&gt;all&lt;sp&gt;&lt;/sp&gt;MSs&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Access&lt;sp&gt;&lt;/sp&gt;Control&lt;sp&gt;&lt;/sp&gt;Class&lt;sp&gt;&lt;/sp&gt;N:&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Class&lt;sp&gt;&lt;/sp&gt;0:&lt;sp&gt;&lt;/sp&gt;not&lt;sp&gt;&lt;/sp&gt;barred&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Class&lt;sp&gt;&lt;/sp&gt;1:&lt;sp&gt;&lt;/sp&gt;not&lt;sp&gt;&lt;/sp&gt;barred&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Class&lt;sp&gt;&lt;/sp&gt;2:&lt;sp&gt;&lt;/sp&gt;not&lt;sp&gt;&lt;/sp&gt;barred&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Class&lt;sp&gt;&lt;/sp&gt;3:&lt;sp&gt;&lt;/sp&gt;not&lt;sp&gt;&lt;/sp&gt;barred&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Class&lt;sp&gt;&lt;/sp&gt;4:&lt;sp&gt;&lt;/sp&gt;not&lt;sp&gt;&lt;/sp&gt;barred&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Class&lt;sp&gt;&lt;/sp&gt;5:&lt;sp&gt;&lt;/sp&gt;not&lt;sp&gt;&lt;/sp&gt;barred&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Class&lt;sp&gt;&lt;/sp&gt;6:&lt;sp&gt;&lt;/sp&gt;not&lt;sp&gt;&lt;/sp&gt;barred&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Class&lt;sp&gt;&lt;/sp&gt;7:&lt;sp&gt;&lt;/sp&gt;not&lt;sp&gt;&lt;/sp&gt;barred&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Class&lt;sp&gt;&lt;/sp&gt;8:&lt;sp&gt;&lt;/sp&gt;not&lt;sp&gt;&lt;/sp&gt;barred&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Class&lt;sp&gt;&lt;/sp&gt;9:&lt;sp&gt;&lt;/sp&gt;not&lt;sp&gt;&lt;/sp&gt;barred&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Class&lt;sp&gt;&lt;/sp&gt;11:&lt;sp&gt;&lt;/sp&gt;not&lt;sp&gt;&lt;/sp&gt;barred&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Class&lt;sp&gt;&lt;/sp&gt;12:&lt;sp&gt;&lt;/sp&gt;not&lt;sp&gt;&lt;/sp&gt;barred&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Class&lt;sp&gt;&lt;/sp&gt;13:&lt;sp&gt;&lt;/sp&gt;not&lt;sp&gt;&lt;/sp&gt;barred&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Class&lt;sp&gt;&lt;/sp&gt;14:&lt;sp&gt;&lt;/sp&gt;not&lt;sp&gt;&lt;/sp&gt;barred&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Class&lt;sp&gt;&lt;/sp&gt;15:&lt;sp&gt;&lt;/sp&gt;not&lt;sp&gt;&lt;/sp&gt;barred&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;SI3&lt;sp&gt;&lt;/sp&gt;Rest&lt;sp&gt;&lt;/sp&gt;Octets:&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Selection&lt;sp&gt;&lt;/sp&gt;Parameters:&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Cell&lt;sp&gt;&lt;/sp&gt;Bar&lt;sp&gt;&lt;/sp&gt;Qualify:&lt;sp&gt;&lt;/sp&gt;0&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Cell&lt;sp&gt;&lt;/sp&gt;Reselect&lt;sp&gt;&lt;/sp&gt;Offset:&lt;sp&gt;&lt;/sp&gt;0&lt;sp&gt;&lt;/sp&gt;dB&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Temporary&lt;sp&gt;&lt;/sp&gt;Offset:&lt;sp&gt;&lt;/sp&gt;0&lt;sp&gt;&lt;/sp&gt;dB&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Penalty&lt;sp&gt;&lt;/sp&gt;Time:&lt;sp&gt;&lt;/sp&gt;20&lt;sp&gt;&lt;/sp&gt;s&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;System&lt;sp&gt;&lt;/sp&gt;Info&lt;sp&gt;&lt;/sp&gt;2ter&lt;sp&gt;&lt;/sp&gt;Indicator:&lt;sp&gt;&lt;/sp&gt;1&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Early&lt;sp&gt;&lt;/sp&gt;Classmark&lt;sp&gt;&lt;/sp&gt;Sending&lt;sp&gt;&lt;/sp&gt;Control:&lt;sp&gt;&lt;/sp&gt;1&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;GPRS&lt;sp&gt;&lt;/sp&gt;indicator:&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;RA&lt;sp&gt;&lt;/sp&gt;COLOUR:&lt;sp&gt;&lt;/sp&gt;0&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;SI13&lt;sp&gt;&lt;/sp&gt;POSITION:&lt;sp&gt;&lt;/sp&gt;0&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;Early&lt;sp&gt;&lt;/sp&gt;Classmark&lt;sp&gt;&lt;/sp&gt;Sending&lt;sp&gt;&lt;/sp&gt;Restriction:&lt;sp&gt;&lt;/sp&gt;0&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;SI2quater&lt;sp&gt;&lt;/sp&gt;Indicator:&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;SI2quater&lt;sp&gt;&lt;/sp&gt;Position:&lt;sp&gt;&lt;/sp&gt;BCCH&lt;sp&gt;&lt;/sp&gt;Ext.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SL3DecoderRequest.pbBitStream">
            <summary>
Pointer to a buffer containing the PDU bits. The first bit is stored in bit 7 of pbBitStream[0]. If dwBitCount is not a multiple of 8, there are remaining bits, which shall be ignored.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SL3DecoderRequest.dwBitCount">
            <summary>
Number of bits for this PDU.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SL3DecoderRequest.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SL3DecoderRequest">
            <summary>
Request for the Layer 3 Decoder to decode the System Information.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.ListDriftResult">
            <summary>
This list gives Info about time slot clusters.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.ListTimeSlotPowerClusterResult">
            <summary>
This list gives Info about time slot clusters.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.pChannelPowerResult">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.pSpectrumResult">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.ListExecutedMeasSpec">
            <summary>
This list gives a report of executed measurement detail orders for specific channels.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.ListPowerResultsOfFailedTrials">
            <summary>
This list contains measured power values for trials of measurements which would occur in the ListPowerResults if we had enough sensitivity. The power results are not valid power values but the besides some correlation noise it is an upper limit for the received power of the measured signal.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.pDemodResult">
            <summary>
If a PDU was measured then the pointer to the PDU result for this PDU measurement is valid (!= NULL)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.ListMeasurementRates">
            <summary>
List of measurement rates rates and other values in relation to the measurement rate for one or more time intervals of measurement rate calculation. The measurement rate is the ratio of all measurements of the same type of measurement at the time the measurement signals have been picked from the air. So the time of arrival at the host application is not used. And equal measurements at different RF channels are put together.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.bLastOfScan">
            <summary>
If true this measurement is the last of the scan number given in dwScanCount.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.pdwScanCount">
            <summary>
ScanCount: A scan is a measurement for all channels. The Network Scanner tries to fill a scan as soon as possible before starting to measure channels of another scan. But in the case the PC cannot handle all result, the TSMU is forced to throw away some result. In this case the measurement of this channel is repeated as soon as possible but measurements of different scans can interleave with each other.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.ListCellIdentResults">
            <summary>
List of CellIdent measurement results
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.ListSCHInfoResults">
            <summary>
List of SCH Info measurement results
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.ListPowerResults">
            <summary>
List of Power measurement results
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.u64DeviceTimeInNs">
            <summary>
If available the device time in ns is reported.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.dwPcTimeStampInMs">
            <summary>
The device time of start of the RF measurement which was used to produce the result.
The dwPcTimeStampInMs is a conversion of this device time to the PC system time obtained with the GetTickCount() function. The adjustment of possible time drift between device time and GetTickCount() as well as the resolution of GetTickCount() causes a conversion error of a few milliseconds. dwPcTimeStampInMs may be used to synchronize results with other measurement data in the system or to determine the age of the result which is GetTickCount() - dwPcTimeStampInMs;
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDriftResult.bDriftIsOutOfSpec">
            <summary>
The drift of the measured SCH is out of spec, e.g. the measured drift is far greater than what the spec allows.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDriftResult.fDriftErrorInPpm">
            <summary>
The estimated error of the fDriftInPpm value. The drift can only be calculated when the SCH has been demodulated. If the latter is not the case, then we may still be able to give a very rough estimate of the drift, for example 2.5ppm with an error of +/-1ppm.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDriftResult.fDriftInPpm">
            <summary>
The drift of the measured SCH in ppm.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDriftResult.dwIndicatorOfSCHInfo">
            <summary>
Indicator: References to an demodulated SCH Measurement (SCHInfo) on the same frequency which is stored in this or an earlier MeasResult.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDriftResult.dTimeOfMeasurementInSec">
            <summary>
The scanner timestamp when the drift measurement was performed.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDriftResult.dwFrequencyIndex">
            <summary>
Index of the measured frequency
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDriftResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDriftResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDriftResult">
            <summary>
Contains a drift measurement in ppm of a particular SCH.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.ListTimeSlotPowerValuesResult">
            <summary>
This list gives the times slot power values of the cluster
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.bEstimatedSlotAlignmentWeak">
            <summary>
Estimated Slot Alignment Weak: Same a above but also possible slot alignments with smaller likelihood are indicated. Using the same bit coding as above.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.bEstimatedSlotAlignment">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.bSlotAlignmentFillBit_3">
            <summary>
used for slot alignment with fill bit before slot 3
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.bSlotAlignmentFillBit_2">
            <summary>
used for slot alignment with fill bit before slot 2
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.bSlotAlignmentFillBit_1">
            <summary>
used for slot alignment with fill bit before slot 1
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.bSlotAlignmentFillBit_0">
            <summary>
used for slot alignment with fill bit before slot 0
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.bSlotAlignmentEquidistant">
            <summary>
Used for equidistant slot alignment.
Estimated Slot Alignment: For a downlink channel the slot alignment is either equidistant with a slot length of 156.25 bits or a fill bit is used before each forth slot and the slot length is 156 bits. So there are 5 possibilities for the time slot cluster: equidistant, or fill bit before the first, second, third or forth time slot. The 4 mentioned slots are adjacent and start at dTimeOfFirstSlotInSec and are probably not all measured. The estimation may give more then one of the 5 possibilities if they have the same likelihood. E.g. if only one time slot ist measured or only time slots with equal time slot number, then we have the same probability for all 5 possibilities. For uplink channels the scanner may do an estimation but this should be ignored as the mobiles have other types of slot alignment. The alignments possibilities are coded as bits, see the following constants, and can be used also in combination as noted above.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.wPowerRangeInDB100">
            <summary>
The time slot power in 0.01dBm for the byte value bPower is: sMinPowerInDBm100 + (short)(((dword)wPowerRangeInDB100  bPower) &gt;&gt; 8)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.sMinPowerInDBm100">
            <summary>
minimum measured time slot power
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.dTimeOfFirstSlotInSec">
            <summary>
Time Of First Slot: Average time calculated for the first slot in this cluster. Each slot measurement may have a time shift to this time.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.bTsc">
            <summary>
0..7 or invalid byte (0xff)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.eTimeSlotType">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.dwFrequencyIndex">
            <summary>
Index of the measured frequency
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.STimeSlotPowerValuesResult.bSlotDistanceFromPrevTimeSlot">
            <summary>
Number of time slots this time slot is behind the previous time slot. It should be 0 for the first time slot measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.STimeSlotPowerValuesResult.scTimeShiftIn100ns">
            <summary>
The max peak is shifted for this time from the average time.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.STimeSlotPowerValuesResult.bOffsetToTotalPowerInDB10">
            <summary>
The total power for this time slot in 0.01dBm is: sMinPowerInDBm100 + (short)(((dword)wPowerRangeInDB100  bPower) &gt;&gt; 8) + 10  bOffsetToTotalPowerInDB10
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.STimeSlotPowerValuesResult.bPower">
            <summary>
The time slot power in 0.01dBm for this byte value bPower uses values from the STimeSlotPowerClusterResult: sMinPowerInDBm100 + (short)(((dword)wPowerRangeInDB100  bPower) &gt;&gt; 8)
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.STimeSlotPowerValuesResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.STimeSlotPowerValuesResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.STimeSlotPowerValuesResult">
            <summary>
Specific values for time slots belonging to the cluster
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.etTimeSlotType.TS_POWER_SLOT_TYPE_INVALID">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.etTimeSlotType.TS_POWER_SLOT_TYPE_TSC">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.etTimeSlotType.TS_POWER_SLOT_TYPE_DB">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult.etTimeSlotType">
            <summary>
Time Slot Type
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.STimeSlotPowerClusterResult">
            <summary>
Values for GSM time slot power measurements. Time slot power measurements are done for clusters. In a cluster results from different time slots are used to get results (e.g. the training sequence code) and to collect the results. The time slot measurements of the cluster are in the ListTimeSlotPowerValuesResult.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SChannelPowerResult.pbBuffer">
            <summary>
Pointer to a buffer
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SChannelPowerResult.dwCountOfBytes">
            <summary>
Number of bytes in the buffer.
PowerValueBuffer: For each channel dwCountOfResultsPerChannel are stored. The first power value is taken at dStartTimeInSec. Each value bValue represents a power 0.5  bValue dB above sMinPowerInDBm100.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SChannelPowerResult.dStartTimeInSec">
            <summary>
Time of the first power values per channel. The power sequences for all channels are taken in the same time interval.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SChannelPowerResult.sMinPowerInDBm100">
            <summary>
Power value in 0.01dBm to calculate the power over time. See PowerValueBuffer.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SChannelPowerResult.wRMSLengthIn40ns">
            <summary>
Each power value is averaged over a short time interval given in this value.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SChannelPowerResult.wCountOfResultsPerGSMTimeSlot">
            <summary>
The time distance between adjacent results is always a fraction of a GSM time slot. This value gives the time distance dT/us = 12  625 / (13  wCountOfResultsPerGSMTimeSlot)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SChannelPowerResult.dwCountOfResultsPerChannel">
            <summary>
Number of result bytes in the power result buffer per channel. It is equal for each channel.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SChannelPowerResult.dwCountOfChannels">
            <summary>
Number of channels we have channel power measurements for. The channels itself can be retrieved from the list of ListPowerExecutedMeasSpec.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SChannelPowerResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SChannelPowerResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SChannelPowerResult">
            <summary>
Inband power value description for all or a subset of measured channels. The channels itself can be retrieved from the list of ListPowerExecutedMeasSpec.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSpectrumResult.pbBuffer">
            <summary>
Pointer to the buffer
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSpectrumResult.dwCountOfBytes">
            <summary>
Number of bytes in the buffer.
Power values for all sub spectrum entries. For each sub spectrum the buffer contains wCountOfPowerValuesPerSubSpec power value offsets in 0.5dB from sMinPowerValueInDBm100 lower power limit. The frequency spacing is 200kHz/wCountOfPowerValuesPerChannel within one channel. The channels for which spectrum measurements have been done are listed in structure SExecutedMesurements in the same order as in they occur in the sub spectrum. This order is from low to high frequencies but the channel list may have gaps e.g. channel 1,2,3,7,8. In this case (GSM900) we have a subspectrum from 935.1 .. 935.7MHz and 936.3 .. 936.7MHz. Note that center frequency for each channel index has to be taken from the start command.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSpectrumResult.dTimeOfFirstFFTInSec">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSpectrumResult.sMinPowerValueInDBm100">
            <summary>
Minimum power value which can be reported in 0.01dBm. It is chosen, that the maximum power (byte Value 255) can be expressed in the possible dynamic range of 128 dB.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSpectrumResult.eTimeDetector">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSpectrumResult.eFreqDetector">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSpectrumResult.wResolutionBandwidthInHz">
            <summary>
resolution bandwidth of the internal filter
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSpectrumResult.wTimeBetweenFFTsIn100ns">
            <summary>
It is an FFT spectrum and the time distance of 2 adjacent FFTs is given. Each FFT may use a longer signal section for filtering.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSpectrumResult.wCountOfFFTsInLastSubSpectrum">
            <summary>
this is the count of FFTs we have used in the last sub spectrum
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSpectrumResult.wCountOfFFTsPerSubSpectrum">
            <summary>
For each sub spectrum we may use one or more FFTs. This is the number of FFTS in the sub spectrum except the last one which may use less FFTs
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSpectrumResult.wCountOfPowerValuesPerSubSpec">
            <summary>
Is the count of used channel times the count of power values per channel.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSpectrumResult.wCountOfPowerValuesPerChannel">
            <summary>
Count of power values per channel per spectrum. Count of frequency intervals per channel.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSpectrumResult.wSubSpectrumCount">
            <summary>
This is the number of subspectrums stored in this structure.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSpectrumResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSpectrumResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSpectrumResult">
            <summary>
Spectrum for all or a subset of the measured GSM channels. The channels for which spectrum measurements have been done are listed in structure SExecutedMesurements in the same order as in they occur in the sub spectrum.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDemodResult.pbBitStream">
            <summary>
pointer to (dwBitCount + 7) / 8 bytes which contain the PDU bits. The first bit is stored in the bit 7 of pbBitStream[0]. If dwBitCount is not a multiple of 8 than some tail bits in the last byte pbBitStream[(dwBitCount + 7) / 8 - 1] should be ignored.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDemodResult.dwBitCount">
            <summary>
count of bits the PDU consists of
Bytes of demodulated sequence
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDemodResult.ePDU">
            <summary>
PDU that has been measured.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDemodResult.dwFrameNumber">
            <summary>
Frame number of the FCCH in the last used M51 Frame
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDemodResult.wBCCHAccumulationCount">
            <summary>
Number of accumulated signals
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDemodResult.eBcchType">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDemodResult.eDemodStatus">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDemodResult.dwIndicatorOfSCHInfo">
            <summary>
Indicator: References to an demodulated SCH Measurement (SCHInfo) on the same frequency which is stored in this or an earlier MeasResult.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDemodResult.dwFrequencyIndex">
            <summary>
Index of the measured frequency
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDemodResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDemodResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDemodResult.etBcchType.BCCHTYPE_INVALID">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDemodResult.etBcchType.BCCHTYPE_EXTENDED">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDemodResult.etBcchType.BCCHTYPE_NORMAL">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDemodResult.etBcchType">
            <summary>
BCCH type
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDemodResult.etDemodStatus.DEMOD_STATUS_INVALID">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDemodResult.etDemodStatus.DEMOD_STATUS_CANCELLED">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDemodResult.etDemodStatus.DEMOD_STATUS_TIME_OUT">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDemodResult.etDemodStatus.DEMOD_STATUS_SUCCESS">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDemodResult.etDemodStatus">
            <summary>
Demodulation status
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SDemodResult">
            <summary>
Results of BCCH demodulations
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SCellIdentResult.wMNC">
            <summary>
Mobile network code: 0..0xfff the hexadecimal output of this number gives the decimal code or any digits &gt; 9 if a wrong number was transmitted
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SCellIdentResult.wMCC">
            <summary>
Mobile country code: 0..0xfff the hexadecimal output of this number gives the decimal code or any digits &gt; 9 if a wrong number was transmitted
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SCellIdentResult.wLAC">
            <summary>
location area code
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SCellIdentResult.wCI">
            <summary>
cell identity
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SCellIdentResult.dwIndicator">
            <summary>
Indicator: Referenced by SCHInfo measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SCellIdentResult.dwFrequencyIndex">
            <summary>
Index of the measured frequency
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SCellIdentResult.dTimeOfSlotInSec">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SCellIdentResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SCellIdentResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SCellIdentResult">
            <summary>
Global Cell Identifier from demodulated and decoded ST3 (SYTEM INFORMATION TYPE 3)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSCHInfoResult.dwIndicatorOfCellIdent">
            <summary>
Indicator: If other than SDefs::INVALID_DWORD_VALUE it references to a CellIdent measurement on the same frequency which is stored in this or a later MeasResult.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSCHInfoResult.dwGSMFrameNumber">
            <summary>
Decoded frame number
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSCHInfoResult.wBSIC">
            <summary>
Decoded BSIC code
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSCHInfoResult.dwIndicatorOfFirstSCHInfo">
            <summary>
This dwIndicatorOfFirstSCHInfo is the indicator of a previous SCHInfoResult which is related to the current SCHInfoResult. For the GSM network scanner two SCH measurements belong together, if the arrival time does not differ for more than 20 us reflections plus 0.30 ppm time drift and in total not more than 2 GSM Slots (1.15ms).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSCHInfoResult.dwIndicatorOfSCHInfo">
            <summary>
Indicator: Referenced by SCH power results and CellIdent.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSCHInfoResult.dwFrequencyIndex">
            <summary>
Index of the measured frequency
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSCHInfoResult.dTimeOfSlotInSec">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSCHInfoResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSCHInfoResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SSCHInfoResult">
            <summary>
SCH(Synchronization channel) demodulated BTS info results
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.psCarrierToInterferenceInDB100">
            <summary>
Carrier to Interference in 0.01dB This pointer is NULL if the result contains no C/I value.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.bTotalPowerOffsetInDB10">
            <summary>
Difference between total inband power during the power measurement to the measured power. If sPowerInDBm100 refers to a code power measurement and reflections as well as measurement impacts due to frequency offsets, phase noise and correlation errors are neglected then the following two relations hold: bTotalPowerOffsetInDB10 = 10  (-Ec/I0 in dB) and bTotalPowerOffsetInDB10 = 100  log10(1 + 1/(C/I)). The value 255 is defined as an saturation value i.e. when Saturation is reached the measured value of bTotalPowerOffsetInDB10 is &gt;= 255. The accuracy of bTotalPowerOffsetInDB10 is typically better than 0.5dB for the case that reflections and frequency offsets can be neglected.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.dwIndicatorOfSCHInfo">
            <summary>
Indicator: If other than SDefs::INVALID_DWORD_VALUE it references to a demodulated SCH Measurement (SCHInfo) on the same frequency which is stored in this or an earlier MeasResult.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.sPowerInDBm100">
            <summary>
Measured power in dBm 100th
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.eMeasMode">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.eMeasType">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.dwFrequencyIndex">
            <summary>
Index of the measured frequency
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.dTimeOfSlotInSec">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.etMeasMode.MEASMODE_CARRIER_TO_INTERFERENCE">
            <summary>
Carrier to Interference measurement The C/I is measured using an equalizer on the Extended Training Sequence within the SCH.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.etMeasMode.MEASMODE_FAILED_TRIALS">
            <summary>
SCH power measurement for a BTS which was measured before, but the measurement failed.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.etMeasMode.MEASMODE_ACTIVESET2">
            <summary>
SCH power measurement is from active set 2
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.etMeasMode.MEASMODE_ACTIVESET1">
            <summary>
SCH power measurement is from active set 1
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.etMeasMode.MEASMODE_DEMOD">
            <summary>
SCH power has been demodulated
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.etMeasMode.MEASMODE_ETS">
            <summary>
SCH power has been measured with the ETS only
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.etMeasMode.MEASMODE_INVALID">
            <summary>
Detailed power measurement mode is unknown.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.etMeasMode">
            <summary>
Mode of power measurement
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.etMeasType.MEASTYPE_CARRIER_TO_INTERFERENCE">
            <summary>
Carrier to Interference measurement The C/I is measured using an equalizer on the Extended Training Sequence within the SCH.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.etMeasType.MEASTYPE_POWSCH">
            <summary>
SCH power. Please consider eMeasMode for further information.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.etMeasType.MEASTYPE_POWCH">
            <summary>
Total inband power. Maximum average power for one GSM time slot length. Valid independent from eMeasMode.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.etMeasType.MEASTYPE_POWINVALID">
            <summary>
Invalid power
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult.etMeasType">
            <summary>
Type of power measurement
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SMeasResult.SPowerResult">
            <summary>
SCH(Synchronization channel) power or Total inband power measurement result
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SMeasResult">
            <summary>
This structure holds a measurement result from the result buffer. Please refer to the manual for a detailed discussion of how to interpret the results. @note
that the result data are for reading only and available until the next interface function is called.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SSettings.DemodulationSettings">
            <summary>
Configuration of the BCH System Information Type demodulation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SSettings.MeasurementDetails">
            <summary>
Defines channel specific measurement details.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SSettings.ChannelSettings">
            <summary>
Defines the measured frequencies.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SSettings.dwReceiverIndex">
            <summary>
Index to SConnectedReceiverTable::Receiver of the currently selected receiver.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SSettings">
            <summary>
By means of the functions: SetConfiguration() internal settings of the GSM-Network-Scanner may be changed and with the functions SelectReceiver(), SetTimebaseSynchronisationMode() of CViComBasicInterfaceData change basic settings. Except of frequency settings all other settings have default values.
This structure bundles these settings and will be returned as result from the GetSettings() method.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SDemodulationSettings.sStartMeasurementRequests">
            <summary>
The requests for the general start measurement command.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SDemodulationSettings.dwFrontEndSelectionMask">
            <summary>
Receiver front end to be used by the demodulator for this channel. If no demodulation shall be provided, this shall be set to 0. Demodulation tasks are not allowed to contain multiple FE's.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SDemodulationSettings.lTotalPowerOffsetInDB10">
            <summary>
Maximum threshold for demodulation trials in 0.1dB. The scanner monitors BTSs with SCH measurements. Each SCH power measurement has a certain offset to the total GSM inband power during SCH arrival time (e.g. the SCH power is 3 dB below the total inband power). If the magnitude of the offset is higher, the demodulation probability drops. This is the limit for this offset. BTSs measured with a higher total power offset will not be demodulated.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SDemodulationSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SDemodulationSettings">
            <summary>
This structure is used to configure the BCH System Information Type demodulation process.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SDemodRequests.pDemodRequests">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SDemodRequests.dwCountOfRequests">
            <summary>
Number of demodulation requests.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SDemodRequests.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SDemodRequests.SDemodRequest.dwSCHIndicator">
            <summary>
Used to specify BTS for DemodulationModes BTS_FORCE or BTS.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SDemodRequests.SDemodRequest.wRepetitionDelayIn100ms">
            <summary>
Repeat measurement after this delay time, if eDemodulationMode is REPETITION. Timeout for request, if eDemodulationMode is BTS...
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SDemodRequests.SDemodRequest.wMaxRepetitionDelayIn100ms">
            <summary>
1 hour
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SDemodRequests.SDemodRequest.eDemodulationMode">
            <summary>
The mode used for BCH demodulation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SDemodRequests.SDemodRequest.ePDU">
            <summary>
The SI Type to be demodulated.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SDemodRequests.SDemodRequest.dwChannelIndex">
            <summary>
Index of the frequency in SChannelSettings::pdTableOfFrequencyInMHz.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SDemodRequests.SDemodRequest.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SDemodRequests.SDemodRequest">
            <summary>
There must be one instance of this structure for each BCH System Information Type demodulation request, therefore different SITypes can be measured on different channels.
Example for start measurement: On the first channel SI Types 3 and 4 shall be decoded, on the the second channel SI Types 3, 5 and 7 shall be decoded. SI Type 5 shall be decoded repeatedly every 10 seconds (100100 ms) and SI Type 7 shall be decoded on demand. This requires five structures containing the following parameter sets: (0,&lt;sp&gt;&lt;/sp&gt;SITYPE_3,&lt;sp&gt;&lt;/sp&gt;ONCE,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(0,&lt;sp&gt;&lt;/sp&gt;SITYPE_4,&lt;sp&gt;&lt;/sp&gt;ONCE,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(1,&lt;sp&gt;&lt;/sp&gt;SITYPE_3,&lt;sp&gt;&lt;/sp&gt;ONCE,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(1,&lt;sp&gt;&lt;/sp&gt;SITYPE_5,&lt;sp&gt;&lt;/sp&gt;REPETITION,&lt;sp&gt;&lt;/sp&gt;100,&lt;sp&gt;&lt;/sp&gt;0)(1,&lt;sp&gt;&lt;/sp&gt;SITYPE_7,&lt;sp&gt;&lt;/sp&gt;ON_CMD,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)
Example during measurement: On channel 0 SI Types demodulation shall be completely reset for the BTS identified by dwSCHIndicator 2 and on the the second channel SI Type 7 shall be decoded for the BTS identified by dwSCHIndicator 3 with a timeout for the request of 1 sec (10100ms): (0,&lt;sp&gt;&lt;/sp&gt;PDU_SITYPE_NULL,&lt;sp&gt;&lt;/sp&gt;BTS_RESET,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;2)(1,&lt;sp&gt;&lt;/sp&gt;SITYPE_7,&lt;sp&gt;&lt;/sp&gt;BTS,&lt;sp&gt;&lt;/sp&gt;10,&lt;sp&gt;&lt;/sp&gt;3)
Note that you are responsible to manage the memory when you use SetDemodulationSettings(). Note: All parameters which are not necessary for a certain request shall be set to 0.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SDemodRequests">
            <summary>
This structure is used to configure System Information Type demodulation requests. It is used in start measurement requests and it is used to issue BCH System Information Type demodulation requests during measurement, e.g. SI Type demodulation requests on demand or to reset SI Type demodulation.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.DemodMode.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.DemodMode.Type.BTS_OLD_FORCE">
            <summary>
Equal to BTS_FORCE but previously measured messages may be used for the result. This can be requested only during a running measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.DemodMode.Type.BTS_OLD">
            <summary>
Equal to BTS but previously measured messages may be used for the result. This can be requested only during a running measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.DemodMode.Type.CHANNEL_RESET">
            <summary>
All demodulation results for each BTS on the specified channel will be deleted and the demodulation for this channel starts as specified in SDemodulationSettings::sStartMeasurementRequests. This can be requested only during a running measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.DemodMode.Type.BTS_RESET">
            <summary>
All demodulation results for a special BTS will be deleted and the demodulation for this BTS starts as specified in SDemodulationSettings::sStartMeasurementRequests. This can be requested only during a running measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.DemodMode.Type.BTS_FORCE">
            <summary>
Equal to BTS but the limitation in receiver resource usage will be ignored and the demodulation will be be done until the PDU has been demodulated or timeout occurred.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.DemodMode.Type.BTS">
            <summary>
The demodulation is only for a BTS. This can be requested only during a running measurement and when the PDU was also requested in SDemodulationSettings::sStartMeasurementRequests. If dwTimeOutOrRepetitionDelayIn100ms is different from 0 then the demodulation is only tried during the given time.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.DemodMode.Type.REPETITION">
            <summary>
After each successful demodulation a new one will be started automatically after the delay time specified in wRepetitionDelayIn100ms Only to be used in start measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.DemodMode.Type.ON_CMD">
            <summary>
The PDU is only demodulated if an extra command requests the demodulation. Only to be used in SDemodulationSettings::sStartMeasurementRequests.
If this is used, then no PDU is decoded until it is explicitly requested. The method CViComGsmInterface::IssueDemodRequests can be used for that purpose.
PDUs configured with this setting can be decoded using one of BTS, BTS_FORCE, BTS_OLD, BTS_OLD_FORCE modes.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.DemodMode.Type.ONCE">
            <summary>
The PDU is demodulated only once for each BTS. Only to be used in SDemodulationSettings::sStartMeasurementRequests.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.DemodMode.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.DemodMode">
            <summary>
This enumeration defines modes for the demodulation. Use this in the SDemodRequest structure to specify when the demodulation of this PDU shall be done.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.Pdu.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type.UNKNOWN">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type.SITYPE_22">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type.SITYPE_21">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type.SITYPE_20">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type.SITYPE_19">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type.SITYPE_18">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type.SITYPE_17">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type.SITYPE_16">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type.SITYPE_15">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type.SITYPE_13_ALT">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type.SITYPE_13">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type.SITYPE_9">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type.SITYPE_8">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type.SITYPE_7">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type.SITYPE_4">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type.SITYPE_3">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type.SITYPE_2_TER">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type.SITYPE_2_QUATER">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type.SITYPE_2_N">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type.SITYPE_2_BIS">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type.SITYPE_2">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type.SITYPE_1">
            <summary>
System Information Type 1.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.Pdu.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.Pdu">
            <summary>
This enumeration defines the System Information Types which can be demodulated from the BCH.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasurementDetails.pTableOfChannelMeasSpec">
            <summary>
Each frequency index shall occur only once in this array.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasurementDetails.dwCount">
            <summary>
Number of selected channels. Same as SChannelSettings::dwCount.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasurementDetails.ChannelPowerSpec">
            <summary>
Channel power measurement configuration.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SMeasurementDetails.SpectrumSpec">
            <summary>
Channel spectrum measurement configuration.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SMeasurementDetails.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SMeasurementDetails">
            <summary>
SMeasurementDetails contains parameters for certain measurement functions and a selection for measurements for a list of individual channels. All channels which are not given in the list will remain with their default setting. If this structure is not used at the start command, the default measurements (SCH Power measurement and SCH demodulation) is done for all channels.
By using this structure in the "RedefineMeasurementDetails" function, it is possible to redefine measurements between the start and stop command during measurement. Note that the redefinition will not allow to set a new frequency list but it will refer to the initial frequency list given with the first start command.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelMeasSpec.bDefaultMEAS_REPORT_FAILED_TRIALS">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelMeasSpec.bMEAS_REPORT_FAILED_TRIALS">
            <summary>
Failed SCH meas trials will be reported.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelMeasSpec.bDefaultMEAS_SPECTRUM">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelMeasSpec.bMEAS_SPECTRUM">
            <summary>
Spectrum measurement for this channel as defined in SSpectrumSpec.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelMeasSpec.bDefaultMEAS_CHANNEL_POWER">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelMeasSpec.bMEAS_CHANNEL_POWER">
            <summary>
This measurement will do the channel power measurement as defined in SChannelPowerSpec.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelMeasSpec.bDefaultMEAS_TSC">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelMeasSpec.bMEAS_TSC">
            <summary>
Trainings Sequence Code Measurement. This is a time slot measurement for normal GSM bursts. It is applicable for up- and downlink.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelMeasSpec.bDefaultMEAS_DB_POWER">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelMeasSpec.bMEAS_DB_POWER">
            <summary>
Power measurement for dummy bursts. This can produce much more power results for C0 carriers than the SCH measurement. It shall be used for downlink only.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelMeasSpec.bDefaultMEAS_DB_REMOVAL">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelMeasSpec.bMEAS_DB_REMOVAL">
            <summary>
Detection of dummy bursts and removal of dummy bursts from the GSM signal before further analysis. This can make SCH and TCH measurements significantly more sensitive. It should be used for downlink channels only.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelMeasSpec.bDefaultMEAS_CARRIER_TO_INTERFERENCE">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelMeasSpec.bMEAS_CARRIER_TO_INTERFERENCE">
            <summary>
Carrier to Interference measurement. This is only valid for SCH related measurements and downlink. The C/I is measured using an equalizer on the Extended Training Sequence within the SCH.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelMeasSpec.bDefaultMEAS_SCH">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelMeasSpec.bMEAS_SCH">
            <summary>
If a following switch is set then the measurement will be done, else it will be stopped for this channel. SCH related measurements. (SCH, ETS power, BSIC, FN demodulation) Should be used for downlink only.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelMeasSpec.dwFrequencyIndex">
            <summary>
Frequency index for the new measurement set.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SChannelMeasSpec.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SChannelMeasSpec">
            <summary>
SChannelMeasSpec defines a new set of measurements for a channel (as given by frequency index).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelPowerSpec.wCountOfResultsPerGSMTimeSlot">
            <summary>
The time distance between adjacent results is always a fraction of a GSM time slot. This value gives the time distance dT/us = 12  625 / (13  wCountOfResultsPerGSMTimeSlot)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelPowerSpec.wDefaultCountOfResultsPerGSMTimeSlot">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelPowerSpec.wMaxCountOfResultsPerGSMTimeSlot">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelPowerSpec.wMinCountOfResultsPerGSMTimeSlot">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelPowerSpec.wRMSLengthIn40ns">
            <summary>
the power is averaged over a time interval given in this value
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelPowerSpec.wDefaultRMSLengthIn40ns">
            <summary>
36us
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelPowerSpec.wMaxRMSLengthIn40ns">
            <summary>
577us, one GSM time slot
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelPowerSpec.wMinRMSLengthIn40ns">
            <summary>
6.4us
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SChannelPowerSpec.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SChannelPowerSpec">
            <summary>
SChannelPowerSpec contains a definition of the channel power graph which applies for all channels with channel power measurement enabled.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec.eTimeDetector">
            <summary>
Time detector mode.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec.eFreqDetector">
            <summary>
Frequency detector mode.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec.wCollectionTimeIn100us">
            <summary>
Each sub spectrum is calculated from a few FFTs. The processing will collect a constant number of FFTs to produce a sub spectrum. This number is chosen in a way that the Collection Time will be approximated as good as possible. The result value for each frequency interval after collecting some FFTs is defined by the Time Detector below.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec.wDefaultCollectionTimeIn100us">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec.wMaxCollectionTimeIn100us">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec.wMinCollectionTimeIn100us">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec.wCountOfPowerValuesPerChannel">
            <summary>
Each GSM channel of 200kHz bandwidth will be divided in wCountOfPowerValues per Channel frequency intervals of equal length. Minimum should be 1 and maximum is 100.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec.wDefaultCountOfPowerValuesPerChannel">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec.wMaxCountOfPowerValuesPerChannel">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec.wMinCountOfPowerValuesPerChannel">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec.TimeDetector.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec.TimeDetector.Type.INVALID">
            <summary>
invalid detector
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec.TimeDetector.Type.PEAK">
            <summary>
peak detector
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec.TimeDetector.Type.RMS">
            <summary>
root mean square detector
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec.TimeDetector.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec.TimeDetector">
            <summary>
Choice of detector mode in the time domain.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec.FreqDetector.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec.FreqDetector.Type.INVALID">
            <summary>
invalid detector
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec.FreqDetector.Type.PEAK">
            <summary>
peak detector
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec.FreqDetector.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec.FreqDetector">
            <summary>
Choice of detector mode in the frequency domain.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SSpectrumSpec">
            <summary>
SSpectrumSpec contains a definition of channel spectrum measurements which applies for all channels with spectrum measurement enabled.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelSettings.bMaxNofScanners">
            <summary>
The maximum number of used GSM scanner instances. Possible value range: 1...32.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelSettings.fMaxDetectableDriftInPpm">
            <summary>
The maximum detectable drift range is +/-fMaxDetectableDriftInPpm. Possible value range: 0...8.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelSettings.pTableOfFrequencySetting">
            <summary>
Pointer to an array containing the settings of the selected frequencies. The number of members in the array is defined by dwCount (above).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelSettings.dwMeasRatePer1000Sec">
            <summary>
The desired measurement rate value. For default value and range see GetMeasRateLimits(). The limits are dependent from the currently set eMeasurementMode.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelSettings.dwCount">
            <summary>
Number of frequency configurations that shall be used from the pTableOfFrequencySetting to perform the measurement tasks. For value range see GetChannelCountLimits().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SChannelSettings.dwFrontEndSelectionMask">
            <summary>
Receiver front end to be used by the scanner for this channel. Scanner tasks are not allowed to contain multiple FE's.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SChannelSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SChannelSettings">
            <summary>
SChannelSettings contains the count of channels or frequencies and the table of frequencies in Hz. The selection of new frequencies (with SetConfiguration) automatically resets the demodulation requests.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GSM.SFrequencySetting.dCenterFrequencyInHz">
            <summary>
Center frequency of the channel
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GSM.SFrequencySetting.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GSM.SFrequencySetting">
            <summary>
Frequency settings
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderGsm.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderGsm.m_loader">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderGsm.GetInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderGsm.GetBasicInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderGsm.SetSettings(RohdeSchwarz.ViCom.Net.SReceiverSettings)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderGsm.Disconnect">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderGsm.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComError@,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderGsm.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderGsm.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderGsm.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderGsm">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.GSM.CViComGsmInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.GSM.SMeasResult&gt;*)">
   Unregister a formerly registered ScannerData listener to remove it from the list of objects that
   shall get notification about new measurement data.

   @param[in] pListener
      The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered
      objects, an error is indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.GSM.CViComGsmInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.GSM.SMeasResult&gt;*)">
   Register a ScannerData listener that will be notified when new data is available. Note that it is
   important to Unregister the listener again once it is getting deleted, to avoid crashes.

   @note Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage,
   it is not allowed to call CViComBasicInterface::GetResultCounters() or GetResult() and vice versa.

   @param[in] pListener
      The object that shall be notified when new measurement data is available. This must not be
      null. If the listener has already been registered to the interface, it will not be
      registered a second time. Instead, an error will be indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.GSM.CViComGsmInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.GSM.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsLong)">
   Issue a request to the Layer 3 Decoder to decode the System Information contained by rSL3DecoderRequest.
   If the data has been decoded successfully within the time given by dwTimeOutInMs, 
   the method creates the SL3DecoderResult and the buffer within on the heap, fills in the Layer 3 Decoder result 
   and returns a pointer to it.

   @param[in] rSL3DecoderRequest
   Contains the data that was the result of a GSM measurement and holds the System Information data that shall be decoded.

   @param[in] dwTimeOutInMs
      Unless specified, the default timeout value to use.

   @return
   one measurement result on the heap, if the function succeeded. Otherwise NULL.
   Attention: The returned pointer is only valid until this function is called again.

</member>
        <member name="M:RohdeSchwarz.ViCom.GSM.CViComGsmInterface.GetSettings">
   By means of the function:
   SetConfiguration()
   internal settings of the GSM Network-Scanner may be changed and with the functions 
   SelectReceiver() of CViComBasicInterface basic settings are changed. 
   
   All settings have default values. By means of this function you can retrieve the GSM Network-Scanner
   settings which apply at the moment for measurements to be started or during running measurements.
   
   @note
      The result, like all other results too, is only for reading. To change settings the functions mentioned above shall be used.

   @return 
      a structure filled with the currently valid values or NULL if the call was not processed successfully.
   *
</member>
        <member name="M:RohdeSchwarz.ViCom.GSM.CViComGsmInterface.IssueDemodRequests(RohdeSchwarz.ViCom.GSM.SDemodRequests!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   Use this function to issue commands (demodulation requests, reset commands) for the System Information Type demodulator 
   during measurement.

   SI Types may be acquired for certain BTSs. Demodulation for BTSs or for channels may be reset.
   
   Any SI Type requested here for a specific channel must have been registered for that channel before start of measurement
   in the SetDemodulationSettings() method, for example with mode SITYPE_DEMOD_ON_CMD.

   @param[in] rDemodRequests
   When the function is called, this pointer contains the request parameters.
   For details see SDemodRequests.

</member>
        <member name="M:RohdeSchwarz.ViCom.GSM.CViComGsmInterface.GetMeasRateLimits">
   Limits for Parameter SMeasurementRate::dwValuePer1000Sec.

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.GSM.CViComGsmInterface.GetDemodThresholdLimits">
   Limits for Parameter SDemodulationSettings::lTotalPowerOffsetInDB10

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.GSM.CViComGsmInterface.GetChannelCountLimits">
   Limits for Parameter SChannelSettings::dwCount

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.CViComGsmInterface">
GSM measurement module for ViCom. Offers the configuration and result receiving methods for all GSM related
measurement tasks.
\@attribute[type="interface" supportedDevices="TSME"]

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SL3DecoderRequest">
Request for the Layer 3 Decoder to decode the System Information.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.ListDriftResult">
This list gives Info about time slot clusters.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SDriftResult.bDriftIsOutOfSpec">
The drift of the measured SCH is out of spec, e.g. the measured drift
is far greater than what the spec allows.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SDriftResult.fDriftErrorInPpm">
The estimated error of the fDriftInPpm value.
The drift can only be calculated when the SCH has been demodulated.
If the latter is not the case, then we may still be able to give a very rough estimate
of the drift, for example 2.5ppm with an error of +/-1ppm.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SDriftResult.fDriftInPpm">
The drift of the measured SCH in ppm.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SDriftResult.dwIndicatorOfSCHInfo">
Indicator: References to an demodulated SCH Measurement (SCHInfo) on 
the same frequency which is stored in this or an earlier MeasResult.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SDriftResult.dTimeOfMeasurementInSec">
The scanner timestamp when the drift measurement was performed.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SDriftResult.dwFrequencyIndex">
Index of the measured frequency

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SMeasResult.SDriftResult">
Contains a drift measurement in ppm of a particular SCH.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.ListTimeSlotPowerClusterResult">
This list gives Info about time slot clusters.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.STimeSlotPowerClusterResult.ListTimeSlotPowerValuesResult">
This list gives the times slot power values of the cluster

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.STimeSlotPowerClusterResult.STimeSlotPowerValuesResult.bSlotDistanceFromPrevTimeSlot">
Number of time slots this time slot is behind the previous time slot. It should be 0 for the first time slot 
measurement. 

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.STimeSlotPowerClusterResult.STimeSlotPowerValuesResult.scTimeShiftIn100ns">
The max peak is shifted for this time from the average time. 

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.STimeSlotPowerClusterResult.STimeSlotPowerValuesResult.bOffsetToTotalPowerInDB10">
The total power for this time slot in 0.01dBm is:  
sMinPowerInDBm100 + (short)(((dword)wPowerRangeInDB100 * bPower) &gt;&gt; 8) + 10 * bOffsetToTotalPowerInDB10 

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.STimeSlotPowerClusterResult.STimeSlotPowerValuesResult.bPower">
The time slot power in 0.01dBm for this byte value bPower uses values from the STimeSlotPowerClusterResult: 
sMinPowerInDBm100 + (short)(((dword)wPowerRangeInDB100 * bPower) &gt;&gt; 8)

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SMeasResult.STimeSlotPowerClusterResult.STimeSlotPowerValuesResult">
Specific values for time slots belonging to the cluster
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.STimeSlotPowerClusterResult.bEstimatedSlotAlignmentWeak">
Estimated Slot Alignment Weak: 
Same a above but also possible slot alignments with smaller likelihood are indicated.
Using the same bit coding as above.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.STimeSlotPowerClusterResult.bSlotAlignmentEquidistant">
Estimated Slot Alignment:
For a downlink channel the slot alignment is either equidistant with a slot length 
of 156.25 bits or a fill bit is used before each forth slot and the slot length is 156
bits. So there are 5 possibilities for the time slot cluster: equidistant, or fill bit before 
the first, second, third or forth time slot. The 4 mentioned slots are adjacent and start 
at dTimeOfFirstSlotInSec and are probably not all measured. The estimation may give more then one 
of the 5 possibilities if they have the same likelihood. E.g. if only one time slot ist measured 
or only time slots with equal time slot number, then we have the same probability for all
5 possibilities. For uplink channels the scanner may do an estimation but this should be ignored 
as the mobiles have other types of slot alignment. 
The alignments possibilities are coded as bits, see the following constants, 
and can be used also in combination as noted above.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.STimeSlotPowerClusterResult.wPowerRangeInDB100">
The time slot power in 0.01dBm for the byte value bPower is: 
sMinPowerInDBm100 + (short)(((dword)wPowerRangeInDB100 * bPower) &gt;&gt; 8)

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.STimeSlotPowerClusterResult.sMinPowerInDBm100">
minimum measured time slot power

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.STimeSlotPowerClusterResult.dTimeOfFirstSlotInSec">
Time Of First Slot:
Average time calculated for the first slot in this cluster. Each slot measurement may have a time shift to this time.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.STimeSlotPowerClusterResult.bTsc">
0..7 or invalid byte (0xff)

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SMeasResult.STimeSlotPowerClusterResult.etTimeSlotType">
Time Slot Type

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.STimeSlotPowerClusterResult.dwFrequencyIndex">
Index of the measured frequency

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SMeasResult.STimeSlotPowerClusterResult">
Values for GSM time slot power measurements.
Time slot power measurements are done for clusters. In a cluster results from different time slots are used 
to get results (e.g. the training sequence code) and to collect the results.
The time slot measurements of the cluster are in the ListTimeSlotPowerValuesResult.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SChannelPowerResult.dwCountOfBytes">
PowerValueBuffer: For each channel dwCountOfResultsPerChannel are stored. The first power value 
is taken at  dStartTimeInSec. Each value bValue represents a power 0.5 * bValue dB above sMinPowerInDBm100.  

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SChannelPowerResult.dStartTimeInSec">
Time of the first power values per channel. The power sequences 
for all channels are taken in the same time interval.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SChannelPowerResult.sMinPowerInDBm100">
Power value in 0.01dBm to calculate the power over time. See PowerValueBuffer.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SChannelPowerResult.wRMSLengthIn40ns">
Each power value is averaged over a short time interval given in this value.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SChannelPowerResult.wCountOfResultsPerGSMTimeSlot">
The time distance between adjacent results is always a fraction of a GSM time slot. 
This value gives the time distance dT/us = 12 * 625 / (13 * wCountOfResultsPerGSMTimeSlot)

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SChannelPowerResult.dwCountOfResultsPerChannel">
Number of result bytes in the power result buffer per channel. It is equal for each channel.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SChannelPowerResult.dwCountOfChannels">
Number of channels we have channel power measurements for. The channels itself can be 
retrieved from the list of ListPowerExecutedMeasSpec. 

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SMeasResult.SChannelPowerResult">
Inband power value description for all or a subset of measured channels. The channels itself can be 
retrieved from the list of ListPowerExecutedMeasSpec. 
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SSpectrumResult.dwCountOfBytes">
Power values for all sub spectrum entries. For each sub spectrum the buffer 
contains wCountOfPowerValuesPerSubSpec power value offsets in 0.5dB from sMinPowerValueInDBm100 lower power limit. 
The frequency spacing is 200kHz/wCountOfPowerValuesPerChannel within one channel. 
The channels for which spectrum measurements have been done are listed in structure SExecutedMesurements 
in the same order as in they occur in the sub spectrum. 
This order is from low to high frequencies but the channel list may have gaps e.g. channel 1,2,3,7,8. 
In this case (GSM900) we have a subspectrum from 935.1 .. 935.7MHz and 936.3 .. 936.7MHz. 
Note that center frequency for each channel index has to be taken from the start command.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SSpectrumResult.sMinPowerValueInDBm100">
Minimum power value which can be reported in 0.01dBm. It is chosen, that the maximum power (byte Value 255) 
can be expressed in the possible dynamic range of 128 dB.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SSpectrumResult.wResolutionBandwidthInHz">
resolution bandwidth of the internal filter

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SSpectrumResult.wTimeBetweenFFTsIn100ns">
It is an FFT spectrum and the time distance of 2 adjacent FFTs is given. Each FFT may use a longer 
signal section for filtering. 

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SSpectrumResult.wCountOfFFTsInLastSubSpectrum">
this is the count of FFTs we have used in the last sub spectrum

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SSpectrumResult.wCountOfFFTsPerSubSpectrum">
For each sub spectrum we may use one or more FFTs. This is the number of FFTS in the sub spectrum 
except the last one which may use less FFTs

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SSpectrumResult.wCountOfPowerValuesPerSubSpec">
Is the count of used channel times the count of power values per channel.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SSpectrumResult.wCountOfPowerValuesPerChannel">
Count of power values per channel per spectrum. Count of frequency intervals per channel.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SSpectrumResult.wSubSpectrumCount">
This is the number of subspectrums stored in this structure.

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SMeasResult.SSpectrumResult">
Spectrum for all or a subset of the measured GSM channels.
The channels for which spectrum measurements have been done are listed in structure SExecutedMesurements 
in the same order as in they occur in the sub spectrum. 
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.ListExecutedMeasSpec">
This list gives a report of executed measurement detail orders for specific channels.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.ListPowerResultsOfFailedTrials">
This list contains measured power values for trials of measurements which would occur in the ListPowerResults if 
we had enough sensitivity. The power results are not valid power values but the besides some correlation noise it
is an upper limit for the received power of the measured signal.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SDemodResult.dwBitCount">
Bytes of demodulated sequence

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SDemodResult.ePDU">
PDU that has been measured.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SDemodResult.dwFrameNumber">
Frame number of the FCCH in the last used M51 Frame

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SDemodResult.wBCCHAccumulationCount">
Number of accumulated signals

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SMeasResult.SDemodResult.etBcchType">
BCCH type

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SMeasResult.SDemodResult.etDemodStatus">
Demodulation status

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SDemodResult.dwIndicatorOfSCHInfo">
Indicator: References to an demodulated SCH Measurement (SCHInfo) on 
the same frequency which is stored in this or an earlier MeasResult.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SDemodResult.dwFrequencyIndex">
Index of the measured frequency

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SMeasResult.SDemodResult">
Results of BCCH demodulations
* \@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.ListMeasurementRates">
List of measurement rates rates and other values in relation to the measurement rate for 
one or more time intervals of measurement rate calculation. The measurement rate is 
the ratio of all measurements of the same type of measurement at the time
the measurement signals have been picked from the air. So the time of arrival 
at the host application is not used. And equal measurements at different RF channels are put together.      

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.bLastOfScan">
If true this measurement is the last of the scan number given in dwScanCount.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.pdwScanCount">
ScanCount: A scan is a measurement for all channels. The Network Scanner tries to fill a scan 
as soon as possible before starting to measure channels of another scan. But in the case the PC cannot 
handle all result, the TSMU is forced to throw away some result. In this case the measurement of this 
channel is repeated as soon as possible but measurements of different scans can interleave with each other.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.ListCellIdentResults">
List of CellIdent measurement results

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SCellIdentResult.wMNC">
Mobile network code: 0..0xfff the hexadecimal output of this number gives the decimal code or any digits &gt; 9 if 
a wrong number was transmitted

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SCellIdentResult.wMCC">
Mobile country code: 0..0xfff the hexadecimal output of this number gives the decimal code or any digits &gt; 9 if 
a wrong number was transmitted

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SCellIdentResult.wLAC">
location area code

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SCellIdentResult.wCI">
cell identity

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SCellIdentResult.dwIndicator">
Indicator: Referenced by SCHInfo measurements.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SCellIdentResult.dwFrequencyIndex">
Index of the measured frequency

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SMeasResult.SCellIdentResult">
Global Cell Identifier from demodulated and decoded ST3 (SYTEM INFORMATION TYPE 3)
* \@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.ListSCHInfoResults">
List of SCH Info measurement results

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SSCHInfoResult.dwIndicatorOfCellIdent">
Indicator: If other than SDefs::INVALID_DWORD_VALUE it references to a CellIdent measurement on 
the same frequency which is stored in this or a later MeasResult.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SSCHInfoResult.dwGSMFrameNumber">
Decoded frame number

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SSCHInfoResult.wBSIC">
Decoded BSIC code

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SSCHInfoResult.dwIndicatorOfFirstSCHInfo">
This dwIndicatorOfFirstSCHInfo is the indicator of a previous  SCHInfoResult which is related 
to the current SCHInfoResult.
For the GSM network scanner two SCH measurements belong together, 
if the arrival time does not differ for more than 20 us reflections plus 0.30 ppm time drift 
and in total not more than 2 GSM Slots (1.15ms).

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SSCHInfoResult.dwIndicatorOfSCHInfo">
Indicator: Referenced by SCH power results and CellIdent.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SSCHInfoResult.dwFrequencyIndex">
Index of the measured frequency

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SMeasResult.SSCHInfoResult">
SCH(Synchronization channel) demodulated BTS info results
* \@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.ListPowerResults">
List of Power measurement results

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SPowerResult.psCarrierToInterferenceInDB100">
Carrier to Interference in 0.01dB
This pointer is NULL if the result contains no C/I value.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SPowerResult.bTotalPowerOffsetInDB10">
Difference between total inband power during the power measurement to the measured power. 
If sPowerInDBm100 refers to a code power measurement and reflections as well as measurement 
impacts due to frequency offsets, phase noise and correlation errors are neglected
then the following two relations hold:
bTotalPowerOffsetInDB10 = 10 * (-Ec/I0 in dB) and 
bTotalPowerOffsetInDB10 = 100 * log10(1 + 1/(C/I)).
The value 255 is defined as an saturation value i.e. when Saturation is reached the measured 
value of bTotalPowerOffsetInDB10 is &gt;= 255. The accuracy of bTotalPowerOffsetInDB10 is 
typically better than 0.5dB for the case that reflections and frequency offsets can be neglected.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SPowerResult.dwIndicatorOfSCHInfo">
Indicator: If other than SDefs::INVALID_DWORD_VALUE it references to a demodulated SCH Measurement (SCHInfo) on 
the same frequency which is stored in this or an earlier MeasResult.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SPowerResult.sPowerInDBm100">
Measured power in dBm 100th

</member>
        <member name="F:MEASMODE_CARRIER_TO_INTERFERENCE">
Carrier to Interference measurement
The C/I is measured using an equalizer on the Extended Training Sequence within the SCH.

</member>
        <member name="F:MEASMODE_FAILED_TRIALS">
SCH power measurement for a BTS which was measured before, but
the measurement failed.

</member>
        <member name="F:MEASMODE_ACTIVESET2">
SCH power measurement is from active set 2

</member>
        <member name="F:MEASMODE_ACTIVESET1">
SCH power measurement is from active set 1

</member>
        <member name="F:MEASMODE_DEMOD">
SCH power has been demodulated

</member>
        <member name="F:MEASMODE_ETS">
SCH power has been measured with the ETS only

</member>
        <member name="F:MEASMODE_INVALID">
Detailed power measurement mode is unknown.

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SMeasResult.SPowerResult.etMeasMode">
Mode of power measurement

</member>
        <member name="F:MEASTYPE_CARRIER_TO_INTERFERENCE">
Carrier to Interference measurement
The C/I is measured using an equalizer on the Extended Training Sequence within the SCH.

</member>
        <member name="F:MEASTYPE_POWSCH">
SCH power. Please consider eMeasMode for further information.

</member>
        <member name="F:MEASTYPE_POWCH">
Total inband power. Maximum average power for one GSM time slot length.
Valid independent from eMeasMode.

</member>
        <member name="F:MEASTYPE_POWINVALID">
Invalid power

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SMeasResult.SPowerResult.etMeasType">
Type of power measurement

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.SPowerResult.dwFrequencyIndex">
Index of the measured frequency

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SMeasResult.SPowerResult">
SCH(Synchronization channel) power or Total inband power measurement result
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.u64DeviceTimeInNs">
If available the device time in ns is reported.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasResult.dwPcTimeStampInMs">
   The device time of start of the RF measurement which was used to produce the result.

   The dwPcTimeStampInMs is a conversion of this device time to the PC system time obtained with the GetTickCount() function.
   The adjustment of possible time drift between device time and GetTickCount() as well as the resolution of  GetTickCount() causes
   a conversion error of a few milliseconds.
   dwPcTimeStampInMs may be used to synchronize results with other measurement data in the system or to determine the age
   of the result which is GetTickCount() - dwPcTimeStampInMs;

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SMeasResult">
This structure holds a measurement result from the result buffer. Please refer to the manual for a detailed discussion of
how to interpret the results.
@note
   that the result data are for reading only and available until the next interface function is called.

\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SSettings">
By means of the functions: SetConfiguration() internal settings of the  GSM-Network-Scanner may be changed
and with the functions SelectReceiver(), SetTimebaseSynchronisationMode() of CViComBasicInterfaceData change basic settings. 
Except of frequency settings all other settings have default values.

This structure bundles these settings and will be returned as result from the GetSettings() method.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SDemodulationSettings.dwFrontEndSelectionMask">
Receiver front end to be used by the demodulator for this channel. 
If no demodulation shall be provided, this shall be set to 0.
Demodulation tasks are not allowed to contain multiple FE's.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SDemodulationSettings.lTotalPowerOffsetInDB10">
Maximum threshold for demodulation trials in 0.1dB.
The scanner monitors BTSs with SCH measurements. Each SCH power measurement has a certain offset to the
total GSM inband power during SCH arrival time (e.g. the SCH power is 3 dB below the total inband power).
If the magnitude of the offset is higher, the demodulation probability drops. This is the limit for this offset.
BTSs measured with a higher total power offset will not be demodulated.

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SDemodulationSettings">
This structure is used to configure the BCH System Information Type demodulation process.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SDemodRequests.SDemodRequest">
   There must be one instance of this structure for each BCH System Information Type demodulation request,
   therefore different SITypes can be measured on different channels.

   Example for start measurement:
   On the first channel SI Types 3 and 4 shall be decoded, on the the second channel SI Types 3, 5 and 7 shall be decoded.
   SI Type 5 shall be decoded repeatedly every 10 seconds (100*100 ms) and SI Type 7 shall be decoded on demand.
   This requires five structures containing the following parameter sets:
   @code
   (0, SITYPE_3, ONCE, 0, 0)
   (0, SITYPE_4, ONCE, 0, 0)
   (1, SITYPE_3, ONCE, 0, 0)
   (1, SITYPE_5, REPETITION, 100, 0)
   (1, SITYPE_7, ON_CMD, 0, 0)
   @endcode

   Example during measurement:
   On channel 0 SI Types demodulation shall be completely reset for the BTS identified by dwSCHIndicator 2
   and on the the second channel SI Type 7 shall be decoded for the BTS identified by dwSCHIndicator 3 with 
   a timeout for the request of 1 sec (10*100ms):
   @code
   (0, PDU_SITYPE_NULL, BTS_RESET, 0, 2)
   (1, SITYPE_7, BTS, 10, 3)
   @endcode

   Note that you are responsible to manage the memory when you use SetDemodulationSettings().
   Note: All parameters which are not necessary for a certain request shall be set to 0.
   * \@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SDemodRequests">
This structure is used to configure System Information Type demodulation requests.
It is used in start measurement requests and it is used to issue BCH System Information Type demodulation requests during measurement,
e.g. SI Type demodulation requests on demand or to reset SI Type demodulation.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.DemodMode">
This enumeration defines modes for the demodulation.
Use this in the SDemodRequest structure to specify when the demodulation 
of this PDU shall be done.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.Pdu">
This enumeration defines the System Information Types which can be demodulated from the BCH.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasurementDetails.pTableOfChannelMeasSpec">
Each frequency index shall occur only once in this array.
\@attribute[type="array" size="dwCount" sizeismember="true"]   

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SMeasurementDetails.dwCount">
Number of selected channels. Same as SChannelSettings::dwCount.

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SMeasurementDetails">
SMeasurementDetails contains parameters for certain measurement functions and a selection for 
measurements for a list of individual channels. 
All channels which are not given in the list will remain with their default setting.
If this structure is not used at the start command, the default 
measurements (SCH Power measurement and SCH demodulation) is done for all channels.

By using this structure in the "RedefineMeasurementDetails" function, it is possible to 
redefine measurements between the start and stop command during measurement. 
Note that the redefinition will not allow to set a new frequency list but it will refer to the initial 
frequency list given with the first start command.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SChannelMeasSpec.bMEAS_REPORT_FAILED_TRIALS">
Failed SCH meas trials will be reported.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SChannelMeasSpec.bMEAS_SPECTRUM">
Spectrum measurement for this channel as defined in SSpectrumSpec.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SChannelMeasSpec.bMEAS_CHANNEL_POWER">
This measurement will do the channel power measurement as defined in SChannelPowerSpec.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SChannelMeasSpec.bMEAS_TSC">
Trainings Sequence Code Measurement. This is a time slot measurement for normal GSM bursts. 
It is applicable for up- and downlink. 

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SChannelMeasSpec.bMEAS_DB_POWER">
Power measurement for dummy bursts. This can produce much more power results for C0 carriers than 
the SCH measurement. It shall be used for downlink only. 

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SChannelMeasSpec.bMEAS_DB_REMOVAL">
Detection of dummy bursts and removal of dummy bursts from the GSM signal before further analysis. 
This can make SCH and TCH measurements significantly more sensitive. It should be used for downlink channels only. 

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SChannelMeasSpec.bMEAS_CARRIER_TO_INTERFERENCE">
Carrier to Interference measurement.
This is only valid for SCH related measurements and downlink. 
The C/I is measured using an equalizer on the Extended Training Sequence within the SCH.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SChannelMeasSpec.bMEAS_SCH">
If a following switch is set then the measurement will be done, else it will be stopped for this channel.

SCH related measurements. (SCH, ETS power, BSIC, FN demodulation) Should be used for downlink only.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SChannelMeasSpec.dwFrequencyIndex">
Frequency index for the new measurement set. 

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SChannelMeasSpec">
SChannelMeasSpec defines a new set of measurements for a channel (as given by frequency index).
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SChannelPowerSpec.wCountOfResultsPerGSMTimeSlot">
The time distance between adjacent results is always a fraction of a GSM time slot. 
This value gives the time distance dT/us = 12 * 625 / (13 * wCountOfResultsPerGSMTimeSlot)

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SChannelPowerSpec.wRMSLengthIn40ns">
the power is averaged over a time interval given in this value

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SChannelPowerSpec">
SChannelPowerSpec  contains a definition of the channel power graph which applies for all channels with 
channel power measurement enabled.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SSpectrumSpec.eTimeDetector">
Time detector mode.

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SSpectrumSpec.TimeDetector">
Choice of detector mode in the time domain.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SSpectrumSpec.eFreqDetector">
Frequency detector mode.

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SSpectrumSpec.FreqDetector">
Choice of detector mode in the frequency domain.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SSpectrumSpec.wCollectionTimeIn100us">
Each sub spectrum is calculated from a few FFTs. The processing will collect a 
constant number of FFTs to produce a sub spectrum. This number is chosen in a 
way that the Collection Time will be approximated as good as possible. The result 
value for each frequency interval after collecting some FFTs is defined by
the Time Detector below.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SSpectrumSpec.wCountOfPowerValuesPerChannel">
Each GSM channel of 200kHz bandwidth will be divided in wCountOfPowerValues
per Channel frequency intervals of equal length. Minimum should be 1 and maximum is 100. 

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SSpectrumSpec">
SSpectrumSpec contains a definition of channel spectrum measurements which applies for all channels with 
spectrum measurement enabled.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SChannelSettings.bMaxNofScanners">
The maximum number of used GSM scanner instances. Possible value range: 1...32.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SChannelSettings.fMaxDetectableDriftInPpm">
The maximum detectable drift range is +/-fMaxDetectableDriftInPpm. Possible value range: 0...8.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SChannelSettings.pTableOfFrequencySetting">
Pointer to an array containing the settings of the selected frequencies.
The number of members in the array is defined by dwCount (above).
  
\@attribute[type="array" size="dwCount" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SChannelSettings.dwMeasRatePer1000Sec">
The desired measurement rate value. For default value and range see GetMeasRateLimits().
The limits are dependent from the currently set eMeasurementMode.

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SChannelSettings.dwCount">
Number of frequency configurations that shall be used from the pTableOfFrequencySetting to perform the measurement tasks.
For value range see GetChannelCountLimits().
*
</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SChannelSettings.dwFrontEndSelectionMask">
Receiver front end to be used by the scanner for this channel.
Scanner tasks are not allowed to contain multiple FE's.

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SChannelSettings">
SChannelSettings contains the count of channels or frequencies and the table of frequencies in Hz.
The selection of new frequencies (with SetConfiguration) automatically resets the  demodulation requests.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GSM.SFrequencySetting.dCenterFrequencyInHz">
Center frequency of the channel 
</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.SFrequencySetting">
Frequency settings
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.GSM.etViComInterfaceVersion">
Data containers used for ViCom GSM interface. Contains measurement configuration and result structures.

</member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderTdScdma.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderTdScdma.m_loader">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderTdScdma.GetInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderTdScdma.GetBasicInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderTdScdma.SetSettings(RohdeSchwarz.ViCom.Net.SReceiverSettings)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderTdScdma.Disconnect">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderTdScdma.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComError@,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderTdScdma.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderTdScdma.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderTdScdma.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderTdScdma">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterface.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterface.GetType">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterface.DisableMarkerSignal">
            <summary>
Disables any previously enabled Marker signal activated either by EnableMarkerSignal() or EnablePpsMarkerSignal().
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterface.EnablePpsMarkerSignal">
            <summary>
Once enabled uses TSME/6 AUX2 port to output a marker signal with the following properties: Pulse frequency 1 Hz, 50% duty cycle, starting with a rising edge synchronised to the internal PPS signal of the recevier.
The first found receiver will be used to output the marker signal. The EnableMarkerSignal() and EnablePpsMarkerSignal() are to be used mutually exclusive.
</summary>
            <param name="frontEnd">
reserved, ignored for now. The first found receiver will be used to output the marker signal.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterface.EnableMarkerSignal(System.UInt64,System.Double,System.Byte)">
            <summary>
Once enabled uses a TSME/6 AUX port to output a marker signal with the following properties: Pulse frequency 1/dPulsePeriodInS Hz, 50% duty cycle, starting with a rising edge at the given receiver timestamp.
The first found receiver will be used to output the marker signal. The EnableMarkerSignal() and EnablePpsMarkerSignal() functions are to be used mutually exclusive.
</summary>
            <param name="u64deviceStartTimeInNs">
start time for the marker signal with respect to the receiver clock. If the given time is in the past the marker will be started immediately to an arbitrary time.
</param>
            <param name="dPulsePeriodInS">
pulse period of the marker signal in seconds.
</param>
            <param name="bAuxPort">
number of the AUX port to be used for the maker signal. Possible values: 2 and 4.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
@note
Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage, it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComLteInterface::GetResult() and vice versa.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterface.GetSettings">
            <summary>
Using the methods SetConfiguration()the internal settings of the measurement device are changed. This function reads the current configuration from the internal software and returns all those settings for read-only access.
All settings have default values. By means of this function you can retrieve the Channel Power Receiver settings which apply at the moment for measurements to be started or during running measurements.
@note
The result, like all other results too, is only for reading. To change settings the functions mentioned above shall be used.
</summary>
            <return>
a structure filled with the currently valid values or NULL if the call was not processed successfully.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.BLOCKIQ.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary>
SChannelSettings contains the number of channels and the table of frequencies. The frequency or channel index is counted from zero and referenced in other data e.g. the measurement result.
</summary>
            <param name="rChannelSettings">
Contains the channel configuration that shall be measured. The configuration consists of a set frequency and bandwidths.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterface.GetBandwidthLimits">
            <summary>
Limits for Parameter SChannelSettings::dwBandwidthInHz
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterface.GetSampleRateLimits">
            <summary>
Limits for Parameter SChannelSettings::dwSampleRateInHz
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterface.GetMeasRateLimits">
            <summary>
Limits for Parameter SChannelSettings::dwMeasRatePer1000Sec
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterface.GetBasicInterface">
            <summary>
Returns reference to basic interface object implementation.
The basic interface is a part of any application specific ViCom interface. It is used for different R&amp;S TSM applications. The purpose is to control basic R&amp;S TSM functions, which are not specific for a certain measurement.
CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterface.#ctor(RohdeSchwarz.ViCom.BLOCKIQ.CViComBlockIqInterface*)">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterface.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterface.m_converter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterface.m_nativeIf">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterface.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterface">
            <summary>
Interface to perform IQ data measurements.
Channel power measurements do not perform any RAT specific measurements like demodulation or others. In this way they can easily be adopted to new technologies and can be used to perform the first, generic measurements.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.DataConverterCViComBlockIqInterfaceData.Convert2M(RohdeSchwarz.ViCom.Technology.Type)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.DataConverterCViComBlockIqInterfaceData.Convert2M(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.DataConverterCViComBlockIqInterfaceData.Convert2M(RohdeSchwarz.ViCom.BLOCKIQ.SMeasResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.DataConverterCViComBlockIqInterfaceData.Convert2M(RohdeSchwarz.ViCom.BLOCKIQ.SSettings!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.DataConverterCViComBlockIqInterfaceData.Convert2M(RohdeSchwarz.ViCom.SRange&lt;System.UInt32&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.DataConverterCViComBlockIqInterfaceData.CleanUp(RohdeSchwarz.ViCom.BLOCKIQ.SChannelSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.BLOCKIQ.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.DataConverterCViComBlockIqInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.BLOCKIQ.SChannelSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.BLOCKIQ.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.DataConverterCViComBlockIqInterfaceData.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.DataConverterCViComBlockIqInterfaceData.Instance">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.DataConverterCViComBlockIqInterfaceData.s_instance">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.BLOCKIQ.DataConverterCViComBlockIqInterfaceData">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.ICViComBlockIqInterface.DisableMarkerSignal">
            <summary>
Disables any previously enabled Marker signal activated either by EnableMarkerSignal() or EnablePpsMarkerSignal().
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.ICViComBlockIqInterface.EnablePpsMarkerSignal">
            <summary>
Once enabled uses TSME/6 AUX2 port to output a marker signal with the following properties: Pulse frequency 1 Hz, 50% duty cycle, starting with a rising edge synchronised to the internal PPS signal of the recevier.
The first found receiver will be used to output the marker signal. The EnableMarkerSignal() and EnablePpsMarkerSignal() are to be used mutually exclusive.
</summary>
            <param name="frontEnd">
reserved, ignored for now. The first found receiver will be used to output the marker signal.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.ICViComBlockIqInterface.EnableMarkerSignal(System.UInt64,System.Double,System.Byte)">
            <summary>
Once enabled uses a TSME/6 AUX port to output a marker signal with the following properties: Pulse frequency 1/dPulsePeriodInS Hz, 50% duty cycle, starting with a rising edge at the given receiver timestamp.
The first found receiver will be used to output the marker signal. The EnableMarkerSignal() and EnablePpsMarkerSignal() functions are to be used mutually exclusive.
</summary>
            <param name="u64deviceStartTimeInNs">
start time for the marker signal with respect to the receiver clock. If the given time is in the past the marker will be started immediately to an arbitrary time.
</param>
            <param name="dPulsePeriodInS">
pulse period of the marker signal in seconds.
</param>
            <param name="bAuxPort">
number of the AUX port to be used for the maker signal. Possible values: 2 and 4.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.ICViComBlockIqInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.ICViComBlockIqInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
@note
Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage, it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComLteInterface::GetResult() and vice versa.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.ICViComBlockIqInterface.GetSettings">
            <summary>
Using the methods SetConfiguration()the internal settings of the measurement device are changed. This function reads the current configuration from the internal software and returns all those settings for read-only access.
All settings have default values. By means of this function you can retrieve the Channel Power Receiver settings which apply at the moment for measurements to be started or during running measurements.
@note
The result, like all other results too, is only for reading. To change settings the functions mentioned above shall be used.
</summary>
            <return>
a structure filled with the currently valid values or NULL if the call was not processed successfully.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.ICViComBlockIqInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.BLOCKIQ.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary>
SChannelSettings contains the number of channels and the table of frequencies. The frequency or channel index is counted from zero and referenced in other data e.g. the measurement result.
</summary>
            <param name="rChannelSettings">
Contains the channel configuration that shall be measured. The configuration consists of a set frequency and bandwidths.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.ICViComBlockIqInterface.GetBandwidthLimits">
            <summary>
Limits for Parameter SChannelSettings::dwBandwidthInHz
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.ICViComBlockIqInterface.GetSampleRateLimits">
            <summary>
Limits for Parameter SChannelSettings::dwSampleRateInHz
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.ICViComBlockIqInterface.GetMeasRateLimits">
            <summary>
Limits for Parameter SChannelSettings::dwMeasRatePer1000Sec
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.ICViComBlockIqInterface.GetBasicInterface">
            <summary>
Returns reference to basic interface object implementation.
The basic interface is a part of any application specific ViCom interface. It is used for different R&amp;S TSM applications. The purpose is to control basic R&amp;S TSM functions, which are not specific for a certain measurement.
CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.BLOCKIQ.ICViComBlockIqInterface">
            <summary>
Interface to perform IQ data measurements.
Channel power measurements do not perform any RAT specific measurements like demodulation or others. In this way they can easily be adopted to new technologies and can be used to perform the first, generic measurements.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterfaceDataProcessor.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.BLOCKIQ.CViComBlockIqInterfaceDataProcessor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult.ListMeasurementRates">
            <summary>
Measurement rate for all channels.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult.pIqData">
            <summary>
Actual iq data if pIqData is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult.pFilterResponse">
            <summary>
Actual filter response used for acquisition of iq samples if pFilterResponse is not NULL. Only provided with the very first measurement result (SMeasResult).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult.dwPcTimeStampInMs">
            <summary>
Measurement timestamp (PC tic) in ms. May be used to synchronise IQ results with other measurement data in the system or to determine the age of the IQ result = GetTickCount() - dwPcTimeStampInMs;
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult.SIqData.pIqSamples">
            <summary>
Actual buffer for dwCountOfSamples iq samples. Use dIqGainInDB for conversion to RF signal power in dBm.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult.SIqData.dwCountOfSamples">
            <summary>
Number of elements in pfTransferFunction if pIqSamples is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult.SIqData.dIqGainInDB">
            <summary>
Gain applied to the IQ samples. RF signal power in dBm = 10  log10( re^2 + im^2 ) - dIqGainInDB.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult.SIqData.dActualSamplingRateInHz">
            <summary>
The actual sampling rate used for acquisition of iq values might differ a little bit from the specification in SChannelSettings::dwSampleRateInHz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult.SIqData.bOverflow">
            <summary>
This is true if any of the IQ samples hit by an ADC overflow.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult.SIqData.u64DeviceTimeInNs">
            <summary>
The time when the signal was started to being measured on the device, with a higher resolution than the default PC clock. E.g. device time of the first IQ sample. This time is relative to the last restart of the device.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult.SIqData.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult.SIqData.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult.SIqData">
            <summary>
Container for iq data.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult.SFilterResponse.pTransferFunction">
            <summary>
Actual buffer for dwCountOfSamples filter values in frequency domain.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult.SFilterResponse.dwCountOfSamples">
            <summary>
Number of elements in pfTransferFunction if pfTransferFunction is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult.SFilterResponse.bIsPeriodic">
            <summary>
If true filter values are priodic, e.g. value[k] = value[k + dwCountOfValues].
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult.SFilterResponse.dFrequencySpacingInHz">
            <summary>
Spacing of the frequency grid, e.g. frequency resolution.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult.SFilterResponse.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult.SFilterResponse.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult.SFilterResponse">
            <summary>
Container for filter response functions.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.BLOCKIQ.SMeasResult">
            <summary>
The CWScan measurement result returned by CViComCWScanInterface::GetResult().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SSettings.ChannelSettings">
            <summary>
The set of frequencies that shall be measured.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SSettings.dwReceiverIndex">
            <summary>
Index to SConnectedReceiverTable::Receiver of the currently selected receiver.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.SSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.BLOCKIQ.SSettings">
            <summary>
This structure contains all the currently active settings stored in the ViComCWScan interface, which are used to actually perform the measurement.
All the content has either been set by related Set methods of the CViComCWScanInterface, or they are still in their default values.
@note
The values in this structures cannot be changed, they are read-only. Even if they are modified after the structure is requested by the GetSettings() method, the changes will not be reflected in the internal settings.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SChannelSettings.dwMeasRatePer1000Sec">
            <summary>
The measurement rate. For default value and range see CViComIqInterface::GetMeasRateLimits().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SChannelSettings.dwNofSamplesPerBlock">
            <summary>
Number of iq samples per measurement block.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SChannelSettings.dwMaxSampleCount">
            <summary>
Maximum number of samples per block.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SChannelSettings.eDataFormat">
            <summary>
Data format of the iq samples.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SChannelSettings.dwBandwidthInHz">
            <summary>
Measurement bandwidth in Hz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SChannelSettings.dwSampleRateInHz">
            <summary>
Sample rate in Hz. The default is to use a oversampling factor of 1.15, e.g. SampleRateInHz = 1.15  BandwidthInHz;
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SChannelSettings.dCenterFrequencyInHz">
            <summary>
Channel center frequency in Hz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SChannelSettings.dwFrontEndSelectionMask">
            <summary>
Receiver front end to be used by the scanner for this channel. Iq tasks are not allowed to use multiple FE's.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.SChannelSettings.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.BLOCKIQ.SChannelSettings.DataFormat.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SChannelSettings.DataFormat.Type.DATA_20_BIT">
            <summary>
20 bit per IQ sample
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SChannelSettings.DataFormat.Type.DATA_16_BIT">
            <summary>
16 bit per IQ sample
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SChannelSettings.DataFormat.Type.DATA_12_BIT">
            <summary>
12 bit per IQ sample
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.BLOCKIQ.SChannelSettings.DataFormat.Type.DATA_8_BIT">
            <summary>
8 bit per IQ sample
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.BLOCKIQ.SChannelSettings.DataFormat.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.BLOCKIQ.SChannelSettings.DataFormat">
            <summary>
Definition of data formats for IQ samples.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.BLOCKIQ.SChannelSettings">
            <summary>
This structure contains paramters to specify the block of iq data which shall be measured.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderBlockIq.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderBlockIq.m_loader">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderBlockIq.GetInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderBlockIq.GetBasicInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderBlockIq.SetSettings(RohdeSchwarz.ViCom.Net.SReceiverSettings)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderBlockIq.Disconnect">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderBlockIq.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComError@,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderBlockIq.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderBlockIq.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderBlockIq.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderBlockIq">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.BLOCKIQ.CViComBlockIqInterface.DisableMarkerSignal">
Disables any previously enabled Marker signal activated either by EnableMarkerSignal() or EnablePpsMarkerSignal().

</member>
        <member name="M:RohdeSchwarz.ViCom.BLOCKIQ.CViComBlockIqInterface.EnablePpsMarkerSignal">
   Once enabled uses TSME/6 AUX2 port to output a marker signal with the following properties:
   Pulse frequency 1 Hz, 50% duty cycle, starting with a rising edge synchronised to the internal PPS signal of the recevier.

   The first found receiver will be used to output the marker signal.
   The EnableMarkerSignal() and EnablePpsMarkerSignal() are to be used mutually exclusive.

   @param[in] frontEnd
   reserved, ignored for now. The first found receiver will be used to output the marker signal.

</member>
        <member name="M:RohdeSchwarz.ViCom.BLOCKIQ.CViComBlockIqInterface.EnableMarkerSignal(System.UInt64,System.Double,System.Byte)">
   Once enabled uses a TSME/6 AUX port to output a marker signal with the following properties:
   Pulse frequency 1/dPulsePeriodInS Hz, 50% duty cycle, starting with a rising edge at the given receiver timestamp.

   The first found receiver will be used to output the marker signal.
   The EnableMarkerSignal() and EnablePpsMarkerSignal() functions are to be used mutually exclusive.

   @param[in] u64deviceStartTimeInNs
   start time for the marker signal with respect to the receiver clock.
   If the given time is in the past the marker will be started immediately to an arbitrary time.
   @param[in] dPulsePeriodInS
   pulse period of the marker signal in seconds.
   @param[in] bAuxPort
   number of the AUX port to be used for the maker signal. Possible values: 2 and 4.

</member>
        <member name="M:RohdeSchwarz.ViCom.BLOCKIQ.CViComBlockIqInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.BLOCKIQ.SMeasResult&gt;*)">
   Unregister a formerly registered ScannerData listener to remove it from the list of objects that
   shall get notification about new measurement data.

   @param[in] pListener
      The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered
      objects, an error is indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.BLOCKIQ.CViComBlockIqInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.BLOCKIQ.SMeasResult&gt;*)">
   Register a ScannerData listener that will be notified when new data is available. Note that it is
   important to Unregister the listener again once it is getting deleted, to avoid crashes.

   @note Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage,
   it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComLteInterface::GetResult() and vice versa.

   @param[in] pListener
      The object that shall be notified when new measurement data is available. This must not be
      null. If the listener has already been registered to the interface, it will not be
      registered a second time. Instead, an error will be indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.BLOCKIQ.CViComBlockIqInterface.GetSettings">
   Using the methods SetConfiguration()the internal settings of the measurement device are changed.
   This function reads the current configuration from the internal software and returns all those settings for read-only access.

   All settings have default values. By means of this function you can retrieve the Channel Power Receiver
   settings which apply at the moment for measurements to be started or during running measurements.

   @note
      The result, like all other results too, is only for reading. 
      To change settings the functions mentioned above shall be used.

   @return 
      a structure filled with the currently valid values or NULL if the call was not processed successfully.
   *
</member>
        <member name="M:RohdeSchwarz.ViCom.BLOCKIQ.CViComBlockIqInterface.SetConfiguration(RohdeSchwarz.ViCom.BLOCKIQ.SChannelSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   SChannelSettings contains the number of channels and the table of frequencies.
   The frequency or channel index is counted from zero and referenced in other data e.g. the measurement result.

   @param[in] rChannelSettings
      Contains the channel configuration that shall be measured. The configuration consists of a set frequency and
      bandwidths.

</member>
        <member name="M:RohdeSchwarz.ViCom.BLOCKIQ.CViComBlockIqInterface.GetBandwidthLimits">
   Limits for Parameter SChannelSettings::dwBandwidthInHz

   @return
   pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
   as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.BLOCKIQ.CViComBlockIqInterface.GetSampleRateLimits">
   Limits for Parameter SChannelSettings::dwSampleRateInHz

   @return
   pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
   as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.BLOCKIQ.CViComBlockIqInterface.GetMeasRateLimits">
   Limits for Parameter SChannelSettings::dwMeasRatePer1000Sec

   @return
   pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
   as long as no other interface method is called.

</member>
        <member name="T:RohdeSchwarz.ViCom.BLOCKIQ.CViComBlockIqInterface">
Interface to perform IQ data measurements.

Channel power measurements do not perform any RAT specific measurements like demodulation or others. 
In this way they can easily be adopted to new technologies and can be used to perform the first, generic
measurements.
\@attribute[type="interface" supportedDevices="TSME"]

</member>
        <member name="F:RohdeSchwarz.ViCom.BLOCKIQ.SMeasResult.ListMeasurementRates">
Measurement rate for all channels.

</member>
        <member name="F:RohdeSchwarz.ViCom.BLOCKIQ.SMeasResult.pIqData">
Actual iq data if pIqData is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.BLOCKIQ.SMeasResult.SIqData.pIqSamples">
Actual buffer for dwCountOfSamples iq samples. Use dIqGainInDB for conversion to RF signal power in dBm.
\@attribute[type="array" size="dwCountOfSamples" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.BLOCKIQ.SMeasResult.SIqData.dwCountOfSamples">
Number of elements in pfTransferFunction if pIqSamples is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.BLOCKIQ.SMeasResult.SIqData.dIqGainInDB">
Gain applied to the IQ samples. RF signal power in dBm = 10 * log10( re^2 + im^2 ) - dIqGainInDB.

</member>
        <member name="F:RohdeSchwarz.ViCom.BLOCKIQ.SMeasResult.SIqData.dActualSamplingRateInHz">
The actual sampling rate used for acquisition of iq values might differ a little bit from the 
specification in SChannelSettings::dwSampleRateInHz.

</member>
        <member name="F:RohdeSchwarz.ViCom.BLOCKIQ.SMeasResult.SIqData.bOverflow">
This is true if any of the IQ samples hit by an ADC overflow.
*
</member>
        <member name="F:RohdeSchwarz.ViCom.BLOCKIQ.SMeasResult.SIqData.u64DeviceTimeInNs">
The time when the signal was started to being measured on the device, with a higher resolution than the default PC clock. 
E.g. device time of the first IQ sample.
This time is relative to the last restart of the device.

</member>
        <member name="T:RohdeSchwarz.ViCom.BLOCKIQ.SMeasResult.SIqData">
Container for iq data.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.BLOCKIQ.SMeasResult.pFilterResponse">
Actual filter response used for acquisition of iq samples if pFilterResponse is not NULL.
Only provided with the very first measurement result (SMeasResult).

</member>
        <member name="F:RohdeSchwarz.ViCom.BLOCKIQ.SMeasResult.SFilterResponse.pTransferFunction">
Actual buffer for dwCountOfSamples filter values in frequency domain.
\@attribute[type="array" size="dwCountOfSamples" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.BLOCKIQ.SMeasResult.SFilterResponse.dwCountOfSamples">
Number of elements in pfTransferFunction if pfTransferFunction is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.BLOCKIQ.SMeasResult.SFilterResponse.bIsPeriodic">
If true filter values are priodic, e.g. value[k] = value[k + dwCountOfValues].

</member>
        <member name="F:RohdeSchwarz.ViCom.BLOCKIQ.SMeasResult.SFilterResponse.dFrequencySpacingInHz">
Spacing of the frequency grid, e.g. frequency resolution.

</member>
        <member name="T:RohdeSchwarz.ViCom.BLOCKIQ.SMeasResult.SFilterResponse">
Container for filter response functions.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.BLOCKIQ.SMeasResult.dwPcTimeStampInMs">
Measurement timestamp (PC tic) in ms.
May be used to synchronise IQ results with other measurement data in the system or to determine
the age of the IQ result = GetTickCount() - dwPcTimeStampInMs;

</member>
        <member name="T:RohdeSchwarz.ViCom.BLOCKIQ.SMeasResult">
The CWScan measurement result returned by CViComCWScanInterface::GetResult().
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.BLOCKIQ.SSettings">
This structure contains all the currently active settings stored in the ViCom CWScan interface, 
which are used to actually perform the measurement. 

All the content has either been set by related Set methods of the CViComCWScanInterface, or
they are still in their default values.

@note
    The values in this structures cannot be changed, they are read-only. Even if they
    are modified after the structure is requested by the GetSettings() method, the changes
    will not be reflected in the internal settings.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.BLOCKIQ.SChannelSettings.dwMeasRatePer1000Sec">
The measurement rate. For default value and range see CViComIqInterface::GetMeasRateLimits().

</member>
        <member name="F:RohdeSchwarz.ViCom.BLOCKIQ.SChannelSettings.dwNofSamplesPerBlock">
Number of iq samples per measurement block.

</member>
        <member name="F:RohdeSchwarz.ViCom.BLOCKIQ.SChannelSettings.eDataFormat">
Data format of the iq samples.

</member>
        <member name="T:RohdeSchwarz.ViCom.BLOCKIQ.SChannelSettings.DataFormat">
Definition of data formats for IQ samples.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.BLOCKIQ.SChannelSettings.dwBandwidthInHz">
Measurement bandwidth in Hz.

</member>
        <member name="F:RohdeSchwarz.ViCom.BLOCKIQ.SChannelSettings.dwSampleRateInHz">
Sample rate in Hz. The default is to use a oversampling factor of 1.15, e.g.
SampleRateInHz = 1.15 * BandwidthInHz;

</member>
        <member name="F:RohdeSchwarz.ViCom.BLOCKIQ.SChannelSettings.dCenterFrequencyInHz">
Channel center frequency in Hz.

</member>
        <member name="F:RohdeSchwarz.ViCom.BLOCKIQ.SChannelSettings.dwFrontEndSelectionMask">
Receiver front end to be used by the scanner for this channel.
Iq tasks are not allowed to use multiple FE's.

</member>
        <member name="T:RohdeSchwarz.ViCom.BLOCKIQ.SChannelSettings">
This structure contains paramters to specify the block of iq data
which shall be measured.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.BLOCKIQ.etViComInterfaceVersion">
Data containers used for ViCom BLOCKIQ interface. Contains measurement configuration and result structures.

</member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderFastACD.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderFastACD.m_loader">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderFastACD.GetInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderFastACD.GetBasicInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderFastACD.SetSettings(RohdeSchwarz.ViCom.Net.SReceiverSettings)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderFastACD.Disconnect">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderFastACD.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComError@,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderFastACD.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderFastACD.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderFastACD.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderFastACD">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterface.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterface.GetType">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
@note
Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage, it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComLteInterface::GetResult() and vice versa.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst,System.UInt32)">
            <summary>
Issue a request to the Layer 3 Decoder to decode the PDU contained by rSL3DecoderRequest. If the data has been decoded successfully within the time given by dwTimeOutInMs, the method creates the SL3DecoderResult and the buffer within on the heap, fills in the Layer 3 Decoder result and returns a pointer to it.
</summary>
            <param name="rSL3DecoderRequest">
Contains the data that was the result of an WiMax measurement and holds the PDU data that shall be decoded.
</param>
            <param name="dwTimeOutInMs">
Unless specified, the default timeout value to use.
</param>
            <return>
one measurement result on the heap, if the function succeeded. Otherwise NULL. Attention: The returned pointer is only valid until this function is called again.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterface.GetSettings">
            <summary>
By means of the functions: Configuration() and SetMeasurementMode() internal settings of the WiMAX Scanner may be changed. The functions SelectReceiver() of CViComBasicInterface change basic settings. Except for frequency settings all other settings have default values. By means of this function you can retrieve the WiMAX Scanner settings which apply at the moment for measurements to be started or during running measurements. Note that the result, like all other results too, is only for reading. To change settings the functions mentioned above should be used.
</summary>
            <return>
pointer to a structure holding the current device settings. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterface.IssueDemodRequests(RohdeSchwarz.ViCom.Net.WIMAX.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary>
Use this function to issue commands (PDU requests, reset commands) for the BCH demodulator during measurement.
PDUs may be acquired for certain BTS. PDU demodulation for BTS or for channels may be reset.
</summary>
            <param name="rDemodRequests">
When the function is called, this pointer contains the request parameters. For details see SDemodRequests.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.WIMAX.SChannelSettings!System.Runtime.CompilerServices.IsConst,RohdeSchwarz.ViCom.Net.WIMAX.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary>
CViComWcdmaInterfaceData::SChannelSettings contains the count of channels or frequencies and the table of frequencies in MHz. The frequency or channel index is counted from zero and referenced in other data e.g. BCH demodulation settings. The selection of new frequencies causes default settings for the BCH demodulation.
Use this function to set the general BCH demodulation properties. Different sets of PDUs may be read from different BCH channels.
</summary>
            <param name="rChannelSettings">
Contains the definition which frequencies shall be measured.
SChannelSettings for a more detailed description on those settings.
</param>
            <param name="rDemodulationSettings">
Contains the definition which PDUs of BCH shall be measured.
SDemodulationSettings for a more detailed description on those settings.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterface.GetDemodThresholdLimits">
            <summary>
Limits for Parameter SDemodulationSettings::sCINRThresholdInDB100
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterface.GetMeasRateLimits">
            <summary>
Limits for Parameter SFrequencySettings::dwTraceMeasPer1000Sec
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterface.GetChannelCountLimits">
            <summary>
Limits for Parameter SChannelSettings::dwCount
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterface.GetBasicInterface">
            <summary>
The basic interface is a part of any application specific ViCom interface. It is used for different R&amp;S TSM applications. The purpose is to control basic R&amp;S TSM functions, which are not specific for a certain measurement. See CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterface.#ctor(RohdeSchwarz.ViCom.WIMAX.CViComWimaxInterface*)">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterface.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterface.m_converter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterface.m_nativeIf">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterface.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterface">
            <summary>
WiMax measurement module for ViCom.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.DataConverterCViComWimaxInterfaceData.Convert2M(RohdeSchwarz.ViCom.Technology.Type)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.DataConverterCViComWimaxInterfaceData.Convert2M(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.DataConverterCViComWimaxInterfaceData.Convert2M(RohdeSchwarz.ViCom.WIMAX.SMeasResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.DataConverterCViComWimaxInterfaceData.Convert2M(RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.DataConverterCViComWimaxInterfaceData.Convert2M(RohdeSchwarz.ViCom.WIMAX.SSettings!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.DataConverterCViComWimaxInterfaceData.Convert2M(RohdeSchwarz.ViCom.SRange&lt;System.Int16&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.DataConverterCViComWimaxInterfaceData.Convert2M(RohdeSchwarz.ViCom.SRange&lt;System.UInt32&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.DataConverterCViComWimaxInterfaceData.CleanUp(RohdeSchwarz.ViCom.WIMAX.SL3DecoderRequest*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.DataConverterCViComWimaxInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.WIMAX.SL3DecoderRequest*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.DataConverterCViComWimaxInterfaceData.CleanUp(RohdeSchwarz.ViCom.WIMAX.SDemodRequests*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.WIMAX.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.DataConverterCViComWimaxInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.WIMAX.SDemodRequests*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.WIMAX.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.DataConverterCViComWimaxInterfaceData.CleanUp(RohdeSchwarz.ViCom.WIMAX.SDemodulationSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.WIMAX.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.DataConverterCViComWimaxInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.WIMAX.SDemodulationSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.WIMAX.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.DataConverterCViComWimaxInterfaceData.CleanUp(RohdeSchwarz.ViCom.WIMAX.SChannelSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.WIMAX.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.DataConverterCViComWimaxInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.WIMAX.SChannelSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.WIMAX.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.DataConverterCViComWimaxInterfaceData.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.DataConverterCViComWimaxInterfaceData.Instance">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.DataConverterCViComWimaxInterfaceData.s_instance">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.DataConverterCViComWimaxInterfaceData">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.ICViComWimaxInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.ICViComWimaxInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
@note
Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage, it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComLteInterface::GetResult() and vice versa.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.ICViComWimaxInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst,System.UInt32)">
            <summary>
Issue a request to the Layer 3 Decoder to decode the PDU contained by rSL3DecoderRequest. If the data has been decoded successfully within the time given by dwTimeOutInMs, the method creates the SL3DecoderResult and the buffer within on the heap, fills in the Layer 3 Decoder result and returns a pointer to it.
</summary>
            <param name="rSL3DecoderRequest">
Contains the data that was the result of an WiMax measurement and holds the PDU data that shall be decoded.
</param>
            <param name="dwTimeOutInMs">
Unless specified, the default timeout value to use.
</param>
            <return>
one measurement result on the heap, if the function succeeded. Otherwise NULL. Attention: The returned pointer is only valid until this function is called again.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.ICViComWimaxInterface.GetSettings">
            <summary>
By means of the functions: Configuration() and SetMeasurementMode() internal settings of the WiMAX Scanner may be changed. The functions SelectReceiver() of CViComBasicInterface change basic settings. Except for frequency settings all other settings have default values. By means of this function you can retrieve the WiMAX Scanner settings which apply at the moment for measurements to be started or during running measurements. Note that the result, like all other results too, is only for reading. To change settings the functions mentioned above should be used.
</summary>
            <return>
pointer to a structure holding the current device settings. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.ICViComWimaxInterface.IssueDemodRequests(RohdeSchwarz.ViCom.Net.WIMAX.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary>
Use this function to issue commands (PDU requests, reset commands) for the BCH demodulator during measurement.
PDUs may be acquired for certain BTS. PDU demodulation for BTS or for channels may be reset.
</summary>
            <param name="rDemodRequests">
When the function is called, this pointer contains the request parameters. For details see SDemodRequests.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.ICViComWimaxInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.WIMAX.SChannelSettings!System.Runtime.CompilerServices.IsConst,RohdeSchwarz.ViCom.Net.WIMAX.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary>
CViComWcdmaInterfaceData::SChannelSettings contains the count of channels or frequencies and the table of frequencies in MHz. The frequency or channel index is counted from zero and referenced in other data e.g. BCH demodulation settings. The selection of new frequencies causes default settings for the BCH demodulation.
Use this function to set the general BCH demodulation properties. Different sets of PDUs may be read from different BCH channels.
</summary>
            <param name="rChannelSettings">
Contains the definition which frequencies shall be measured.
SChannelSettings for a more detailed description on those settings.
</param>
            <param name="rDemodulationSettings">
Contains the definition which PDUs of BCH shall be measured.
SDemodulationSettings for a more detailed description on those settings.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.ICViComWimaxInterface.GetDemodThresholdLimits">
            <summary>
Limits for Parameter SDemodulationSettings::sCINRThresholdInDB100
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.ICViComWimaxInterface.GetMeasRateLimits">
            <summary>
Limits for Parameter SFrequencySettings::dwTraceMeasPer1000Sec
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.ICViComWimaxInterface.GetChannelCountLimits">
            <summary>
Limits for Parameter SChannelSettings::dwCount
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.ICViComWimaxInterface.GetBasicInterface">
            <summary>
The basic interface is a part of any application specific ViCom interface. It is used for different R&amp;S TSM applications. The purpose is to control basic R&amp;S TSM functions, which are not specific for a certain measurement. See CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.ICViComWimaxInterface">
            <summary>
WiMax measurement module for ViCom.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterfaceDataProcessor.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.CViComWimaxInterfaceDataProcessor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.pMobPagAdv">
            <summary>
This is NULL if no MOB_PAG-ADV information is available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.pMobBshoRsp">
            <summary>
This is NULL if no MOB_BSHO-RSP information is available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.pMobBshoReq">
            <summary>
This is NULL if no MOB_BSHO-REQ information is available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.pMobNbrAdv">
            <summary>
This is NULL if no MOB_NBR-ADV information is available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.pRegRsp">
            <summary>
This is NULL if no REG-RSP information is available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.pRngRsp">
            <summary>
This is NULL if no RNG-RSP information is available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.pUcd">
            <summary>
This is NULL if no DCD information is available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.pDcd">
            <summary>
This is NULL if no DCD information is available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.pUlmap">
            <summary>
This is NULL if no DLMAP information is available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.pDlmap">
            <summary>
This is NULL if no DLMAP information is available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.pcPduText">
            <summary>
Pointer to a buffer containing the decoded PDU text, as zero terminated ASCII string.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.dwStringLength">
            <summary>
Number of decoding result text bytes in the buffer (incl. terminating '\0').
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.ePDU">
            <summary>
PDU contained.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobPagAdv.ListOfTlvs">
            <summary>
TLV entries.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobPagAdv.ListOfMsMacs">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobPagAdv.ListOfPagingGroupIDs">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobPagAdv.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobPagAdv.SMsMac.bActionCode">
            <summary>
Action code (last two LSB bits only)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobPagAdv.SMsMac.dwMacHash">
            <summary>
MS MAC Address hash. (3 bytes)
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobPagAdv.SMsMac.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobPagAdv.SMsMac">
            <summary>
&lt; MS MAC addresses
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobPagAdv.SPagingGroupID.wID">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobPagAdv.SPagingGroupID.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobPagAdv.SPagingGroupID">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobPagAdv">
            <summary>
&lt; MOB_PAG-ADV. Please refer to "6.3.2.3.51 MOB_PAG-ADV (BS broadcast paging) message" of the WiMAX spec.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobBsho.ListOfTlvs">
            <summary>
TLV entries.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobBsho.uBsho">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobBsho.bMode">
            <summary>
Mode 0b000: HO request 0b001: MDHO/FBSS request: Anchor BS update with CID update 0b010: MDHO/FBSS request: Anchor BS update without CID update 0b011: MDHO/FBSS request: Diversity set update with CID update 0b100: MDHO/FBSS request: Diversity set update without CID update 0b101: MDHO/FBSS request: Diversity set update with CID update for newly added BS 0b110: MDHO/FBSS request: Diversity set update with CID update and CQICH allocation for newly added BS 0b111: Reserved
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobBsho.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobBsho">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.mode6">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.mode5">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.mode4">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.mode3">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.mode2">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.mode1">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.mode0">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode6.ListOfCurrentBSs">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode6.ListOfSAIDs">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode6.ListOfCIDs">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode6.ListOfNewBSs">
            <summary>
&lt; If (Mode == 0b110)
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode6.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode6">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode5.ListOfCurrentBSs">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode5.ListOfNewBSs">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode5.ListOfSAIDs">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode5.ListOfCIDs">
            <summary>
&lt; If (Mode == 0b101)
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode5.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode5">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode4.ListOfCurrentBSs">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode4.ListOfNewBSs">
            <summary>
&lt; If (Mode == 0b100)
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode4.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode4">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode3.ListOfSAIDs">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode3.ListOfCIDs">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode3.ListOfCurrentBSs">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode3.ListOfNewBSs">
            <summary>
&lt; If (Mode == 0b011)
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode3.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode3">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode2.bTempBSID">
            <summary>
&lt; If (Mode == 0b010)
TEMP BSID of the recommended anchor BS.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode2.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode2">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode1.ListOfSAIDs">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode1.ListOfCIDs">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode1.bTempBSID">
            <summary>
&lt; If (Mode == 0b001)
TEMP BSID of the recommended anchor BS.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode1.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode1">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode0.ListOfRecommended">
            <summary>
&lt; If (Mode == 0b000)
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode0.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO.SMode0">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.UBSHO">
            <summary>
union UBSHO holds the contents for different modes.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SCurrentBS.bTempBSID">
            <summary>
Diversity set member ID assigned to this BS.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SCurrentBS.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SCurrentBS">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SNewBS.bTempBSID">
            <summary>
Diversity set member ID assigned to this BS.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SNewBS.barNeighborBSID">
            <summary>
&lt; New BS
Neighbor BSID
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SNewBS.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SNewBS">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SSAID.wID">
            <summary>
SAID.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SSAID.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SSAID">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SCID.wID">
            <summary>
CID.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SCID.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SCID">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SRecommended.bPreambleOrSubchannelIndex">
            <summary>
Preamble index/Subchannel Index.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SRecommended.barNeighborBSID">
            <summary>
&lt; Recommended
Neighbor BSID
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SRecommended.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SRecommended">
            <summary>
struct SRecommended ... SCurrentBS are elements of members of union UBSHO.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobNbrAdv.ListOfNeighbors">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobNbrAdv.bNNeighbors">
            <summary>
N_NEIGHBORS.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobNbrAdv.bTotalFragmentation">
            <summary>
Total Fragmentation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobNbrAdv.bFragmentationIndex">
            <summary>
Fragmentation Index.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobNbrAdv.bConfigurationChangeCount">
            <summary>
Configuration Change Count.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobNbrAdv.dwOperatorID">
            <summary>
Operator ID (Optional, present only if Skip-optional-fields-[0] == 0)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobNbrAdv.bSkipBitmap">
            <summary>
Skip-optional-fields bitmap.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobNbrAdv.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobNbrAdv.SNeighbor.ListOfTlvs">
            <summary>
TLV entries.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobNbrAdv.SNeighbor.bUCDConfigurationChangeCount">
            <summary>
UCD Configuration Change Count.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobNbrAdv.SNeighbor.bDCDConfigurationChangeCount">
            <summary>
DCD Configuration Change Count.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobNbrAdv.SNeighbor.bSchedulingServiceSupported">
            <summary>
Scheduling Service Supported (Optional, present only if Skip-optional-fields[3] == 0)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobNbrAdv.SNeighbor.bHOProcessOptimization">
            <summary>
HO Process Optimization (Optional, present only if Skip-optional-fields[2] == 0)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobNbrAdv.SNeighbor.bPreambleIndex">
            <summary>
Preamble Index/Subchannel Index.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobNbrAdv.SNeighbor.dwNeighborBSID">
            <summary>
Neighbor BSID (Optional, present only if Skip-optional-fields[1] == 0)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobNbrAdv.SNeighbor.bBsEirp">
            <summary>
BS EIRP (Optional, present only if the BS EIRP indicator in PHY profile ID is set)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobNbrAdv.SNeighbor.bFAIndex">
            <summary>
FA Index (Optional, present only if the FA index indicator in PHY profile ID is set)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobNbrAdv.SNeighbor.bPhyProfileID">
            <summary>
PHY Profile ID.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobNbrAdv.SNeighbor.bLength">
            <summary>
Length of message information including all fields.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobNbrAdv.SNeighbor.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobNbrAdv.SNeighbor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SMobNbrAdv">
            <summary>
&lt; MOB_NBR-ADV
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SRegRsp.ListOfTlvs">
            <summary>
TLV entries.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SRegRsp.bResponse">
            <summary>
Response. 0 = OK; 1 = Message authentication failure.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SRegRsp.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SRegRsp">
            <summary>
&lt; REG-RSP
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SRngRsp.ListOfTlvs">
            <summary>
TLV entries.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SRngRsp.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SRngRsp">
            <summary>
&lt; RNG-RSP
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUcd.ListOfTlvs">
            <summary>
TLV entries.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUcd.bRequestBackoffEnd">
            <summary>
Request Backoff End.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUcd.bRequestBackoffStart">
            <summary>
Request Backoff Start.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUcd.bRangingBackoffEnd">
            <summary>
Ranging Backoff End.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUcd.bRangingBackoffStart">
            <summary>
Ranging Backoff Start.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUcd.bConfigurationChangeCount">
            <summary>
Configuration Change Count.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUcd.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUcd">
            <summary>
&lt; UCD
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDcd.ListOfTlvs">
            <summary>
TLV entries.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDcd.bConfigurationChangeCount">
            <summary>
Configuration Change Count.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDcd.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDcd">
            <summary>
&lt; DCD
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUlmap.ListOfUlmapIEs">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUlmap.bNoOfULSymbols">
            <summary>
No. OFDMA symbols.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUlmap.dwAllocationStartTime">
            <summary>
Allocation Start Time.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUlmap.bUCDCount">
            <summary>
Uplink Channel Descriptor count.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUlmap.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUlmap.SUlmapIE.uIE">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUlmap.SUlmapIE.bUIUC">
            <summary>
UIUC. [8.4.5.4.1 UIUC allocation] in WiMAX spec. 0 Fast-feedback channel 1Â–10 Different burst profiles (Data Grant Burst Type) 11 Extended UIUC 2 IE 12 CDMA BR, CDMA ranging 13 PAPR reduction allocation, safety zone, Sounding Zone 14 CDMA Allocation IE 15 Extended UIUC @note
Only CDMA BR, CDMA ranging IEs (for UIUC equals to 12) are currently supported.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUlmap.SUlmapIE.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUlmap.SUlmapIE.UIE.ranging">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUlmap.SUlmapIE.UIE.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUlmap.SUlmapIE.UIE">
            <summary>
Declare a union to keep code-level compatibility when more IE types are supported in the future.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUlmap.SUlmapIE.SIERanging.bDedicatedRangingIndicator">
            <summary>
Dedicated ranging indicator.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUlmap.SUlmapIE.SIERanging.bRangingMethod">
            <summary>
Ranging Method.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUlmap.SUlmapIE.SIERanging.bNoOfSubchannels">
            <summary>
No. Subchannels.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUlmap.SUlmapIE.SIERanging.bNoOfULSymbols">
            <summary>
No. OFDMA Symbols.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUlmap.SUlmapIE.SIERanging.bSubchannelOffset">
            <summary>
Subchannel offset.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUlmap.SUlmapIE.SIERanging.bSymbolOffset">
            <summary>
OFDMA Symbol offset.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUlmap.SUlmapIE.SIERanging.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUlmap.SUlmapIE.SIERanging">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUlmap.SUlmapIE">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SUlmap">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.ListOfDlmapIEs">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.bNoOfIEs">
            <summary>
Number of IEs inside this DL-MAP message.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.bNoOfDLSymbols">
            <summary>
Number of OFDMA symbols.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.bDCDCount">
            <summary>
Downlink Channel Descriptor count.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.dwFrameNumber">
            <summary>
Frame number.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.bFrameDuration">
            <summary>
@note
Please refer to spec 802.16-2009: 8.4.5.2 Frame duration codes. Frame duration code: 0b0000 = Reserved 0b0001 = 2.0 ms 0b0010 = 2.5 ms 0b0011 = 4 ms 0b0100 = 5 ms 0b0101 = 8 ms 0b0110 = 10 ms 0b0111 = 12.5 ms 0b1000 = 20 ms 0b1001 - 0b1111= Reserved
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.dwOperatorID">
            <summary>
Operator ID. Most significant 3 bytes of the Base Station ID. In case of a compressed DL-MAP, only the least significant byte of this 3 byte Operator ID is filled in.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.bSectorID">
            <summary>
Sector ID. Least significant byte of Base Station ID.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.barBaseStationID">
            <summary>
Base Station ID. 0xFFFFFFFFFFFF if unknown.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.SDlmapIE.uIE">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.SDlmapIE.bDIUC">
            <summary>
DIUC. [8.4.5.3.1 DIUC allocation] in WiMAX spec. 0Â–12 Different burst profiles 13 Gap/PAPR reduction 14 Extended-2 DIUC IE 15 Extended DIUC @note
, Only burst profiles IEs (for DIUC between 0 and 12) are currently supported.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.SDlmapIE.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.SDlmapIE.UIE.burst">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.SDlmapIE.UIE.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.SDlmapIE.UIE">
            <summary>
Declare a union to keep code-level compatibility when more IE types are supported in the future.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.SDlmapIE.SIEBurstProfile.bRepetitionCoding">
            <summary>
Repetition Coding Indication. 0b00: No repetition coding 0b01: Repetition coding of 2 used 0b10: Repetition coding of 4 used 0b11: Repetition coding of 6 used
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.SDlmapIE.SIEBurstProfile.bNoOfSubchannels">
            <summary>
No. Subchannels.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.SDlmapIE.SIEBurstProfile.bNoOfDLSymbols">
            <summary>
No. OFDMA Symbols.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.SDlmapIE.SIEBurstProfile.bBoosting">
            <summary>
000: Normal (not boosted) 001: +6dB 010: Â–6dB 011: +9dB 100: +3dB 101: -3dB 110: Â–9dB 111: Â–12dB
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.SDlmapIE.SIEBurstProfile.bSubchannelOffset">
            <summary>
Subchannel offset.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.SDlmapIE.SIEBurstProfile.bSymbolOffset">
            <summary>
OFDMA Symbol offset.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.SDlmapIE.SIEBurstProfile.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.SDlmapIE.SIEBurstProfile">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap.SDlmapIE">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.SDlmap">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.STlv.szValue">
            <summary>
NULL-terminated string describing the value contents.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.STlv.pValue">
            <summary>
pValue is a pointer to the value contents. It normally points to an array of bytes. There are several exceptions:-For DCD/UCD PDU, if the type of the TLV is Downlink/Uplink Burst Profile (bType == 1), pValue actually points to the above SDownlinkBurstProfile/SUplinkBurstProfile structure. The user needs a cast to the appropriate structure type.
-If the value part of the TLV is not a "simple" value in the L3 decode tree, i.e. It contains sub-fields (This can be examined through the pcStringPDU string), Then this pValue will be NULL and szValue will contain the text description of the value.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.STlv.dwLength">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.STlv.szType">
            <summary>
NULL-terminated string describing the type.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.STlv.bType">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.STlv.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.STlv.SUplinkBurstProfile.pTlv">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.STlv.SUplinkBurstProfile.bUIUC">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.STlv.SUplinkBurstProfile.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.STlv.SUplinkBurstProfile">
            <summary>
Uplink Burst Profile is special because it contains an embedded TLV.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.STlv.SDownlinkBurstProfile.pTlv">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.STlv.SDownlinkBurstProfile.bDIUC">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.STlv.SDownlinkBurstProfile.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.STlv.SDownlinkBurstProfile">
            <summary>
Downlink Burst Profile is special because it contains an embedded TLV.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult.STlv">
            <summary>
This struct holds a TLV entry. The maximum length can be represented is 4294967295 (0xFFFFFFFF), which is large enough for practical cases.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderResult">
            <summary>
Result from the Layer 3 Decoder. The string returned via this structure is indented text describing the contents of one completely decoded PDU.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderRequest.pbBitStream">
            <summary>
Pointer to a buffer containing the PDU bits. The first bit is stored in bit 7 of pbBitStream[0]. If m_dwBitCount is not a multiple of 8, there are remaining bits, which shall be ignored.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderRequest.dwBitCount">
            <summary>
Number of bits the PDU consists of.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderRequest.dwFlags">
            <summary>
Flags for additional information about the PDU contained.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderRequest.ePDU">
            <summary>
PDU that has been demodulated,.
etMacManagementPDU.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderRequest.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SL3DecoderRequest">
            <summary>
Request data container for the Layer 3 Decoder. It is used to decode a demodulation result into a human-readable structure. The values from SDemodResult are normally used for input data.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.ListMeasurementRates">
            <summary>
List of measurement rates rates and other values in relation to the measurement rate for one or more time intervals of measurement rate calculation. The measurement rate is the ratio of all measurements of the same type of measurement at the time the measurement signals have been picked from the air. So the time of arrival at the host application is not used. And equal measurements at different RF channels are put together.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.pDemodResult">
            <summary>
Pointer to demodulation result. If NULL, no demodulation result is present.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.pDlfp">
            <summary>
This is NULL if no DLFP information is available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.ListOfCirs">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.ListOfSegmentMeas">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.dwFrameRateInHz">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.dwCpRatio">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.dwFftSize">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.dwNomBandwidthInHz">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.dCenterFreqInHz">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.dwPcTimeStampInMs">
            <summary>
PC local time when the signal was measured (or was started to being measured) on the device.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.dwChannelIndex">
            <summary>
The channel to which all the data relates is specified using this index. The index refers to the position in the SChannelSettings::aTableOfFrequencySetting array.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDemodResult.u64ArrivalTimeInNs">
            <summary>
Start time of the radio frame which contained the MAC Management PDU. If the PDU was assembled from multiple fragments, it's the arrival time of the first radio frame. Concatenated PDUs are provided with the same arrival time.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDemodResult.pbBitStream">
            <summary>
Pointer to (dwBitCount + 7) / 8 bytes which contain the PDU bits. The first bit is stored in the bit 7 of pbBitStream[0]. If dwBitCount is not a multiple of 8, the trailing bits in the last byte pbBitStream[(dwBitCount + 7) / 8 - 1] shall be ignored.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDemodResult.dwBitCount">
            <summary>
Number of bits the PDU consists of.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDemodResult.dwFlags">
            <summary>
Flags for additional information about the PDU contained. The flags depend on the technology.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDemodResult.dwPDU_FLAG_NO_HEADER">
            <summary>
The PDU has no header, i.e. it is only payload. E.g. WIMAX MAC Management Message Payload.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDemodResult.dwPDU_FLAG_MSG_FRAGMENT">
            <summary>
The PDU contains a fragment of a message, e.g. fragment of a WIMWAX DCD or UCD message.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDemodResult.dwPDU_FLAG_SHORT_HEADER">
            <summary>
The message uses a special short headers, e.g. GSM RR Short Header Messages.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDemodResult.dwPDU_FLAG_COMPRESSED">
            <summary>
The PDU contains compressed DL/UL-MAPs.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDemodResult.dwPDU_FLAG_NOT_SET">
            <summary>
Flags constants.
"Normal" PDU.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDemodResult.ePDU">
            <summary>
PDU that has been demodulated,.
etMacManagementPDU.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDemodResult.dwOperatorID">
            <summary>
Operator ID. Most significant 3 bytes of the Base Station ID. In case of a compressed DL-MAP, only the least significant byte of this 3 byte Operator ID is filled in.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDemodResult.bSectorID">
            <summary>
Sector ID. Least significant byte of Base Station ID.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDemodResult.barBaseStationID">
            <summary>
Base Station ID. 0xFFFFFFFFFFFF if unknown. The Base Station ID (BS ID) is a 48-bit (i.e 6 byte) long field identifying the BS. The barBaseStationID array is filled beginning with the most significant byte at index 0 down to the least significant byte at index 5. Example: BS ID = 0x010203040506 barBaseStationID[0] = 0x01 barBaseStationID[1] = 0x02 barBaseStationID[2] = 0x03 barBaseStationID[3] = 0x04 barBaseStationID[4] = 0x05 barBaseStationID[5] = 0x06 This leads to bSectorID = 0x06 in case of an uncompressed DL-MAP dwOperatorID = 0x00010203 and in case of a compressed MAP dwOperatorID = 0x00000003
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDemodResult.bSegment">
            <summary>
Segment number (0, 1 2). 0xFF if invalid.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDemodResult.bPreambleIndex">
            <summary>
Preamble index, value 0 - 131. 0xFFFF if invalid.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDemodResult.dwBtsId">
            <summary>
Unique BTS ID provided by the demodulator. Each time the demodulator is not sure whether the signal it could demodulate belongs to an already known BTS, it sets a new identifier here. I.e. the same BTS could have multiple dwBtsIds, but each dwBtsId relates always to a single BTS.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDemodResult.dwTimeStampInMs">
            <summary>
The time stamp of the PDU result retrieval.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDemodResult.dwChannelIndex">
            <summary>
The channel index from which channel the PDU result is retrieved.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDemodResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDemodResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDemodResult">
            <summary>
BCH demodulator results
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDlfp.bDlmapLength">
            <summary>
Length of the DL-MAP in bytes.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDlfp.bDlmapCoding">
            <summary>
Indicates the FEC encoding code used for the DL-MAP in case of OFDMA DL Frame. Prefix format for all FFT sizes except 128
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDlfp.bRepetitionCoding">
            <summary>
Indicates the repetition code used for the DL-MAP.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDlfp.bSubchannelGroups">
            <summary>
Sub-channel group. Bitmask identifying the subchannel groups present. Bit0 for group 0 .... Bit5 for group 5. Default 0
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDlfp.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDlfp.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SDlfp">
            <summary>
Downlink Frame Prefix.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.ListOfPeaks">
            <summary>
List of CIR peaks found in the signal.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.pPowerDelayProfile">
            <summary>
Optional power profile measurement further detailing the CIR measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.u64DeviceTimeInNs">
            <summary>
Time when the first CIR sample has been measured, related to the device internal clock.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.dwPcTimeStampInMs">
            <summary>
Calculated time of the first CIR sample based on start of the.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.SPeak.fDelayInSec">
            <summary>
Delay in seconds related to the first sample. This normally provides a higher resolution than the sampling time from the power delay measurement results (see above).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.SPeak.sDopplerInHz">
            <summary>
Main part of a Doppler frequency. Is not necessarily available and may be set to SDefs::INVALID_SHORT_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.SPeak.fPeakPowerInDBm">
            <summary>
The actual power of the impulse peak.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.SPeak.fInbandPowerInDBm">
            <summary>
Inband power of the signal from which the CIR was extracted.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.SPeak.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.SPeak.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.SPeak">
            <summary>
Contains information about the single peaks in the Channel Impulse Response.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.SPowerDelayProfile.PowerDelayProfileValues">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.SPowerDelayProfile.fSamplingTimeInSec">
            <summary>
Sampling time for a CIR measurement. This is also the time between two CIR measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.SPowerDelayProfile.fNoiseFloorInDBm">
            <summary>
Estimated noise level. Power values which are in the vicinity of this value can be considered to be caused or influenced by noise.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.SPowerDelayProfile.dCINR">
            <summary>
Signal to interference and noise ratio of the preamble of the Wimax basestation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.SPowerDelayProfile.fAggregatePowerInDBm">
            <summary>
Power of the preamble of a certain Wimax cell, characterized by it's Cell ID and Segment ID. It excludes noise and interference.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.SPowerDelayProfile.fInbandPowerInDBm">
            <summary>
Total power, including noise and interference, measured at the same time and frequency as the preamble.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.SPowerDelayProfile.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.SPowerDelayProfile.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.SPowerDelayProfile.SPowerDelayProfileValues.psValuesInDBm100">
            <summary>
Array that holds dwCountOfValues elements, each specifying a power delay value in 100th dBm (e.g. a value of -6719 is to be read as -67.19 dBm). Can be SDefs::INVALID_SHORT_VALUE when a value could not be measured
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.SPowerDelayProfile.SPowerDelayProfileValues.dwCountOfValues">
            <summary>
number of elements available in the psValuesInDBm100 array
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.SPowerDelayProfile.SPowerDelayProfileValues.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.SPowerDelayProfile.SPowerDelayProfileValues.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.SPowerDelayProfile.SPowerDelayProfileValues">
            <summary>
A (possibly empty) set of power delay values. This list contains the CIR power values, where each power value has been measured fSamplingTimeInSec seconds after the previous one. The first sample in here has been measured at u64DeviceTimeInNs resp. dwPcTimeStampInMs.
The list may contain invalid values, which denote that at that specific time there was no CIR measurement possible.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir.SPowerDelayProfile">
            <summary>
Structure containing the actual CIR measurement results combined with delay information.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SCir">
            <summary>
Optional data container that holds information about the channel impulse responses measured in this cycle. The CIR consists of an optional power delay profile, and a list of peaks.
Channel impulse responses are calculated from a 100ms block.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SSegmentMeas.dwCirIndex">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SSegmentMeas.bIdCell">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SSegmentMeas.bSegment">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SSegmentMeas.bPreambleIndex">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SSegmentMeas.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SSegmentMeas.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult.SSegmentMeas">
            <summary>
Segment measurement results.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SMeasResult">
            <summary>
The WiMax measurement result for a single channel returned by GetResult().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SSettings.DemodulationSettings">
            <summary>
Configuration of the BCH demodulation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SSettings.ChannelSettings">
            <summary>
The set of frequencies that shall be measured.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SSettings.dwReceiverIndex">
            <summary>
Index to SConnectedReceiverTable::Receiver of the currently selected receiver.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SSettings">
            <summary>
This structure holds all the measurement setup that is configured in the ViCom WiMax scanner module. It is a result of the GetSettings() method.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SDemodulationSettings.sStartMeasurementRequests">
            <summary>
The requests for the general start measurement command.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SDemodulationSettings.dwFrontEndSelectionMask">
            <summary>
Receiver front end to be used by the demodulator for this channel. If no demodulation shall be provided, this shall be set to 0. Demodulation tasks are not allowed to contain multiple FE's.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SDemodulationSettings.sCINRThresholdInDB100">
            <summary>
CINR threshold for demodulation, given in 1/100 dB. For default value and range see GetDemodThresholdLimits().
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SDemodulationSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SDemodulationSettings">
            <summary>
This structure is used to configure the BCH demodulation process.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SDemodRequests.pDemodRequests">
            <summary>
Pointer to an array of demodulation requests. Must be NULL, if no demodulation shall be done.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SDemodRequests.dwCountOfRequests">
            <summary>
Number of demodulation requests. Must be 0, if no demodulation shall be done.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SDemodRequests.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SDemodRequests.SDemodRequest.dwBtsId">
            <summary>
Unique BTS ID provided by the demodulator. This ID is used by the BCHDemodulator to demodulate a specific BTS, when the bDemodulationMode is set to ON_CMD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SDemodRequests.SDemodRequest.dwRepetitionTimeOutInMs">
            <summary>
Repetition time out in ms (only used if bDemodulationMode == REPETITION).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SDemodRequests.SDemodRequest.eDemodulationMode">
            <summary>
The mode used for BCH demodulation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SDemodRequests.SDemodRequest.ePDU">
            <summary>
The PDU to be demodulated.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SDemodRequests.SDemodRequest.dwChannelIndex">
            <summary>
Index of the frequency in SChannelSettings::aTableOfFrequencySetting.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SDemodRequests.SDemodRequest.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SDemodRequests.SDemodRequest">
            <summary>
There must be one instance of this structure for each BCH demodulation request, therefore different PDUs can be measured on different channels.
Example for start measurement: On the first channel DL-MAP shall be decoded, on the the second channel UL-MAP and DCD shall be decoded. UL-MAP shall be decoded repeatedly every 10 seconds (10000 ms) and DCD shall be decoded on demand. This requires three structures containing the following parameter sets: (0,&lt;sp&gt;&lt;/sp&gt;DL_MAP,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(1,&lt;sp&gt;&lt;/sp&gt;UL_MAP,&lt;sp&gt;&lt;/sp&gt;REPETITION,&lt;sp&gt;&lt;/sp&gt;10000,&lt;sp&gt;&lt;/sp&gt;0)(1,&lt;sp&gt;&lt;/sp&gt;DCD,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;ON_CMD,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;0) Example during measurement: On channel 0 PDU demodulation shall be completely reset for the BTS identified by ID 3 and on the the second channel DL-MAP shall be decoded for the BTS identified by ID 4 with a timeout for the request of 1 sec (1000ms): (0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;CHANNEL_RESET,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;3)(1,&lt;sp&gt;&lt;/sp&gt;DL_MAP,&lt;sp&gt;&lt;/sp&gt;ON_CMD,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;1000,&lt;sp&gt;&lt;/sp&gt;4) Note that you are responsible to manage the memory when you use SetDemodulationSettings(). Note: All parameters which are not necessary for a certain request shall be set to 0.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SDemodRequests">
            <summary>
This structure is used to configure PDU requests. It is used in start measurement requests and it is used to issue BCH demodulation requests during measurement, e.g. SIB requests on demand or to reset SIB demodulation.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.DemodMode.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.DemodMode.Type.CHANNEL_RESET">
            <summary>
Delete all demodulation results for all BTS at the specified channel. Restart demodulation for this channel as specified in the command. This can be requested only during a running measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.DemodMode.Type.BTS">
            <summary>
Demodulate the PDU only for a specific BTS. The BTS is specified in the S_PDU_Request::dwBtsId field. This demodulation mode is only valid during a running measurement (i.e. on demand).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.DemodMode.Type.REPETITION">
            <summary>
After each successful demodulation a new one will be started automatically after the repetition time specified in wRepetitionDelayIn100ms. This is only to be used in start measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.DemodMode.Type.ON_CMD">
            <summary>
The PDU is only demodulated if an extra command for demodulation requests the demodulation. Only to be used in start measurement.
If this is used, then no PDU is decoded until it is explicitly requested. The method IssueDemodRequests can be used for that purpose.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.DemodMode.Type.ONCE">
            <summary>
Demodulate the PDU for each BTS at the specified channel only once. This is only to be used in start measurement.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.DemodMode.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.DemodMode">
            <summary>
This enumeration defines modes for the BCH demodulation. Use this in the SDemodRequest structure to specify when the demodulation of this PDU shall be done.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.Pdu.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.Pdu.Type.UNKNOWN">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.Pdu.Type.MOB_PAG_ADV">
            <summary>
Decode MOB_PAG-ADV.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.Pdu.Type.MOB_BSHO_RSP">
            <summary>
Decode MOB_BSHO-RSP.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.Pdu.Type.MOB_BSHO_REQ">
            <summary>
Decode MOB_BSHO-REQ.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.Pdu.Type.MOB_NBR_ADV">
            <summary>
Decode MOB_NBR-ADV.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.Pdu.Type.REG_RSP">
            <summary>
Decode REG-RSP.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.Pdu.Type.RNG_RSP">
            <summary>
Decode RNG-RSP.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.Pdu.Type.UL_MAP">
            <summary>
Decode UL-MAP.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.Pdu.Type.DL_MAP">
            <summary>
Decode DL-MAP.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.Pdu.Type.DCD">
            <summary>
Decode DCD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.Pdu.Type.UCD">
            <summary>
Decode UCD.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.Pdu.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.Pdu">
            <summary>
BCH demodulation This enumeration defines the MAC Management PDU types. Use this in the S_PDU_Request structure to specify which PDUs inside the MAC Management message shall be decoded.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SChannelSettings.pTableOfFrequencySetting">
            <summary>
This array of structures can be filled with single frequency configurations. Only dwCount entries from this table will actually be used.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SChannelSettings.dwFrontEndSelectionMask">
            <summary>
Receiver front end to be used by the scanner for this channel. Scanner tasks are not allowed to contain multiple FE's.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SChannelSettings.dwCount">
            <summary>
Number of frequency configurations that shall be used from the pTableOfFrequencySetting to perform the measurement tasks. For value range see GetChannelCountLimits().
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SChannelSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SChannelSettings">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.dwTraceMeasPer1000Sec">
            <summary>
As soon as a signal was found for a certain BS, then it is traced with the given rate. This will appear as a measurement rate for the scanner. For one measurement we need the receiver for about (5 + 32  1000 / SMeasResult::dwFrameRateInHz) milliseconds. E.g. for 50Hz frame rate we need 645ms. So we can measure this channel with not more than 1500mHz (1.5 measurements per second) if we have full receiver capacity for this channel. So a maximum MeasRate for the trace measurement can be achieved when the WiMAX Frame Rate is 500Hz. Then we can get 14.5Hz (dwTraceMeasPer1000Sec = 14500) in case that the receiver time used for synchronization is neglected. For default value and range see GetMeasRateLimits().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.dwSyncTrialsPer1000Sec">
            <summary>
Rate to perform a sync regarding the given constrains. The unit is per 1000 seconds. For one measurement, we need the receiver for about (5 + 2000 / dwFrameRateRangeMinInHz) milliseconds. This is the measurement rate used for sync scanning. The resources used for sync scanning cannot be used for measurement scanning. If we measure a network that doesn't change, this rate could be very low. If we expect changes in the network, we have to set this value to an appropriate higher value. dwSyncTrialsPer1000Sec = 1000 means, one sync trial per second, which is high enough for a drive test.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.dwOptSyncTrialsPer1000Sec">
            <summary>
Normal rate for 'dwSyncTrialsPer1000Sec', i.e. 1/sec.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.dFrameDelayToPpsInSec">
            <summary>
Delay of the first WiMAX frame after an PPS. It is only used if bGpsPpsSync is TRUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.bUseForRecSync">
            <summary>
TRUE if the measurement results of this channel shall be used for synchronization of the receiver. If FALSE then the measurement results on this channel are ignored for the receiver sync.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.bGpsPpsSync">
            <summary>
TRUE if all signals on the channel are assumed synchronized to the PPS of the GPS.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.dwFrameRateRangeMaxInHz">
            <summary>
Maximum frame repetition rate in Hertz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.dwFrameRateRangeMinInHz">
            <summary>
Minimum frame repetition rate in Hertz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.dwCpRatioMask">
            <summary>
The corresponding Ratios of Cyclic Prefix to useful symbol time. At least one bit shall be set.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.dwFftSizeMask">
            <summary>
FFT Size mask matching different FFT Size. At least one bit shall be set.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.dwNomBandWidthInHz">
            <summary>
The nominal bandwidth in Hz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.dwMaxPossibleNomBandWidthInHz">
            <summary>
Maximum possible nominal bandwidth (inclusive).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.dwMinPossibleNomBandWidthInHz">
            <summary>
Minimum possible nominal bandwidth (inclusive).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.dFreqInHz">
            <summary>
The center frequency of the channel in Hz.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.FrameRate.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.FrameRate.Type.HZ_500">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.FrameRate.Type.HZ_400">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.FrameRate.Type.HZ_250">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.FrameRate.Type.HZ_200">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.FrameRate.Type.HZ_125">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.FrameRate.Type.HZ_100">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.FrameRate.Type.HZ_80">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.FrameRate.Type.HZ_50">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.FrameRate.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.FrameRate">
            <summary>
Possible Frame Rates.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.CpRatio.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.CpRatio.Type.RATIO_1_BY_ALL">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.CpRatio.Type.RATIO_1_BY_32">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.CpRatio.Type.RATIO_1_BY_16">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.CpRatio.Type.RATIO_1_BY_8">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.CpRatio.Type.RATIO_1_BY_4">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.CpRatio.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.CpRatio">
            <summary>
Possible CP Ration Masks.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.FftSize.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.FftSize.Type.ALL">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.FftSize.Type.BIN_2048">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.FftSize.Type.BIN_1024">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.FftSize.Type.BIN_512">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.FftSize.Type.BIN_128">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.FftSize.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.FftSize">
            <summary>
Possible FFT Size Masks.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.BandWidth.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.BandWidth.Type.MHZ_10">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.BandWidth.Type.MHZ_8_75">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.BandWidth.Type.MHZ_7">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.BandWidth.Type.MHZ_5">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.BandWidth.Type.MHZ_3_5">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.BandWidth.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting.BandWidth">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WIMAX.SFrequencySetting">
            <summary>
Configuration of the measurement that is performed on one single frequency.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderWimax.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderWimax.m_loader">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderWimax.GetInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderWimax.GetBasicInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderWimax.SetSettings(RohdeSchwarz.ViCom.Net.SReceiverSettings)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderWimax.Disconnect">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderWimax.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComError@,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderWimax.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderWimax.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderWimax.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderWimax">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.WIMAX.CViComWimaxInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.WIMAX.SMeasResult&gt;*)">
   Unregister a formerly registered ScannerData listener to remove it from the list of objects that
   shall get notification about new measurement data.

   @param[in] pListener
      The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered
      objects, an error is indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.WIMAX.CViComWimaxInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.WIMAX.SMeasResult&gt;*)">
   Register a ScannerData listener that will be notified when new data is available. Note that it is
   important to Unregister the listener again once it is getting deleted, to avoid crashes.

   @note Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage,
   it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComLteInterface::GetResult() and vice versa.

   @param[in] pListener
      The object that shall be notified when new measurement data is available. This must not be
      null. If the listener has already been registered to the interface, it will not be
      registered a second time. Instead, an error will be indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.WIMAX.CViComWimaxInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.WIMAX.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsLong)">
   Issue a request to the Layer 3 Decoder to decode the PDU contained by rSL3DecoderRequest.
   If the data has been decoded successfully within the time given by dwTimeOutInMs,
   the method creates the SL3DecoderResult and the buffer within on the heap, fills in the Layer 3 Decoder result
   and returns a pointer to it.

   @param[in] rSL3DecoderRequest
   Contains the data that was the result of an WiMax measurement and holds the PDU data that shall be decoded.

   @param[in] dwTimeOutInMs
      Unless specified, the default timeout value to use.

   @return
   one measurement result on the heap, if the function succeeded. Otherwise NULL.
   Attention: The returned pointer is only valid until this function is called again.

</member>
        <member name="M:RohdeSchwarz.ViCom.WIMAX.CViComWimaxInterface.GetSettings">
   By means of the functions: Configuration() and SetMeasurementMode() internal settings
   of the WiMAX Scanner may be changed. The functions SelectReceiver() of CViComBasicInterface 
   change basic settings. Except for frequency settings all other settings have default values.
   By means of this function you can retrieve the WiMAX Scanner settings which apply at the moment for measurements to be started
   or during running measurements.
   Note that the result, like all other results too, is only for reading.
   To change settings the functions mentioned above should be used.

   @return
   pointer to a structure holding the current device settings. In case of failure, NULL. The returned value is valid
   as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.WIMAX.CViComWimaxInterface.IssueDemodRequests(RohdeSchwarz.ViCom.WIMAX.SDemodRequests!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   Use this function to issue commands (PDU requests, reset commands) for the BCH demodulator during measurement.

   PDUs may be acquired for certain BTS. PDU demodulation for BTS or for channels may be reset.

   @param[in] rDemodRequests
   When the function is called, this pointer contains the request parameters.
   For details see SDemodRequests.

</member>
        <member name="M:RohdeSchwarz.ViCom.WIMAX.CViComWimaxInterface.SetConfiguration(RohdeSchwarz.ViCom.WIMAX.SChannelSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.WIMAX.SDemodulationSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   CViComWcdmaInterfaceData::SChannelSettings contains the count of channels or frequencies and the table of frequencies in MHz.
   The frequency or channel index is counted from zero and referenced in other data e.g. BCH demodulation settings.
   The selection of new frequencies causes default settings for the BCH demodulation.

   Use this function to set the general BCH demodulation properties.
   Different sets of PDUs may be read from different BCH channels.

   @param[in] rChannelSettings
   Contains the definition which frequencies shall be measured. @see SChannelSettings for
   a more detailed description on those settings.

   @param[in] rDemodulationSettings
   Contains the definition which PDUs of BCH shall be measured. @see SDemodulationSettings for
   a more detailed description on those settings.

</member>
        <member name="M:RohdeSchwarz.ViCom.WIMAX.CViComWimaxInterface.GetDemodThresholdLimits">
   Limits for Parameter SDemodulationSettings::sCINRThresholdInDB100

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.WIMAX.CViComWimaxInterface.GetMeasRateLimits">
   Limits for Parameter SFrequencySettings::dwTraceMeasPer1000Sec

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.WIMAX.CViComWimaxInterface.GetChannelCountLimits">
   Limits for Parameter SChannelSettings::dwCount

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.CViComWimaxInterface">
WiMax measurement module for ViCom.
\@attribute[type="interface" supportedDevices="TSME"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.SMobBsho.bMode">
Mode
0b000: HO request
0b001: MDHO/FBSS request: Anchor BS update with CID update
0b010: MDHO/FBSS request: Anchor BS update without CID update
0b011: MDHO/FBSS request: Diversity set update with CID update
0b100: MDHO/FBSS request: Diversity set update without CID update
0b101: MDHO/FBSS request: Diversity set update with CID update for newly added BS
0b110: MDHO/FBSS request: Diversity set update with CID update and CQICH allocation for newly added BS
0b111: Reserved

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.SRecommended">
struct SRecommended ... SCurrentBS are elements of members of union UBSHO.
   \@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.SMobNbrAdv.SNeighbor">
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.SMobNbrAdv">
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.SRegRsp">
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.SRngRsp">
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.SUcd">
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.SDcd">
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.SUlmap.SUlmapIE.SIERanging">
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.SUlmap.SUlmapIE.bUIUC">
UIUC. [8.4.5.4.1 UIUC allocation] in WiMAX spec.
0    Fast-feedback channel
1–10 Different burst profiles (Data Grant Burst Type)
11   Extended UIUC 2 IE
12   CDMA BR, CDMA ranging
13   PAPR reduction allocation, safety zone, Sounding Zone
14   CDMA Allocation IE
15   Extended UIUC
@note Only CDMA BR, CDMA ranging IEs (for UIUC equals to 12) are currently supported.

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.SUlmap.SUlmapIE">
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.SUlmap">
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.SDlmap.SDlmapIE.SIEBurstProfile.bRepetitionCoding">
Repetition Coding Indication.
0b00: No repetition coding
0b01: Repetition coding of 2 used
0b10: Repetition coding of 4 used
0b11: Repetition coding of 6 used

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.SDlmap.SDlmapIE.SIEBurstProfile.bBoosting">
000: Normal (not boosted)
001: +6dB
010: –6dB
011: +9dB
100: +3dB
101: -3dB
110: –9dB
111: –12dB

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.SDlmap.SDlmapIE.SIEBurstProfile">
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.SDlmap.SDlmapIE.bDIUC">
DIUC. [8.4.5.3.1 DIUC allocation] in WiMAX spec.
0–12 Different burst profiles
13 Gap/PAPR reduction
14 Extended-2 DIUC IE
15 Extended DIUC
@note, Only burst profiles IEs (for DIUC between 0 and 12) are currently supported.

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.SDlmap.SDlmapIE">
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.SDlmap.bFrameDuration">
@note Please refer to spec 802.16-2009: 8.4.5.2 Frame duration codes.
Frame duration code:
0b0000 = Reserved
0b0001 = 2.0 ms
0b0010 = 2.5 ms
0b0011 = 4 ms
0b0100 = 5 ms
0b0101 = 8 ms
0b0110 = 10 ms
0b0111 = 12.5 ms
0b1000 = 20 ms
0b1001 - 0b1111= Reserved

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.SDlmap.dwOperatorID">
Operator ID. Most significant 3 bytes of the Base Station ID.
In case of a compressed DL-MAP, only the least significant byte
of this 3 byte Operator ID is filled in.

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.SDlmap">
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.STlv.SUplinkBurstProfile">
Uplink Burst Profile is special because it contains an embedded TLV.
 \@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.STlv.SDownlinkBurstProfile">
Downlink Burst Profile is special because it contains an embedded TLV.
     \@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult.pcPduText">
Pointer to a buffer containing the decoded PDU text, as zero terminated ASCII string.
\@attribute[type="array" size="dwStringLength" sizeismember="true"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SL3DecoderResult">
Result from the Layer 3 Decoder.
The string returned via this structure is indented text describing the contents of one completely decoded PDU.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SL3DecoderRequest">
Request data container for the Layer 3 Decoder. It is used to decode a demodulation result into
a human-readable structure. The values from SDemodResult are normally used for input data.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SMeasResult.ListMeasurementRates">
List of measurement rates rates and other values in relation to the measurement rate for
one or more time intervals of measurement rate calculation. The measurement rate is
the ratio of all measurements of the same type of measurement at the time
the measurement signals have been picked from the air. So the time of arrival
at the host application is not used. And equal measurements at different RF channels are put together.

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SMeasResult.pDemodResult">
Pointer to demodulation result. If NULL, no demodulation result is present.

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SMeasResult.SDemodResult.u64ArrivalTimeInNs">
Start time of the radio frame which contained the MAC Management PDU.
If the PDU was assembled from multiple fragments, it's the arrival time of the first radio frame.
Concatenated PDUs are provided with the same arrival time.

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SMeasResult.SDemodResult.pbBitStream">
Pointer to (dwBitCount + 7) / 8 bytes which contain the PDU bits. The first bit is stored in the bit 7 of pbBitStream[0]. 
If dwBitCount is not a multiple of 8, the trailing bits in the last byte pbBitStream[(dwBitCount + 7) / 8 - 1] shall be ignored.
\@attribute[type="bitfield" size="dwBitCount" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SMeasResult.SDemodResult.dwFlags">
Flags for additional information about the PDU contained.
The flags depend on the technology.

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SMeasResult.SDemodResult.dwOperatorID">
Operator ID. Most significant 3 bytes of the Base Station ID.
In case of a compressed DL-MAP, only the least significant byte
of this 3 byte Operator ID is filled in.

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SMeasResult.SDemodResult.barBaseStationID">
Base Station ID. 0xFFFFFFFFFFFF if unknown.
The Base Station ID (BS ID) is a 48-bit (i.e 6 byte) long field identifying the BS.
The barBaseStationID array is filled beginning with the most significant byte
at index 0 down to the least significant byte at index 5.
Example:
         BS ID                =  0x010203040506
         barBaseStationID[0]  =  0x01
         barBaseStationID[1]  =  0x02
         barBaseStationID[2]  =  0x03
         barBaseStationID[3]  =  0x04
         barBaseStationID[4]  =  0x05
         barBaseStationID[5]  =  0x06
         This leads to 
               bSectorID      = 0x06
         in case of an uncompressed DL-MAP
               dwOperatorID   = 0x00010203
         and in case of a compressed MAP
               dwOperatorID   = 0x00000003

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SMeasResult.SDemodResult.dwBtsId">
Unique BTS ID provided by the demodulator. Each time the demodulator is not
sure whether the signal it could demodulate belongs to an already known BTS, it sets a new identifier
here. I.e. the same BTS could have multiple dwBtsIds, but each dwBtsId relates always to a single BTS.

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SMeasResult.SDemodResult">
BCH demodulator results
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SMeasResult.SDlfp.bDlmapCoding">
Indicates the FEC encoding code used for the DL-MAP
in case of OFDMA DL Frame.
Prefix format for all FFT sizes except 128

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SMeasResult.SDlfp.bSubchannelGroups">
Sub-channel group. Bitmask identifying the subchannel groups present.
Bit0 for group 0 ....  Bit5 for group 5. Default 0

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SMeasResult.SDlfp">
Downlink Frame Prefix.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SMeasResult.SCir.SPeak">
Contains information about the single peaks in the Channel Impulse Response.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SMeasResult.SCir.SPowerDelayProfile.SPowerDelayProfileValues.psValuesInDBm100">
Array that holds dwCountOfValues elements,
each specifying a power delay value in 100th dBm
(e.g. a value of -6719 is to be read as -67.19 dBm).
Can be SDefs::INVALID_SHORT_VALUE when a value could not be measured
\@attribute[type="array" size="dwCountOfValues" sizeismember="true"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SMeasResult.SCir.SPowerDelayProfile.SPowerDelayProfileValues">
         A (possibly empty) set of power delay values. This list contains the CIR power
         values, where each power value has been measured fSamplingTimeInSec seconds after the
         previous one. The first sample in here has been measured at u64DeviceTimeInNs resp.
         dwPcTimeStampInMs.

         The list may contain invalid values, which denote that at that specific time there
         was no CIR measurement possible.
         \@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SMeasResult.SCir.SPowerDelayProfile.fNoiseFloorInDBm">
Estimated noise level. Power values which are in the vicinity
of this value can be considered to be caused or influenced by noise.

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SMeasResult.SCir.SPowerDelayProfile">
Structure containing the actual CIR measurement results combined with delay
information.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SMeasResult.SCir">
   Optional data container that holds information about the channel impulse
   responses measured in this cycle. The CIR consists of an optional power
   delay profile, and a list of peaks.

   Channel impulse responses are calculated from a 100ms block.
   \@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SMeasResult.SSegmentMeas">
Segment measurement results.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SMeasResult.dwChannelIndex">
The channel to which all the data relates is specified using this index.
The index refers to the position in the SChannelSettings::aTableOfFrequencySetting
array.

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SMeasResult">
The WiMax measurement result for a single channel returned by
GetResult().
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SSettings">
This structure holds all the measurement setup that is configured in the ViCom WiMax scanner module. 
It is a result of the GetSettings() method.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SDemodulationSettings.dwFrontEndSelectionMask">
Receiver front end to be used by the demodulator for this channel. 
If no demodulation shall be provided, this shall be set to 0.
Demodulation tasks are not allowed to contain multiple FE's.

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SDemodulationSettings.sCINRThresholdInDB100">
CINR threshold for demodulation, given in 1/100 dB.
For default value and range see GetDemodThresholdLimits().

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SDemodulationSettings">
This structure is used to configure the BCH demodulation process.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SDemodRequests.pDemodRequests">
Pointer to an array of demodulation requests. Must be NULL, if no demodulation shall be done.
\@attribute[type="array" size="dwCountOfRequests" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SDemodRequests.SDemodRequest.dwBtsId">
Unique BTS ID provided by the demodulator. This ID is used by the BCHDemodulator to demodulate a specific BTS,
when the bDemodulationMode is set to ON_CMD.

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SDemodRequests.SDemodRequest.dwRepetitionTimeOutInMs">
Repetition time out in ms (only used if bDemodulationMode == REPETITION).

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SDemodRequests.SDemodRequest.eDemodulationMode">
The mode used for BCH demodulation.

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SDemodRequests.SDemodRequest.ePDU">
The PDU to be demodulated.

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SDemodRequests.SDemodRequest.dwChannelIndex">
Index of the frequency in SChannelSettings::aTableOfFrequencySetting.

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SDemodRequests.SDemodRequest">
   There must be one instance of this structure for each BCH demodulation request,
   therefore different PDUs can be measured on different channels.

   Example for start measurement:
         On the first channel DL-MAP shall be decoded, on the the second channel UL-MAP and DCD shall be decoded.
         UL-MAP shall be decoded repeatedly every 10 seconds (10000 ms) and DCD shall be decoded on demand.
         This requires three structures containing the following parameter sets:
   @code
         (0, DL_MAP,          0,     0, 0)
         (1, UL_MAP, REPETITION, 10000, 0)
         (1, DCD,    ON_CMD,     0,     0)
   @endcode
   Example during measurement:
         On channel 0 PDU demodulation shall be completely reset for the BTS identified by ID 3
         and on the the second channel DL-MAP shall be decoded for the BTS identified by ID 4 
         with a timeout for the request of 1 sec (1000ms):
   @code
         (0, 0,      CHANNEL_RESET, 0,    3)
         (1, DL_MAP, ON_CMD,        1000, 4)
   @endcode
   Note that you are responsible to manage the memory when you use SetDemodulationSettings().
   Note: All parameters which are not necessary for a certain request shall be set to 0.
   * \@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SDemodRequests.dwCountOfRequests">
Number of demodulation requests. Must be 0, if no demodulation shall be done.

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SDemodRequests">
This structure is used to configure PDU requests.
It is used in start measurement requests and it is used to issue BCH demodulation requests during measurement,
e.g. SIB requests on demand or to reset SIB demodulation.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.DemodMode">
This enumeration defines modes for the BCH demodulation.
Use this in the SDemodRequest structure to specify when the demodulation 
of this PDU shall be done.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.Pdu">
BCH demodulation *
This enumeration defines the MAC Management PDU types.
Use this in the S_PDU_Request structure to specify which PDUs
inside the MAC Management message shall be decoded.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SChannelSettings.pTableOfFrequencySetting">
This array of structures can be filled with single frequency configurations.
Only dwCount entries from this table will actually be used.
\@attribute[type="array" size="dwCount" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SChannelSettings.dwFrontEndSelectionMask">
Receiver front end to be used by the scanner for this channel.
Scanner tasks are not allowed to contain multiple FE's.

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SChannelSettings.dwCount">
Number of frequency configurations that shall be used from the pTableOfFrequencySetting
to perform the measurement tasks.
For value range see GetChannelCountLimits().

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SChannelSettings">
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SFrequencySetting.dwTraceMeasPer1000Sec">
As soon as a signal was found for a certain BS, then it is traced with the 
given rate. This will appear as a measurement rate for the scanner. 
For one measurement we need the receiver for about
(5 + 32 * 1000 / SMeasResult::dwFrameRateInHz) milliseconds. 
E.g. for 50Hz frame rate we need 645ms. So we can
measure this channel with not more than 1500mHz (1.5 measurements per 
second) if we have full receiver capacity for this channel. 
So a maximum MeasRate for the trace measurement can be achieved when the 
WiMAX Frame Rate is 500Hz. Then we can get 14.5Hz
(dwTraceMeasPer1000Sec = 14500) in case that the receiver time used
for synchronization is neglected.
For default value and range see GetMeasRateLimits().

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SFrequencySetting.dwSyncTrialsPer1000Sec">
Rate to perform a sync regarding the given constrains. The unit is per 1000 seconds.
For one measurement, we need the receiver for about
(5 + 2000 / dwFrameRateRangeMinInHz) milliseconds.
This is the measurement rate used for sync scanning. The resources used 
for sync scanning cannot be used for measurement scanning. 
If we measure a network that doesn't change, this rate could be very low. 
If we expect changes in the network, we have to set this value to an 
appropriate higher value.
dwSyncTrialsPer1000Sec = 1000 means, one sync trial per second, which is 
high enough for a drive test.

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SFrequencySetting.dFrameDelayToPpsInSec">
Delay of the first WiMAX frame after an PPS. It is only used if bGpsPpsSync is TRUE.

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SFrequencySetting.bUseForRecSync">
TRUE if the measurement results of this channel shall be used for
synchronization of the receiver. If FALSE then the measurement results
on this channel are ignored for the receiver sync.

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SFrequencySetting.bGpsPpsSync">
TRUE if all signals on the channel are assumed synchronized to the PPS of the GPS.

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SFrequencySetting.dwFrameRateRangeMaxInHz">
Maximum frame repetition rate in Hertz.

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SFrequencySetting.dwFrameRateRangeMinInHz">
Minimum frame repetition rate in Hertz.

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SFrequencySetting.FrameRate">
Possible Frame Rates.

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SFrequencySetting.dwCpRatioMask">
The corresponding Ratios of Cyclic Prefix to useful symbol time. At least one bit shall be set.

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SFrequencySetting.CpRatio">
Possible CP Ration Masks.

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SFrequencySetting.dwFftSizeMask">
FFT Size mask matching different FFT Size. At least one bit shall be set.

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SFrequencySetting.FftSize">
Possible FFT Size Masks.

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SFrequencySetting.dwNomBandWidthInHz">
The nominal bandwidth in Hz.

</member>
        <member name="F:RohdeSchwarz.ViCom.WIMAX.SFrequencySetting.dFreqInHz">
The center frequency of the channel in Hz.

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.SFrequencySetting">
Configuration of the measurement that is performed on one single frequency.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WIMAX.etViComInterfaceVersion">
Data container for ViCom WiMax interface. Contains measurement configuration and result structures.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.CViComGpsInterface.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.CViComGpsInterface.GetType">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.CViComGpsInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.GPS.CViComGpsInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.CViComGpsInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.GPS.CViComGpsInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
@note
Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage, it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComLteInterface::GetResult() and vice versa.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.CViComGpsInterface.RequestAidingData">
            <summary>
Function to trigger the GPS receiver to send binary almanac and ephemeris data within the next couple of measurement results, see SMeasResult::SGnssAiding.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.CViComGpsInterface.SendMessage(RohdeSchwarz.ViCom.Net.GPS.SGPSMessage!System.Runtime.CompilerServices.IsConst)">
            <summary>
Function to send a command to the GPS receiver. The command is forwarded without any validity check. Any error message from the GPS receiver will be available through the GetResult command. The function uses the same structure as GetResult. The timestamp parameters are not used.
</summary>
            <param name="rMessage">
The message to be forwarded to the GPS receiver. The timestamp information will not be used.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.CViComGpsInterface.GetSettings">
            <summary>
Returns the settings which apply at the moment.
</summary>
            <return>
pointer to a structure holding the current configuration. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.CViComGpsInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.GPS.SGPSDeviceSettings!System.Runtime.CompilerServices.IsConst)">
            <summary>
CViComGpsInterface::SetConfiguration sets the configuration of the GPS device.
</summary>
            <param name="rGPSSettings">
Contains the wanted configuration for the GPS device.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.CViComGpsInterface.GetBasicInterface">
            <summary>
Returns reference to basic interface object implementation.
The basic interface is a part of any application specific ViCom interface.
CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.CViComGpsInterface.#ctor(RohdeSchwarz.ViCom.GPS.CViComGpsInterface*)">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.CViComGpsInterface.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.CViComGpsInterface.m_converter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.CViComGpsInterface.m_nativeIf">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.CViComGpsInterface.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.CViComGpsInterface">
            <summary>
Description of the functions in CViComGpsInterface.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.DataConverterCViComGpsInterfaceData.Convert2M(RohdeSchwarz.ViCom.Technology.Type)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.DataConverterCViComGpsInterfaceData.Convert2M(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.DataConverterCViComGpsInterfaceData.Convert2M(RohdeSchwarz.ViCom.GPS.SMeasResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.DataConverterCViComGpsInterfaceData.Convert2M(RohdeSchwarz.ViCom.GPS.SSettings!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.DataConverterCViComGpsInterfaceData.CleanUp(RohdeSchwarz.ViCom.GPS.SGPSMessage*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.GPS.SGPSMessage!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.DataConverterCViComGpsInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.GPS.SGPSMessage*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.GPS.SGPSMessage!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.DataConverterCViComGpsInterfaceData.CleanUp(RohdeSchwarz.ViCom.GPS.SGPSDeviceSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.GPS.SGPSDeviceSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.DataConverterCViComGpsInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.GPS.SGPSDeviceSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.GPS.SGPSDeviceSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.DataConverterCViComGpsInterfaceData.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.DataConverterCViComGpsInterfaceData.Instance">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.DataConverterCViComGpsInterfaceData.s_instance">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.DataConverterCViComGpsInterfaceData">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.ICViComGpsInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.GPS.CViComGpsInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.ICViComGpsInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.GPS.CViComGpsInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
@note
Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage, it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComLteInterface::GetResult() and vice versa.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.ICViComGpsInterface.RequestAidingData">
            <summary>
Function to trigger the GPS receiver to send binary almanac and ephemeris data within the next couple of measurement results, see SMeasResult::SGnssAiding.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.ICViComGpsInterface.SendMessage(RohdeSchwarz.ViCom.Net.GPS.SGPSMessage!System.Runtime.CompilerServices.IsConst)">
            <summary>
Function to send a command to the GPS receiver. The command is forwarded without any validity check. Any error message from the GPS receiver will be available through the GetResult command. The function uses the same structure as GetResult. The timestamp parameters are not used.
</summary>
            <param name="rMessage">
The message to be forwarded to the GPS receiver. The timestamp information will not be used.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.ICViComGpsInterface.GetSettings">
            <summary>
Returns the settings which apply at the moment.
</summary>
            <return>
pointer to a structure holding the current configuration. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.ICViComGpsInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.GPS.SGPSDeviceSettings!System.Runtime.CompilerServices.IsConst)">
            <summary>
CViComGpsInterface::SetConfiguration sets the configuration of the GPS device.
</summary>
            <param name="rGPSSettings">
Contains the wanted configuration for the GPS device.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.ICViComGpsInterface.GetBasicInterface">
            <summary>
Returns reference to basic interface object implementation.
The basic interface is a part of any application specific ViCom interface.
CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.ICViComGpsInterface">
            <summary>
Description of the functions in CViComGpsInterface.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.CViComGpsInterfaceDataProcessor.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.CViComGpsInterfaceDataProcessor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SMeasResult.sGnssAiding">
            <summary>
Gnss aiding information.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SMeasResult.sDeadReckoningInfo">
            <summary>
Dead reckoning information.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SMeasResult.sReceiverInfo">
            <summary>
Information about the GPS receiver.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SMeasResult.sStatistics">
            <summary>
Accuracy statistics and information about the position fix.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SMeasResult.sVelocity">
            <summary>
Velocity information.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SMeasResult.ListOfSatInfo">
            <summary>
List of information about visible satellites.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SMeasResult.sPosition">
            <summary>
Position information in WGS84 representation. Only valid with according fix, please see SStatistics::enPositionFix.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SMeasResult.ListOfMessages">
            <summary>
List of raw messages contributing to the meas result.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SMeasResult.dwPcTimeStampInMs">
            <summary>
PC local time when the data has been processed on the computer.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SMeasResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SMeasResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SMeasResult">
            <summary>
GPS result returned by CViComGpsInterface::GetResult().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGnssAiding.ListOfEphemerisPerSatellite">
            <summary>
The actual set Ephemeris data for each available satellite vehicle.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGnssAiding.ListOfAlmanacPerSatellite">
            <summary>
The actual set Alamanc data for each available satellite vehicle.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SGnssAiding.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGnssAiding.SEphemeris.pSubFrame3">
            <summary>
Ephemeris words (3...10, 24 bits of data) for sub frame 3. Only available if dwHandover &gt; 0 and pSubFrame3 is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGnssAiding.SEphemeris.dwCountOfSubFrame3Elements">
            <summary>
Number of elements available in the pSubFrame3 array.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGnssAiding.SEphemeris.pSubFrame2">
            <summary>
Ephemeris words (3...10, 24 bits of data) for sub frame 2. Only available if dwHandover &gt; 0 and pSubFrame2 is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGnssAiding.SEphemeris.dwCountOfSubFrame2Elements">
            <summary>
Number of elements available in the pSubFrame2 array.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGnssAiding.SEphemeris.pSubFrame1">
            <summary>
Ephemeris words (3...10, 24 bits of data) for sub frame 1. Only available if dwHandover &gt; 0 and pSubFrame1 is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGnssAiding.SEphemeris.dwCountOfSubFrame1Elements">
            <summary>
Number of elements available in the pSubFrame1 array.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGnssAiding.SEphemeris.dwHandover">
            <summary>
Hand over word of first subframe.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGnssAiding.SEphemeris.bSatId">
            <summary>
Satellite ID.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SGnssAiding.SEphemeris.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SGnssAiding.SEphemeris">
            <summary>
Container for Ephemeris related information.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGnssAiding.SAlmanac.pAlmanac">
            <summary>
Almanac words (24 bits of data). Only valid if dwWeekNumber &gt; 0 and pAlmanac is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGnssAiding.SAlmanac.dwCountOfAlmanacElements">
            <summary>
Number of elements available in the pAlmanac array.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGnssAiding.SAlmanac.dwWeekNumber">
            <summary>
Issue date of Almanac (GNSS week number).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGnssAiding.SAlmanac.bSatId">
            <summary>
Satellite ID.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SGnssAiding.SAlmanac.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SGnssAiding.SAlmanac">
            <summary>
Container for Almanac related information.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SGnssAiding">
            <summary>
Container for GNSS aiding related information.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.ListOfSensorData">
            <summary>
The actual set of sensor measurement data.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.enDeadReckoningState">
            <summary>
Sensor fusion status if not NULL.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.pdSensorValue">
            <summary>
Measurement unit for various sensor types: SensorType::Type::SINGLE_WHEEL_TICK: integer number SensorType::Type::Z_AXIS_GYRO: deg/s SensorType::Type::TEMPERATURE: deg Ceclcius SensorType::Type::DIRECTION: true = backwards / false = forwards
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.penFaultState">
            <summary>
Sensor fault status if not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.penTimeCalibrationState">
            <summary>
Sensor time status if not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.penSensorCalibrationState">
            <summary>
Sensor calibration status if not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.bUsed">
            <summary>
Sensor is used if this value is set to true.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.enType">
            <summary>
Sensor type.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.FaultState.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.FaultState.Type.UNKNOWN">
            <summary>
Status information not available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.FaultState.Type.NOISY_MEASUREMENTS">
            <summary>
Measurement noise to high.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.FaultState.Type.MEASUREMENTS_MISSING">
            <summary>
Measurements missing or misaligned.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.FaultState.Type.BAD_TIME_TAGS">
            <summary>
Bad measurement time tags seen.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.FaultState.Type.BAD_MEASUREMENTS">
            <summary>
Bad measurements seen.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.FaultState.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.FaultState">
            <summary>
Definition of the sensor fault status values.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.CalibrationState.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.CalibrationState.Type.UNKNOWN">
            <summary>
Status information not available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.CalibrationState.Type.FINE_CALIBRATION">
            <summary>
Sensor finely calibrated.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.CalibrationState.Type.COARSE_CALIBRATION">
            <summary>
Sensor coarsely calibrated.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.CalibrationState.Type.IN_PROGRESS">
            <summary>
Calibration not finished yet.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.CalibrationState.Type.NO_CALIBRATION">
            <summary>
No sensor calibration.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.CalibrationState.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.CalibrationState">
            <summary>
Definition of the calibration status values.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.SensorType.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.SensorType.Type.DIRECTION">
            <summary>
Direction Signal.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.SensorType.Type.TEMPERATURE">
            <summary>
Temperature.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.SensorType.Type.Z_AXIS_GYRO">
            <summary>
Z-Axis gyroscope.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.SensorType.Type.SINGLE_WHEEL_TICK">
            <summary>
Single wheel tick.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.SensorType.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData.SensorType">
            <summary>
Definition of the sensor type values.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.SSensorData">
            <summary>
Container for sensor related information if enDeadReckoningState is not DeadReckoningState::DISABLED or DeadReckoningState::UNKNOWN.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.State.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.State.Type.UNKNOWN">
            <summary>
Fusion status not available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.State.Type.DISABLED">
            <summary>
Permanently disabled (until receiver reset), GNSS only (due to sensor failure).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.State.Type.INVALID_SENSOR_DATA">
            <summary>
Temporarily disabled, invalid sensor data not used.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.State.Type.USED">
            <summary>
GNSS and sensor data are used.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.State.Type.NOT_USED">
            <summary>
Active, but no sensor data used yet.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.State.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo.State">
            <summary>
Definition of the sensor fusion status values.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningInfo">
            <summary>
Container for dead reckoning related information.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SStatistics.bUsedSatellites">
            <summary>
Number of satellites used for position fix.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SStatistics.enPositionFix">
            <summary>
Type of the current position fix.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SStatistics.f3DSpeedAccuracyEstimate">
            <summary>
3D speed accuracy estimate in meter per second.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SStatistics.f3DPositionAccuracyEstimate">
            <summary>
3D position accuracy estimate in meter.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SStatistics.f2DPositionAccuracyEstimate">
            <summary>
2D position accuracy estimate in meter.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SStatistics.fpDOP">
            <summary>
Position dilution of precision.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SStatistics.fvDOP">
            <summary>
Vertical dilution of precision.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SStatistics.fhDOP">
            <summary>
Horizontal dilution of precision.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SStatistics.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SStatistics">
            <summary>
Container for accuracy statistics and information about the position fix.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SVelocity.d3DSpeedInMPerS">
            <summary>
Speed in meter per second (3D).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SVelocity.d2DHeadingInDegree">
            <summary>
Heading of motion in degree (2D).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SVelocity.dGroundSpeedInMPerS">
            <summary>
Ground speed in meter per second.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SVelocity.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SVelocity">
            <summary>
Container for velocity information.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SSatInfo.bSignalQuality">
            <summary>
Signal quality indicator, e.g. Carrier to Noise ratio C/N0 in dB-Hz. Range: 0...99
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SSatInfo.bSatID">
            <summary>
Satellite ID.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SSatInfo.enGnssType">
            <summary>
Global navigation satellite system type.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SSatInfo.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SSatInfo">
            <summary>
Container for satellite information.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SReceiverInfo.pcReceiverInfoText">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SReceiverInfo.enAntennaState">
            <summary>
Antenna status.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SReceiverInfo.enAntennaPowerState">
            <summary>
Antenna power status.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SReceiverInfo.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SReceiverInfo">
            <summary>
Container for receiver information.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.AntennaPowerState.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.AntennaPowerState.Type.UNKNOWN">
            <summary>
Power state unknown.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.AntennaPowerState.Type.ON">
            <summary>
Power ON.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.AntennaPowerState.Type.OFF">
            <summary>
Power OFF.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.AntennaPowerState.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.AntennaPowerState">
            <summary>
Definition of the antenna power state values.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.AntennaState.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.AntennaState.Type.UNKNOWN">
            <summary>
Antenna state is unknown.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.AntennaState.Type.OK">
            <summary>
Antenna is OK.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.AntennaState.Type.OPEN">
            <summary>
Antenna is open / not connected.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.AntennaState.Type.SHORT">
            <summary>
Antenna port is short circuit.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.AntennaState.Type.INIT">
            <summary>
Antenna initiation.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.AntennaState.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.AntennaState">
            <summary>
Definition of the antenna state values.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.PositionFix.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.PositionFix.Type.UNKNOWN">
            <summary>
Unknown. Time and position information invalid.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.PositionFix.Type.DR_ONLY">
            <summary>
Dead reckoning only fix.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.PositionFix.Type.GPS_AND_DR">
            <summary>
GPS and dead reckoning fix.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.PositionFix.Type.TIME_ONLY">
            <summary>
Time only fix, position information not valid yet.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.PositionFix.Type.FIX_3D">
            <summary>
3D fix.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.PositionFix.Type.FIX_2D">
            <summary>
2D fix.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.PositionFix.Type.NONE">
            <summary>
No fix. Time and position information invalid.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.PositionFix.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.PositionFix">
            <summary>
Definition of the position fix types.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGeoPosition.dateAndTimeInUtc">
            <summary>
Calendar date and time of WGS84 datum in UTC. Only valid if bTimeValid equals true.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGeoPosition.bTimeValid">
            <summary>
Validity flag for UTC time parameter dTime as well dateAndTimeInUtc.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGeoPosition.iLeapSeconds">
            <summary>
Leap seconds, e.g. time difference of GNSS time and UTC time. GNSS time is ahead of UTC.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGeoPosition.dGnssTime">
            <summary>
Timestamp of WGS84 datum in seconds since midnight (GNSS time).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGeoPosition.dTime">
            <summary>
Timestamp of WGS84 datum in seconds since midnight (UTC time).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGeoPosition.dAltitude">
            <summary>
Altitude in WGS84 datum in meters above sea level. Limits [-1000, 20000].
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGeoPosition.dLongitude">
            <summary>
Longitude in WGS84 datum; positive values: East, negative values: West. Limits [-180Â°, 180Â°].
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGeoPosition.dLatitude">
            <summary>
Latitude in WGS84 datum; positive values: North, negative values: South. Limits [-90Â°, 90Â°].
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGeoPosition.INVALID_VALUE">
            <summary>
invalid value for longitude, latitude, altitude and time values
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SGeoPosition.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SGeoPosition">
            <summary>
Container for positions on the earth in Geo WGS84 representation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.DateTimeUtc.secondsSinceEpoch">
            <summary>
Time in seconds since the Epoch (00:00:00 UTC, January 1st, 1970) also known as Unix time. Only valid if not set to -1.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.DateTimeUtc.second">
            <summary>
Second of the current minute.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.DateTimeUtc.minute">
            <summary>
Minute of the current hour.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.DateTimeUtc.hour">
            <summary>
Hour of the current day.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.DateTimeUtc.day">
            <summary>
Current day.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.DateTimeUtc.month">
            <summary>
Current month.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.DateTimeUtc.year">
            <summary>
Current year.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.DateTimeUtc.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.DateTimeUtc">
            <summary>
Container for date and UTC time information.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGPSMessage.pbMessageText">
            <summary>
Array of byte with the message content (either ASCII for NMEA or binary for UBLOX format). If the message shall be treated as text please add the null termination character.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGPSMessage.dwMessageLength">
            <summary>
Length of the message in bytes, i.e. length of the pbmessageText array if pbmessageText is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGPSMessage.enMessageFormat">
            <summary>
GPS message format (protocol type).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGPSMessage.dwPcTimeStampInMs">
            <summary>
Timestamp in ms of the host.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SGPSMessage.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SGPSMessage">
            <summary>
Container for messages from / to the GPS device.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SSettings.GpsDeviceSettings">
            <summary>
Configuration of the GPS device.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SSettings.dwReceiverIndex">
            <summary>
Index to SConnectedReceiverTable::Receiver of the currently selected receiver.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SSettings">
            <summary>
This structure holds the measurement setup that is configured for the connected GPS module. It is a result of the CViComGpsInterface::GetSettings() method.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGPSDeviceSettings.enDynamicPlatformModel">
            <summary>
Dynamic platform model to adjust the navigation engine to the expected application environment. Supported on R&amp;S TSME6 only.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGPSDeviceSettings.enGnssMode">
            <summary>
If set to true multiple Gnss systems supported by the receiver, including augmentation systems, are used for positioning. For R&amp;S TSME6 this is GPS, GLONASS, GALILEO, SBAS and QZSS. Otherwise the receiver uses GPS only.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGPSDeviceSettings.deadReckoningSettings">
            <summary>
Dead reckoning configuration.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGPSDeviceSettings.enResetMode">
            <summary>
Reset mode which is applied to the GPS receiver on CViComBasicInteface::StartMeasurement().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SGPSDeviceSettings.enGPSMessageFormat">
            <summary>
GPS message format (protocol type). Decoding of GPS messages is not supported for NMEA protocol!
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SGPSDeviceSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SGPSDeviceSettings">
            <summary>
Configuration of the GPS device.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningSettings.bClrCalib">
            <summary>
When set the stored calibration data gets cleared upon start of measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningSettings.bClrTempComp">
            <summary>
When set the temperature compensation table gets cleared upon start of measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningSettings.enGyroRotation">
            <summary>
Gyro rotation sense.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningSettings.enDirectionPinPolarity">
            <summary>
Direction pin polarity.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningSettings.enState">
            <summary>
State of dead reckoning processing.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningSettings.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningSettings.GyroRotation.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningSettings.GyroRotation.Type.ANTI_CLOCKWISE_POS">
            <summary>
Axis upwards for right handed system.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningSettings.GyroRotation.Type.CLOCKWISE_POS">
            <summary>
Axis downwards for right handed system.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningSettings.GyroRotation.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningSettings.GyroRotation">
            <summary>
Definition of gyro rotation sense modes.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningSettings.DirectionPinPolarity.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningSettings.DirectionPinPolarity.Type.HIGH_BACKWARDS">
            <summary>
High signal for backward direction.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningSettings.DirectionPinPolarity.Type.HIGH_FORWARDS">
            <summary>
High signal for forward direction.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningSettings.DirectionPinPolarity.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningSettings.DirectionPinPolarity">
            <summary>
Definition of direction pin polarity modes. Not applicable to R&amp;S TSME6.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningSettings.State.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningSettings.State.Type.DISABLED">
            <summary>
Disabled DR.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningSettings.State.Type.ENABLED">
            <summary>
Enabled DR.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningSettings.State.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningSettings.State">
            <summary>
Definition of the dead reckoning modes.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.SDeadReckoningSettings">
            <summary>
Configuration of the Dead Reckoning receiver feature based on extended Kalman Filter. Only applicable for R&amp;S TSMx-PPS2 and R&amp;S TSME6 receivers.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.DynamicPlatformModel.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.DynamicPlatformModel.Type.AIRBORNE_4G">
            <summary>
Max Altitude [m]: 50000, max horizontal velocity [m/s]: 500, max vertical velocity [m/s]: 100.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.DynamicPlatformModel.Type.AIRBORNE_2G">
            <summary>
Max Altitude [m]: 50000, max horizontal velocity [m/s]: 250, max vertical velocity [m/s]: 100.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.DynamicPlatformModel.Type.AIRBORNE_1G">
            <summary>
Max Altitude [m]: 50000, max horizontal velocity [m/s]: 100, max vertical velocity [m/s]: 100.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.DynamicPlatformModel.Type.NAVAL">
            <summary>
Max Altitude [m]: 500, max horizontal velocity [m/s]: 25, max vertical velocity [m/s]: 5.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.DynamicPlatformModel.Type.AUTOMOTIVE">
            <summary>
Max Altitude [m]: 6000, max horizontal velocity [m/s]: 100, max vertical velocity [m/s]: 15.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.DynamicPlatformModel.Type.PEDESTRIAN">
            <summary>
Max Altitude [m]: 9000, max horizontal velocity [m/s]: 30, max vertical velocity [m/s]: 20.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.DynamicPlatformModel.Type.STATIONARY">
            <summary>
Max Altitude [m]: 9000, max horizontal velocity [m/s]: 10, max vertical velocity [m/s]: 6.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.DynamicPlatformModel.Type.PORTABLE">
            <summary>
Max Altitude [m]: 12000, max horizontal velocity [m/s]: 310, max vertical velocity [m/s]: 50.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.DynamicPlatformModel.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.DynamicPlatformModel">
            <summary>
Definition of the receiver dynamic platform models. Supported on R&amp;S TSME6 only.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.GnssMode.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.GnssMode.Type.ALL_SUPPORTED">
            <summary>
Use as many GNSS systems as supported by the connected receiver. For the most recent versions of R&amp;S TSME6 this includes GPS, GLONASS, GALILEO and BEIDOU as well as augmentation systems (SBAS, QZSS).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.GnssMode.Type.GPS_BEIDOU">
            <summary>
GPS and BEIDOU. Supported on R&amp;S TSME6 only.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.GnssMode.Type.GPS_GLONASS_GALILEO">
            <summary>
GPS, GLONASS and GALILEO including augmentation systems (SBAS). Supported on R&amp;S TSME6 only.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.GnssMode.Type.GPS">
            <summary>
GPS system, supported on R&amp;S TSMW, R&amp;S TSME and R&amp;S TSME6.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.GnssMode.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.GnssMode">
            <summary>
Definition of the receiver GNSS modes.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.ResetMode.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.ResetMode.Type.COLDSTART">
            <summary>
Coldstart (all GNSS information is reset).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.ResetMode.Type.WARMSTART">
            <summary>
Warmstart (only Ephemeris is reset).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.ResetMode.Type.HOTSTART">
            <summary>
Hotstart (all GNSS data is preserved).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.ResetMode.Type.NONE">
            <summary>
No reset.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.ResetMode.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.ResetMode">
            <summary>
Definition of the GPS receiver reset modes.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.GPSMessageFormat.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.GPSMessageFormat.Type.VICOM_GPS_FORMAT_BOTH">
            <summary>
NMEA and UBLOX format.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.GPSMessageFormat.Type.VICOM_GPS_FORMAT_UBLOX">
            <summary>
UBLOX binary format.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.GPSMessageFormat.Type.VICOM_GPS_FORMAT_NMEA">
            <summary>
NMEA standard format.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.GPSMessageFormat.Type.VICOM_GPS_FORMAT_UNKNOWN">
            <summary>
The format is not known yet (return value from the GetSettings() method).
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.GPSMessageFormat.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.GPSMessageFormat">
            <summary>
Definition of the GPS message format (protocol type). @note
: Decoding of GPS messages is not supported for protocols other than UBLOX, e.g. no decoding of position, date, time etc. in NMEA mode!
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.GPS.Gnss.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.Gnss.Type.UNKNOWN">
            <summary>
Unknown.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.Gnss.Type.QZSS">
            <summary>
Quasi-Zenith Satellite System (QZSS).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.Gnss.Type.IMES">
            <summary>
Indoor Messaging System (IMES).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.Gnss.Type.SBAS">
            <summary>
Satellite-based augmentation system (SBAS) including WAAS, EGNOS, MSAS, GAGAN.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.Gnss.Type.BEIDOU">
            <summary>
BeiDou navigation satellite system (BDS).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.Gnss.Type.GALILEO">
            <summary>
Galileo satellite navigation system.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.Gnss.Type.GLONASS">
            <summary>
GLObal NAvigation Satellite System.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.GPS.Gnss.Type.GPS">
            <summary>
Global Positioning System (GPS).
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.Gnss.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.GPS.Gnss">
            <summary>
Definition of the global navigation satellite system types.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.GPS.CViComGpsInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.GPS.SMeasResult&gt;*)">
   Unregister a formerly registered ScannerData listener to remove it from the list of objects that
   shall get notification about new measurement data.

   @param[in] pListener
      The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered
      objects, an error is indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.GPS.CViComGpsInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.GPS.SMeasResult&gt;*)">
   Register a ScannerData listener that will be notified when new data is available. Note that it is
   important to Unregister the listener again once it is getting deleted, to avoid crashes.

   @note Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage,
   it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComLteInterface::GetResult() and vice versa.

   @param[in] pListener
      The object that shall be notified when new measurement data is available. This must not be
      null. If the listener has already been registered to the interface, it will not be
      registered a second time. Instead, an error will be indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.GPS.CViComGpsInterface.RequestAidingData">
Function to trigger the GPS receiver to send binary almanac and ephemeris data within the next couple of
measurement results, see SMeasResult::SGnssAiding.

</member>
        <member name="M:RohdeSchwarz.ViCom.GPS.CViComGpsInterface.SendMessage(RohdeSchwarz.ViCom.GPS.SGPSMessage!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   Function to send a command to the GPS receiver. The command is forwarded without any validity check. Any error message 
   from the GPS receiver will be available through the GetResult command. 
   The function uses the same structure as GetResult. The timestamp parameters are not used.

   @param[in] rMessage
      The message to be forwarded to the GPS receiver. The timestamp information will not be used.

</member>
        <member name="M:RohdeSchwarz.ViCom.GPS.CViComGpsInterface.GetSettings">
   Returns the settings which apply at the moment.

   @return
      pointer to a structure holding the current configuration. In case of failure, NULL. The returned value is valid 
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.GPS.CViComGpsInterface.SetConfiguration(RohdeSchwarz.ViCom.GPS.SGPSDeviceSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   CViComGpsInterface::SetConfiguration sets the configuration of the GPS device.

   @param[in] rGPSSettings
   Contains the wanted configuration for the GPS device.

</member>
        <member name="M:RohdeSchwarz.ViCom.GPS.CViComGpsInterface.GetBasicInterface">
   Returns reference to basic interface object implementation.

   The basic interface is a part of any application specific ViCom interface.
   
   @see CViComBasicInterface for specification of basic interface functions.

   @return reference to the BasicInterface object that can be used to control basic functions like
      StartMeasurement() and StopMeasurement() et al.

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.CViComGpsInterface">
Description of the functions in CViComGpsInterface.
\@attribute[type="interface" supportedDevices="TSMX_PPS2,TSME"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SMeasResult.sGnssAiding">
Gnss aiding information.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SMeasResult.sDeadReckoningInfo">
Dead reckoning information.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SMeasResult.sReceiverInfo">
Information about the GPS receiver.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SMeasResult.sStatistics">
Accuracy statistics and information about the position fix.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SMeasResult.sVelocity">
Velocity information.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SMeasResult.ListOfSatInfo">
List of information about visible satellites.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SMeasResult.sPosition">
Position information in WGS84 representation. Only valid with according fix,
please see SStatistics::enPositionFix.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SMeasResult.ListOfMessages">
List of raw messages contributing to the meas result.
\@attribute[filterable="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SMeasResult.dwPcTimeStampInMs">
PC local time when the data has been processed on the computer.

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.SMeasResult">
GPS result returned by CViComGpsInterface::GetResult().
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGnssAiding.ListOfEphemerisPerSatellite">
The actual set Ephemeris data for each available satellite vehicle.
\@attribute[filterable="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGnssAiding.SEphemeris.pSubFrame3">
Ephemeris words (3...10, 24 bits of data) for sub frame 3.
Only available if dwHandover &gt; 0 and pSubFrame3 is not NULL.
\@attribute[type="array" size="dwCountOfSubFrame3Elements" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGnssAiding.SEphemeris.dwCountOfSubFrame3Elements">
Number of elements available in the pSubFrame3 array.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGnssAiding.SEphemeris.pSubFrame2">
Ephemeris words (3...10, 24 bits of data) for sub frame 2.
Only available if dwHandover &gt; 0 and pSubFrame2 is not NULL.
\@attribute[type="array" size="dwCountOfSubFrame2Elements" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGnssAiding.SEphemeris.dwCountOfSubFrame2Elements">
Number of elements available in the pSubFrame2 array.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGnssAiding.SEphemeris.pSubFrame1">
Ephemeris words (3...10, 24 bits of data) for sub frame 1.
Only available if dwHandover &gt; 0 and pSubFrame1 is not NULL.
\@attribute[type="array" size="dwCountOfSubFrame1Elements" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGnssAiding.SEphemeris.dwCountOfSubFrame1Elements">
Number of elements available in the pSubFrame1 array.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGnssAiding.SEphemeris.dwHandover">
Hand over word of first subframe.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGnssAiding.SEphemeris.bSatId">
Satellite ID.

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.SGnssAiding.SEphemeris">
Container for Ephemeris related information.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGnssAiding.ListOfAlmanacPerSatellite">
The actual set Alamanc data for each available satellite vehicle.
\@attribute[filterable="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGnssAiding.SAlmanac.pAlmanac">
Almanac words (24 bits of data).
Only valid if dwWeekNumber &gt; 0 and pAlmanac is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGnssAiding.SAlmanac.dwCountOfAlmanacElements">
Number of elements available in the pAlmanac array.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGnssAiding.SAlmanac.dwWeekNumber">
      Issue date of Almanac (GNSS week number).


</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGnssAiding.SAlmanac.bSatId">
Satellite ID.

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.SGnssAiding.SAlmanac">
Container for Almanac related information.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.SGnssAiding">
Container for GNSS aiding related information.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SDeadReckoningInfo.ListOfSensorData">
The actual set of sensor measurement data.
\@attribute[filterable="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SDeadReckoningInfo.SSensorData.pdSensorValue">
Measurement unit for various sensor types:
   SensorType::Type::SINGLE_WHEEL_TICK:   integer number
   SensorType::Type::Z_AXIS_GYRO:         deg/s
   SensorType::Type::TEMPERATURE:         deg Ceclcius
   SensorType::Type::DIRECTION:           true = backwards / false = forwards

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SDeadReckoningInfo.SSensorData.penFaultState">
Sensor fault status if not NULL.

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.SDeadReckoningInfo.SSensorData.FaultState">
Definition of the sensor fault status values.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SDeadReckoningInfo.SSensorData.penTimeCalibrationState">
Sensor time status if not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SDeadReckoningInfo.SSensorData.penSensorCalibrationState">
Sensor calibration status if not NULL.

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.SDeadReckoningInfo.SSensorData.CalibrationState">
Definition of the calibration status values.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SDeadReckoningInfo.SSensorData.bUsed">
Sensor is used if this value is set to true.

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.SDeadReckoningInfo.SSensorData.SensorType">
Definition of the sensor type values.

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.SDeadReckoningInfo.SSensorData">
Container for sensor related information if enDeadReckoningState is not DeadReckoningState::DISABLED or
DeadReckoningState::UNKNOWN.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SDeadReckoningInfo.enDeadReckoningState">
Sensor fusion status if not NULL.

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.SDeadReckoningInfo.State">
Definition of the sensor fusion status values.

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.SDeadReckoningInfo">
Container for dead reckoning related information.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SStatistics.bUsedSatellites">
Number of satellites used for position fix.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SStatistics.enPositionFix">
Type of the current position fix.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SStatistics.f3DSpeedAccuracyEstimate">
3D speed accuracy estimate in meter per second.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SStatistics.f3DPositionAccuracyEstimate">
3D position accuracy estimate in meter.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SStatistics.f2DPositionAccuracyEstimate">
2D position accuracy estimate in meter.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SStatistics.fpDOP">
Position dilution of precision.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SStatistics.fvDOP">
Vertical dilution of precision.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SStatistics.fhDOP">
Horizontal dilution of precision.

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.SStatistics">
Container for accuracy statistics and information about the position fix.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SVelocity.d3DSpeedInMPerS">
Speed in meter per second (3D).

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SVelocity.d2DHeadingInDegree">
Heading of motion in degree (2D).

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SVelocity.dGroundSpeedInMPerS">
Ground speed in meter per second.

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.SVelocity">
Container for velocity information.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SSatInfo.bSignalQuality">
Signal quality indicator, e.g. Carrier to Noise ratio C/N0 in dB-Hz. Range: 0...99

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SSatInfo.bSatID">
Satellite ID.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SSatInfo.enGnssType">
Global navigation satellite system type.

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.SSatInfo">
Container for satellite information.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SReceiverInfo.enAntennaState">
Antenna status.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SReceiverInfo.enAntennaPowerState">
Antenna power status.

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.SReceiverInfo">
Container for receiver information.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.AntennaPowerState">
Definition of the antenna power state values.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.AntennaState">
Definition of the antenna state values.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.PositionFix">
Definition of the position fix types.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGeoPosition.dateAndTimeInUtc">
Calendar date and time of WGS84 datum in UTC. Only valid if bTimeValid equals true.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGeoPosition.bTimeValid">
Validity flag for UTC time parameter dTime as well dateAndTimeInUtc.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGeoPosition.iLeapSeconds">
Leap seconds, e.g. time difference of GNSS time and UTC time. GNSS time is ahead of UTC.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGeoPosition.dGnssTime">
Timestamp of WGS84 datum in seconds since midnight (GNSS time).

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGeoPosition.dTime">
Timestamp of WGS84 datum in seconds since midnight (UTC time).

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGeoPosition.dAltitude">
Altitude in WGS84 datum in meters above sea level.  Limits [-1000, 20000].

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGeoPosition.dLongitude">
Longitude in WGS84 datum; positive values: East, negative values: West.  Limits [-180°, 180°].

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGeoPosition.dLatitude">
Latitude in WGS84 datum; positive values: North, negative values: South. Limits [-90°, 90°].

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.SGeoPosition">
Container for positions on the earth in Geo WGS84 representation.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.DateTimeUtc.secondsSinceEpoch">
Time in seconds since the Epoch (00:00:00 UTC, January 1st, 1970) also known as Unix time.
Only valid if not set to -1.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.DateTimeUtc.second">
Second of the current minute.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.DateTimeUtc.minute">
Minute of the current hour.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.DateTimeUtc.hour">
Hour of the current day.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.DateTimeUtc.day">
Current day.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.DateTimeUtc.month">
Current month.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.DateTimeUtc.year">
Current year.

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.DateTimeUtc">
Container for date and UTC time information.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGPSMessage.pbMessageText">
Array of byte with the message content (either ASCII for NMEA or binary for UBLOX format).
If the message shall be treated as text please add the null termination character.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGPSMessage.dwMessageLength">
Length of the message in bytes, i.e. length of the pbmessageText array if pbmessageText is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGPSMessage.enMessageFormat">
GPS message format (protocol type).

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGPSMessage.dwPcTimeStampInMs">
Timestamp in ms of the host.

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.SGPSMessage">
Container for messages from / to the GPS device.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.SSettings">
This structure holds the measurement setup that is configured for the connected GPS module. 
It is a result of the CViComGpsInterface::GetSettings() method.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGPSDeviceSettings.deadReckoningSettings">
Dead reckoning configuration.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGPSDeviceSettings.enResetMode">
Reset mode which is applied to the GPS receiver on CViComBasicInteface::StartMeasurement().

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SGPSDeviceSettings.enGPSMessageFormat">
GPS message format (protocol type).
Decoding of GPS messages is not supported for NMEA protocol!

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.SGPSDeviceSettings">
Configuration of the GPS device.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SDeadReckoningSettings.bClrCalib">
When set the stored calibration data gets cleared upon start of measurement.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SDeadReckoningSettings.bClrTempComp">
When set the temperature compensation table gets cleared upon start of measurement.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SDeadReckoningSettings.enGyroRotation">
Gyro rotation sense.

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.SDeadReckoningSettings.GyroRotation">
Definition of gyro rotation sense modes.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SDeadReckoningSettings.enDirectionPinPolarity">
Direction pin polarity.

</member>
        <member name="F:RohdeSchwarz.ViCom.GPS.SDeadReckoningSettings.enState">
State of dead reckoning processing.

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.SDeadReckoningSettings.State">
Definition of the dead reckoning modes.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.GnssMode">
Definition of the receiver GNSS modes.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.ResetMode">
Definition of the GPS receiver reset modes.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.GPSMessageFormat">
Definition of the GPS message format (protocol type).
@note:
Decoding of GPS messages is not supported for protocols other than UBLOX,
e.g. no decoding of position, date, time etc. in NMEA mode!
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.Gnss">
Definition of the global navigation satellite system types.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.GPS.etViComInterfaceVersion">
Data containers used for ViCom GPS interface. Contains measurement configuration and result structures.

</member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderLte.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderLte.m_loader">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderLte.GetInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderLte.GetBasicInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderLte.SetSettings(RohdeSchwarz.ViCom.Net.SReceiverSettings)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderLte.Disconnect">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderLte.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComError@,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderLte.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderLte.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderLte.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderLte">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.CViComRFPowerScanInterface.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.CViComRFPowerScanInterface.GetType">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.CViComRFPowerScanInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.RFPOWERSCAN.CViComRFPowerScanInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.CViComRFPowerScanInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.RFPOWERSCAN.CViComRFPowerScanInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
@note
Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage, it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComLteInterface::GetResult() and vice versa.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.CViComRFPowerScanInterface.GetSettings">
            <summary>
Returns the current settings of the sweep
</summary>
            <return>
pointer to a structure holding the current sweep settings. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.CViComRFPowerScanInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSweepSettings!System.Runtime.CompilerServices.IsConst)">
            <summary>
SweepSettings contains all configuration data for the measurement
</summary>
            <param name="rSweepSetting">
Contains frequency limits, detector types and hardware configuration information
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.CViComRFPowerScanInterface.GetMeasRateLimits">
            <summary>
Limits for Parameter SSpectrumSettings::fMaxDeviceMeasRateInHz and SSpectrumSettings::fMaxReportingRateInHz.
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.CViComRFPowerScanInterface.GetBasicInterface">
            <summary>
Returns reference to basic interface object implementation.
The basic interface is a part of any application specific ViCom interface. It is used for different R&amp;S TSM applications. The purpose is to control basic R&amp;S TSM functions, which are not specific for a certain measurement.
CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.CViComRFPowerScanInterface.#ctor(RohdeSchwarz.ViCom.RFPOWERSCAN.CViComRFPowerScanInterface*)">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.CViComRFPowerScanInterface.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.CViComRFPowerScanInterface.m_converter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.CViComRFPowerScanInterface.m_nativeIf">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.CViComRFPowerScanInterface.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.CViComRFPowerScanInterface">
            <summary>
Description of the functions to perform RF power scans.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.DataConverterCViComRFPowerScanInterfaceData.Convert2M(RohdeSchwarz.ViCom.Technology.Type)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.DataConverterCViComRFPowerScanInterfaceData.Convert2M(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.DataConverterCViComRFPowerScanInterfaceData.Convert2M(RohdeSchwarz.ViCom.RFPOWERSCAN.SMeasResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.DataConverterCViComRFPowerScanInterfaceData.Convert2M(RohdeSchwarz.ViCom.RFPOWERSCAN.SSettings!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.DataConverterCViComRFPowerScanInterfaceData.Convert2M(RohdeSchwarz.ViCom.SRange&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.DataConverterCViComRFPowerScanInterfaceData.CleanUp(RohdeSchwarz.ViCom.RFPOWERSCAN.SSweepSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSweepSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.DataConverterCViComRFPowerScanInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.RFPOWERSCAN.SSweepSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSweepSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.DataConverterCViComRFPowerScanInterfaceData.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.DataConverterCViComRFPowerScanInterfaceData.Instance">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.DataConverterCViComRFPowerScanInterfaceData.s_instance">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.DataConverterCViComRFPowerScanInterfaceData">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.ICViComRFPowerScanInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.RFPOWERSCAN.CViComRFPowerScanInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.ICViComRFPowerScanInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.RFPOWERSCAN.CViComRFPowerScanInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
@note
Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage, it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComLteInterface::GetResult() and vice versa.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.ICViComRFPowerScanInterface.GetSettings">
            <summary>
Returns the current settings of the sweep
</summary>
            <return>
pointer to a structure holding the current sweep settings. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.ICViComRFPowerScanInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSweepSettings!System.Runtime.CompilerServices.IsConst)">
            <summary>
SweepSettings contains all configuration data for the measurement
</summary>
            <param name="rSweepSetting">
Contains frequency limits, detector types and hardware configuration information
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.ICViComRFPowerScanInterface.GetMeasRateLimits">
            <summary>
Limits for Parameter SSpectrumSettings::fMaxDeviceMeasRateInHz and SSpectrumSettings::fMaxReportingRateInHz.
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.ICViComRFPowerScanInterface.GetBasicInterface">
            <summary>
Returns reference to basic interface object implementation.
The basic interface is a part of any application specific ViCom interface. It is used for different R&amp;S TSM applications. The purpose is to control basic R&amp;S TSM functions, which are not specific for a certain measurement.
CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.ICViComRFPowerScanInterface">
            <summary>
Description of the functions to perform RF power scans.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.CViComRFPowerScanInterfaceDataProcessor.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.CViComRFPowerScanInterfaceDataProcessor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasResult.ListOfReportingRates">
            <summary>
List of measured (calculated) reporting rates. The reporting rate informs about the number of scanner results per time.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasResult.ListMeasurementRates">
            <summary>
List of measurement rates rates and other values in relation to the measurement rate for one or more time intervals of measurement rate calculation. The measurement rate is the ratio of all measurements of the same type of measurement at the time the measurement signals have been picked from the air. So the time of arrival at the host application is not used. And equal measurements at different RF channels are put together.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasResult.pMarkerResult">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasResult.pSpectrumResult">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasResult.bOverflow">
            <summary>
Overflow indicator
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasResult.dwPcTimeStampInMs">
            <summary>
Measurement timestamp (PC tic) in ms.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasResult.SMarkerResult.pfMarkerValuesInDBm">
            <summary>
Array of level values in dBm.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasResult.SMarkerResult.dMarkerFrequencyInHz">
            <summary>
Marker frequency in Hz (the marker is set to the spectral line with the highest level)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasResult.SMarkerResult.dwCount">
            <summary>
Count of individual results (0 if the marker is not used)
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasResult.SMarkerResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasResult.SMarkerResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasResult.SMarkerResult">
            <summary>
Result structure for measurements using the marker.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasResult.SSpectrumResult.pfSpectrumValuesInDBm">
            <summary>
Array of levels in dBm (only valid if the marker is not used)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasResult.SSpectrumResult.dwCount">
            <summary>
Count of level results in the result array
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasResult.SSpectrumResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasResult.SSpectrumResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasResult.SSpectrumResult">
            <summary>
Result structure for spectrum measurements.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasResult">
            <summary>
Result structure for all measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSettings.SweepSettings">
            <summary>
Defines the measured frequencies.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSettings.dwReceiverIndex">
            <summary>
Index to SConnectedReceiverTable::Receiver of the currently selected receiver.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSettings">
            <summary>
This structure holds all the measurement setup that is configured in the ViCom RFPowerScan scanner module. It is a result of the CViComRFPowerScanInterface::GetSettings() method.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSweepSettings.sMarker">
            <summary>
Marker activation and configuration (see explanation of SMarker structure)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSweepSettings.sChannelFilterSequence">
            <summary>
Channel filter sequence setting for the sweep (see explanation of SChannelFilterSequence, SChannelFilterSubsequence and SChannelFilterDefinition)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSweepSettings.sTimeDetector">
            <summary>
Time detector setting for the sweep (see explanation of the STimeDetector structure)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSweepSettings.sFrequencyDetector">
            <summary>
Frequency detector setting for the sweep (see explanation of the SFrequencyDetector structure)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSweepSettings.sMeasurementTime">
            <summary>
Measurement time (see explanation of the SMeasurementTime structure)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSweepSettings.sSpectrumSettings">
            <summary>
Spectrum settings for the sweep (see explanation of the SSpectrumSettings structure)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSweepSettings.bRequestRawData">
            <summary>
Raw data reporting: If enabled the FFT results are delivered to the host application without processing (frequency-/time-detector and channel filter)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSweepSettings.dStopFrequencyInHz">
            <summary>
Upper frequency limit of the sweep range
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSweepSettings.dStartFrequencyInHz">
            <summary>
Lower frequency limit of the sweep range
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSweepSettings.dwFrontEndSelectionMask">
            <summary>
Receiver front end to be used by the scanner for this measurement. RFPowerScan tasks are not allowed to contain multiple FE's.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSweepSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSweepSettings">
            <summary>
The structure Settings contains all parameters of a sweep. Each instance of the interface controls a single sweep.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMarker.bReturnsPowerValues">
            <summary>
Flag to request all power values
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMarker.bUseMarker">
            <summary>
Flag to activate the marker mode
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMarker.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMarker">
            <summary>
Marker settings One single marker is available. The marker will be set to the frequency with the highest level.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SChannelFilterSequence.pSubsequences">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SChannelFilterSequence.dwCountOfSubsequences">
            <summary>
Count of individual subsequences within the sequence
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SChannelFilterSequence.sChannelFilterDefinition">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SChannelFilterSequence.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SChannelFilterSequence.SChannelFilterSubsequence.dwCountOfElements">
            <summary>
Width (number of elements) of the subsequence
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SChannelFilterSequence.SChannelFilterSubsequence.dSpacingInHz">
            <summary>
Spacing of the frequency grid.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SChannelFilterSequence.SChannelFilterSubsequence.dFirstFrequencyInHz">
            <summary>
First frequency of the subsequence
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SChannelFilterSequence.SChannelFilterSubsequence.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SChannelFilterSequence.SChannelFilterSubsequence">
            <summary>
The channel filter subsequence defines an equally segmented frequency band where the channel filter will be applied
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SChannelFilterSequence.SChannelFilterDefinition.pfMagnitudeOfTransferFunction">
            <summary>
Magnitude array of the transfer function, the final values of the transfer function will be a linear interpolation of the table.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SChannelFilterSequence.SChannelFilterDefinition.dFrequencySpacingInHz">
            <summary>
Frequency resolution in the table (first frequency is 0 &lt;ndash&gt;&lt;/ndash&gt;&gt; center frequency of the channel)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SChannelFilterSequence.SChannelFilterDefinition.dwCountOfFrequencies">
            <summary>
Count of frequencies: count of entries for the filter definition
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SChannelFilterSequence.SChannelFilterDefinition.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SChannelFilterSequence.SChannelFilterDefinition">
            <summary>
The structure SChannelFilterDefinition defines the frequency response of the channel filter (one-sided, filter assumed to be symmetrical)
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SChannelFilterSequence">
            <summary>
The channel filter sequence contains several subsequences of equally spaced frequency subbands, all subbands use the same channel filter
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.STimeDetector.dwTimeParameterInMs">
            <summary>
Time parameter: eDetectorIntervalType defines how this value should be used
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.STimeDetector.eDetectorIntervalType">
            <summary>
Time interval type according enumerator description
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.STimeDetector.eDetectorType">
            <summary>
Detector type according enumerator description
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.STimeDetector.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.STimeDetector.TimeDetectorIntervalType.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.STimeDetector.TimeDetectorIntervalType.Type.RFPOWERSCAN_TIMEDET_INTERVAL_TIMERANGE">
            <summary>
All sweeps not older than the time parameter shall be used.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.STimeDetector.TimeDetectorIntervalType.Type.RFPOWERSCAN_TIMEDET_INTERVAL_MINTIME">
            <summary>
All sweeps with a timestamp above the time parameter shall be used.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.STimeDetector.TimeDetectorIntervalType.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.STimeDetector.TimeDetectorIntervalType">
            <summary>
Description of the usage of the time interval value. Used to define how the value of the time interval should be used in the level measurement
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.STimeDetector.TimeDetectorType.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.STimeDetector.TimeDetectorType.Type.RFPOWERSCAN_TIMEDET_TYPE_ALL">
            <summary>
all values remain in the result
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.STimeDetector.TimeDetectorType.Type.RFPOWERSCAN_TIMEDET_TYPE_MINPEAK">
            <summary>
Min peak (detects the minimum value)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.STimeDetector.TimeDetectorType.Type.RFPOWERSCAN_TIMEDET_TYPE_AUTOPEAK">
            <summary>
Auto peak detector.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.STimeDetector.TimeDetectorType.Type.RFPOWERSCAN_TIMEDET_TYPE_RMS">
            <summary>
RMS detector (calculates the root mean square)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.STimeDetector.TimeDetectorType.Type.RFPOWERSCAN_TIMEDET_TYPE_PEAK">
            <summary>
Peak detector (detects the maximum value)
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.STimeDetector.TimeDetectorType.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.STimeDetector.TimeDetectorType">
            <summary>
Detector type in time domain. Used to define the type of time detector used in time domain.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.STimeDetector">
            <summary>
The structure STimeDetector contains the parameters for the level measurement in time domain
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SFrequencyDetector.eDetectorType">
            <summary>
Detector type according enumerator description
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SFrequencyDetector.dwCountOfLines">
            <summary>
Count of spectral lines for the detector
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SFrequencyDetector.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SFrequencyDetector.FrequencyDetectorType.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SFrequencyDetector.FrequencyDetectorType.Type.RFPOWERSCAN_FREQDET_TYPE_AUTOPEAK">
            <summary>
Auto peak detector.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SFrequencyDetector.FrequencyDetectorType.Type.RFPOWERSCAN_FREQDET_TYPE_RMS">
            <summary>
RMS detector (calculates the root mean square)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SFrequencyDetector.FrequencyDetectorType.Type.RFPOWERSCAN_FREQDET_TYPE_PEAK">
            <summary>
Peak detector (detects the maximum value)
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SFrequencyDetector.FrequencyDetectorType.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SFrequencyDetector.FrequencyDetectorType">
            <summary>
Detector type in frequency domain. Used to define the type of level detector used in frequency domain.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SFrequencyDetector">
            <summary>
The structure SFrequencyDetector contains the parameters for the level measurement in frequency domain
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasurementTime.eDetectorType">
            <summary>
Detector type according enumerator description
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasurementTime.dwMeasTimeInNs">
            <summary>
Measurement time in nsec.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasurementTime.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasurementTime.DetectorType.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasurementTime.DetectorType.Type.RFPOWERSCAN_DETECTOR_TYPE_MINPEAK">
            <summary>
Min detector (detects the minimum level)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasurementTime.DetectorType.Type.RFPOWERSCAN_DETECTOR_TYPE_RMS">
            <summary>
RMS detector (calculates the root mean square)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasurementTime.DetectorType.Type.RFPOWERSCAN_DETECTOR_TYPE_MAXPEAK">
            <summary>
Peak detector (detects the maximum value)
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasurementTime.DetectorType.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasurementTime.DetectorType">
            <summary>
Definition of measurement time Used to define the measurement time independent of the FFT size.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SMeasurementTime">
            <summary>
The structure SMeasurementTime contains the parameters to define the measurement time
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.bAttenuationInDb">
            <summary>
Fixed attenuation in dB if auto attenuation is disabled. Only for TSMW receivers.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.bAutoAttenuation">
            <summary>
Auto attenuation flag: 1 = enable auto attenuation, 0 = use fixed attenuation. Only for TSMW receivers.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.bPreamplifier">
            <summary>
Preamplifier flag: 1 = enable preamplifier, 0 = disable preamplifier. Only for TSMW receivers.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.fThresholdInDbm">
            <summary>
Level threshold value if the threshold check is enabled: only records with minimum one value above the threshold will be sent to the host.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.bLevelThreshold">
            <summary>
Level threshold flag: 1 = level threshold check enabled, 0 = level threshold check disabled
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.dwBandwidthInHz">
            <summary>
FFT-Bandwidth: Blocksize, which will be scanned at once, if auto bandwidth is disabled. The valid range is between 1 MHz and 20 MHz. @note
SampleRateInHz = 1.15  dwBandwidthInHz
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.eBandwidthType">
            <summary>
Auto bandwidth flag: 1 = auto bandwidth enabled, 0 = auto bandwidth disabled. @note
SampleRateInHz = 1.15  dwBandwidthInHz = 23 MHz
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.eFFTSize">
            <summary>
FFT size.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.eWindowType">
            <summary>
Window type.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.fMaxDeviceMeasRateInHz">
            <summary>
Maximum measurement rate (reading rate on the TSMW).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.fMaxReportingRateInHz">
            <summary>
Maximum result reporting rate.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.Bandwidth.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.Bandwidth.Type.CLEAR_SPECTRUM">
            <summary>
has the least amount of spurious signals.
Internally used bandwidth is chosen such that the measured spectrum
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.Bandwidth.Type.AUTO">
            <summary>
the corresponding center frequencies 30, 50, 70 ... MHz are used.
If auto bandwidth is used, blocks of 20 MHz in a 20 MHz raster with
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.Bandwidth.Type.MANUAL">
            <summary>
Manually set bandwidth is used, see dwBandwidthInHz parameter.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.Bandwidth.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.Bandwidth">
            <summary>
Bandwidth modes: Used to specify FFT-Bandwith.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.FFTSize.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.FFTSize.Type.RFPOWERSCAN_FFTSIZE_8192">
            <summary>
FFT with 8192 samples.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.FFTSize.Type.RFPOWERSCAN_FFTSIZE_4096">
            <summary>
FFT with 4096 samples.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.FFTSize.Type.RFPOWERSCAN_FFTSIZE_2048">
            <summary>
FFT with 2048 samples.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.FFTSize.Type.RFPOWERSCAN_FFTSIZE_1024">
            <summary>
FFT with 1024 samples.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.FFTSize.Type.RFPOWERSCAN_FFTSIZE_512">
            <summary>
FFT with 512 samples.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.FFTSize.Type.RFPOWERSCAN_FFTSIZE_256">
            <summary>
FFT with 256 samples.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.FFTSize.Type.RFPOWERSCAN_FFTSIZE_128">
            <summary>
FFT with 128 samples.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.FFTSize.Type.RFPOWERSCAN_FFTSIZE_64">
            <summary>
FFT with 64 samples.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.FFTSize.Type.RFPOWERSCAN_FFTSIZE_32">
            <summary>
FFT with 32 samples.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.FFTSize.Type.RFPOWERSCAN_FFTSIZE_16">
            <summary>
FFT with 16 samples.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.FFTSize.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.FFTSize">
            <summary>
FFT Size: Used to define the count of samples for the FFT.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.WindowType.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.WindowType.Type.RFPOWERSCAN_WINDOWTYPE_FLATTOP">
            <summary>
Flat top window.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.WindowType.Type.RFPOWERSCAN_WINDOWTYPE_BLACKMAN">
            <summary>
Blackman window.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.WindowType.Type.RFPOWERSCAN_WINDOWTYPE_HAMMING">
            <summary>
Hamming window.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.WindowType.Type.RFPOWERSCAN_WINDOWTYPE_HANNING">
            <summary>
Hanning window.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.WindowType.Type.RFPOWERSCAN_WINDOWTYPE_RECT">
            <summary>
Rectangular window (no window function)
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.WindowType.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings.WindowType">
            <summary>
FFT window function type: Used to define the window function applied to the samples.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.RFPOWERSCAN.SSpectrumSettings">
            <summary>
Spectrum settings contains the basic calculation parameters of a a sweep
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderRFPowerScan.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderRFPowerScan.m_loader">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderRFPowerScan.GetInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderRFPowerScan.GetBasicInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderRFPowerScan.SetSettings(RohdeSchwarz.ViCom.Net.SReceiverSettings)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderRFPowerScan.Disconnect">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderRFPowerScan.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComError@,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderRFPowerScan.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderRFPowerScan.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderRFPowerScan.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderRFPowerScan">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.RFPOWERSCAN.CViComRFPowerScanInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.RFPOWERSCAN.SMeasResult&gt;*)">
   Unregister a formerly registered ScannerData listener to remove it from the list of objects that
   shall get notification about new measurement data.

   @param[in] pListener
      The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered
      objects, an error is indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.RFPOWERSCAN.CViComRFPowerScanInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.RFPOWERSCAN.SMeasResult&gt;*)">
   Register a ScannerData listener that will be notified when new data is available. Note that it is
   important to Unregister the listener again once it is getting deleted, to avoid crashes.

   @note Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage,
   it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComLteInterface::GetResult() and vice versa.

   @param[in] pListener
      The object that shall be notified when new measurement data is available. This must not be
      null. If the listener has already been registered to the interface, it will not be
      registered a second time. Instead, an error will be indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.RFPOWERSCAN.CViComRFPowerScanInterface.GetSettings">
   Returns the current settings of the sweep 

   @return
      pointer to a structure holding the current sweep settings. In case of failure, NULL. The returned value is valid 
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.RFPOWERSCAN.CViComRFPowerScanInterface.SetConfiguration(RohdeSchwarz.ViCom.RFPOWERSCAN.SSweepSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   SweepSettings contains all configuration data for the measurement

   @param[in] rSweepSetting
   Contains frequency limits, detector types and hardware configuration information

</member>
        <member name="M:RohdeSchwarz.ViCom.RFPOWERSCAN.CViComRFPowerScanInterface.GetMeasRateLimits">
   Limits for Parameter SSpectrumSettings::fMaxDeviceMeasRateInHz
   and SSpectrumSettings::fMaxReportingRateInHz.

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="T:RohdeSchwarz.ViCom.RFPOWERSCAN.CViComRFPowerScanInterface">
Description of the functions to perform RF power scans.
\@attribute[type="interface" supportedDevices="TSME"]

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SMeasResult.ListOfReportingRates">
List of measured (calculated) reporting rates. 
The reporting rate informs about the number of scanner results per time.

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SMeasResult.ListMeasurementRates">
List of measurement rates rates and other values in relation to the measurement rate for
one or more time intervals of measurement rate calculation. The measurement rate is
the ratio of all measurements of the same type of measurement at the time
the measurement signals have been picked from the air. So the time of arrival
at the host application is not used. And equal measurements at different RF channels are put together.

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SMeasResult.SMarkerResult.pfMarkerValuesInDBm">
Array of level values in dBm.
\@attribute[type="array" size="dwCount" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SMeasResult.SMarkerResult.dMarkerFrequencyInHz">
Marker frequency in Hz (the marker is set to the spectral line with the highest level)

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SMeasResult.SMarkerResult.dwCount">
Count of individual results (0 if the marker is not used)

</member>
        <member name="T:RohdeSchwarz.ViCom.RFPOWERSCAN.SMeasResult.SMarkerResult">
Result structure for measurements using the marker.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SMeasResult.SSpectrumResult.pfSpectrumValuesInDBm">
Array of levels in dBm (only valid if the marker is not used)
\@attribute[type="array" size="dwCount" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SMeasResult.SSpectrumResult.dwCount">
Count of level results in the result array

</member>
        <member name="T:RohdeSchwarz.ViCom.RFPOWERSCAN.SMeasResult.SSpectrumResult">
Result structure for spectrum measurements.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SMeasResult.bOverflow">
Overflow indicator

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SMeasResult.dwPcTimeStampInMs">
Measurement timestamp (PC tic) in ms.

</member>
        <member name="T:RohdeSchwarz.ViCom.RFPOWERSCAN.SMeasResult">
Result structure for all measurements.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.RFPOWERSCAN.SSettings">
This structure holds all the measurement setup that is configured in the ViCom RFPowerScan scanner module. 
It is a result of the CViComRFPowerScanInterface::GetSettings() method.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SSweepSettings.sMarker">
Marker activation and configuration (see explanation of SMarker structure)

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SSweepSettings.sChannelFilterSequence">
Channel filter sequence setting for the sweep (see explanation of SChannelFilterSequence, SChannelFilterSubsequence and SChannelFilterDefinition)

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SSweepSettings.sTimeDetector">
Time detector setting for the sweep (see explanation of the STimeDetector structure)

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SSweepSettings.sFrequencyDetector">
Frequency detector setting for the sweep (see explanation of the SFrequencyDetector structure)

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SSweepSettings.sMeasurementTime">
Measurement time (see explanation of the SMeasurementTime structure)

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SSweepSettings.sSpectrumSettings">
Spectrum settings for the sweep (see explanation of the SSpectrumSettings structure)

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SSweepSettings.bRequestRawData">
Raw data reporting: If enabled the FFT results are delivered to the host application without processing (frequency-/time-detector and channel filter)

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SSweepSettings.dStopFrequencyInHz">
Upper frequency limit of the sweep range

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SSweepSettings.dStartFrequencyInHz">
Lower frequency limit of the sweep range

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SSweepSettings.dwFrontEndSelectionMask">
Receiver front end to be used by the scanner for this measurement.
RFPowerScan tasks are not allowed to contain multiple FE's.

</member>
        <member name="T:RohdeSchwarz.ViCom.RFPOWERSCAN.SSweepSettings">
The structure Settings contains all parameters of a sweep.
Each instance of the interface controls a single sweep.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SMarker.bReturnsPowerValues">
Flag to request all power values

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SMarker.bUseMarker">
Flag to activate the marker mode

</member>
        <member name="T:RohdeSchwarz.ViCom.RFPOWERSCAN.SMarker">
Marker settings
One single marker is available. The marker will be set to the frequency with the highest level.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SChannelFilterSequence.SChannelFilterSubsequence.dwCountOfElements">
Width (number of elements) of the subsequence

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SChannelFilterSequence.SChannelFilterSubsequence.dSpacingInHz">
Spacing of the frequency grid.

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SChannelFilterSequence.SChannelFilterSubsequence.dFirstFrequencyInHz">
First frequency of the subsequence

</member>
        <member name="T:RohdeSchwarz.ViCom.RFPOWERSCAN.SChannelFilterSequence.SChannelFilterSubsequence">
The channel filter subsequence defines an equally segmented frequency band where the channel filter will be applied
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SChannelFilterSequence.dwCountOfSubsequences">
Count of individual subsequences within the sequence

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SChannelFilterSequence.SChannelFilterDefinition.pfMagnitudeOfTransferFunction">
Magnitude array of the transfer function, the final values of the transfer function will be a linear interpolation of the table.
\@attribute[type="array" size="dwCountOfFrequencies" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SChannelFilterSequence.SChannelFilterDefinition.dFrequencySpacingInHz">
Frequency resolution in the table (first frequency is 0 --&gt; center frequency of the channel)

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SChannelFilterSequence.SChannelFilterDefinition.dwCountOfFrequencies">
Count of frequencies: count of entries for the filter definition

</member>
        <member name="T:RohdeSchwarz.ViCom.RFPOWERSCAN.SChannelFilterSequence.SChannelFilterDefinition">
The structure SChannelFilterDefinition defines the frequency response of the channel filter (one-sided, filter assumed to be symmetrical)
* \@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.RFPOWERSCAN.SChannelFilterSequence">
The channel filter sequence contains several subsequences of equally spaced frequency subbands, all subbands use the same channel filter
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.STimeDetector.dwTimeParameterInMs">
Time parameter: eDetectorIntervalType defines how this value should be used

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.STimeDetector.eDetectorIntervalType">
Time interval type according enumerator description

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.STimeDetector.eDetectorType">
Detector type according enumerator description

</member>
        <member name="T:RohdeSchwarz.ViCom.RFPOWERSCAN.STimeDetector.TimeDetectorIntervalType">
Description of the usage of the time interval value.
Used to define how the value of the time interval should be used in the level measurement

</member>
        <member name="T:RohdeSchwarz.ViCom.RFPOWERSCAN.STimeDetector.TimeDetectorType">
Detector type in time domain.
Used to define the type of time detector used in time domain.

</member>
        <member name="T:RohdeSchwarz.ViCom.RFPOWERSCAN.STimeDetector">
The structure STimeDetector contains the parameters for the level measurement in time domain
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SFrequencyDetector.eDetectorType">
Detector type according enumerator description

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SFrequencyDetector.dwCountOfLines">
Count of spectral lines for the detector

</member>
        <member name="T:RohdeSchwarz.ViCom.RFPOWERSCAN.SFrequencyDetector.FrequencyDetectorType">
Detector type in frequency domain.
Used to define the type of level detector used in frequency domain.

</member>
        <member name="T:RohdeSchwarz.ViCom.RFPOWERSCAN.SFrequencyDetector">
The structure SFrequencyDetector contains the parameters for the level measurement in frequency domain
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SMeasurementTime.eDetectorType">
Detector type according enumerator description

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SMeasurementTime.dwMeasTimeInNs">
Measurement time in nsec.

</member>
        <member name="T:RohdeSchwarz.ViCom.RFPOWERSCAN.SMeasurementTime.DetectorType">
Definition of measurement time
Used to define the measurement time independent of the FFT size.

</member>
        <member name="T:RohdeSchwarz.ViCom.RFPOWERSCAN.SMeasurementTime">
The structure SMeasurementTime contains the parameters to define the measurement time
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SSpectrumSettings.bAttenuationInDb">
Fixed attenuation in dB if auto attenuation is disabled. Only for TSMW receivers.

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SSpectrumSettings.bAutoAttenuation">
Auto attenuation flag: 1 = enable auto attenuation, 0 = use fixed attenuation. Only for TSMW receivers.

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SSpectrumSettings.bPreamplifier">
Preamplifier flag: 1 = enable preamplifier, 0 = disable preamplifier. Only for TSMW receivers.

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SSpectrumSettings.fThresholdInDbm">
Level threshold value if the threshold check is enabled:	only records with minimum one value above the threshold will be sent to the host.

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SSpectrumSettings.bLevelThreshold">
Level threshold flag: 1 = level threshold check enabled, 0 = level threshold check disabled

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SSpectrumSettings.dwBandwidthInHz">
FFT-Bandwidth:	Blocksize, which will be scanned at once, if auto bandwidth is disabled. The valid range is between 1 MHz and 20 MHz.
@note SampleRateInHz = 1.15 * dwBandwidthInHz

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SSpectrumSettings.eBandwidthType">
Auto bandwidth flag: 1 = auto bandwidth enabled, 0 = auto bandwidth disabled.
@note SampleRateInHz = 1.15 * dwBandwidthInHz = 23 MHz

</member>
        <member name="T:RohdeSchwarz.ViCom.RFPOWERSCAN.SSpectrumSettings.Bandwidth">
Bandwidth modes:
Used to specify FFT-Bandwith.

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SSpectrumSettings.eFFTSize">
FFT size.

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SSpectrumSettings.eWindowType">
Window type.

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SSpectrumSettings.fMaxDeviceMeasRateInHz">
Maximum measurement rate (reading rate on the TSMW).

</member>
        <member name="F:RohdeSchwarz.ViCom.RFPOWERSCAN.SSpectrumSettings.fMaxReportingRateInHz">
Maximum result reporting rate.

</member>
        <member name="T:RohdeSchwarz.ViCom.RFPOWERSCAN.SSpectrumSettings.FFTSize">
FFT Size:
Used to define the count of samples for the FFT.

</member>
        <member name="T:RohdeSchwarz.ViCom.RFPOWERSCAN.SSpectrumSettings.WindowType">
FFT window function type:
Used to define the window function applied to the samples.

</member>
        <member name="T:RohdeSchwarz.ViCom.RFPOWERSCAN.SSpectrumSettings">
Spectrum settings contains the basic calculation parameters of a a sweep
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.RFPOWERSCAN.etViComInterfaceVersion">
Data containers used for ViCom RFPowerScan interface. Contains measurement configuration and result structures.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterface.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterface.GetType">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.Net.WCDMA.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst,System.UInt32)">
            <summary>
Issue a request to the Layer 3 Decoder to decode the PDU contained by rSL3DecoderRequest. If the data has been decoded successfully within the time given by dwTimeOutInMs, the method creates the SL3DecoderResult and the buffer within on the heap, fills in the Layer 3 Decoder result and returns a pointer to it.
</summary>
            <param name="rSL3DecoderRequest">
Contains the data that was the result of a WCDMA measurement and holds the PDU data that shall be decoded.
</param>
            <param name="dwTimeOutInMs">
Unless specified, the default timeout value to use.
</param>
            <return>
one measurement result on the heap, if the function succeeded. Otherwise NULL. Attention: The returned pointer is only valid until this function is called again.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterface.GetSettings">
            <summary>
By means of the functions: SetConfiguration() internal settings of the PN-Scanner may be changed. The functions SelectReceiver(), SetTimebaseSynchronisationMode() of CViComBasicInterface change basic settings. Except for frequency settings all other settings have default values. By means of this function you can retrieve the PN-Scanner settings which apply at the moment for measurements to be started or during running measurements. Note that the result, like all other results too, is only for reading. To change settings the functions mentioned above should be used.
</summary>
            <return>
pointer to a structure holding the current R&amp;S TSM settings. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterface.IssueDemodRequests(RohdeSchwarz.ViCom.Net.WCDMA.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary>
Use this function to issue commands (PDU requests, reset commands) for the BCH demodulator during measurement.
SIBs may be acquired for certain node bs. PDU demodulation for node bs or for channels may be reset.
Only the following SIB (System Information Block) PDU values may be requested:-MIB -&gt; PDU 14
-SIB 1 -&gt; PDU 15
-SIB 2 -&gt; PDU 16
-SIB 3 -&gt; PDU 17
-SIB 4 -&gt; PDU 18
-SIB 5 -&gt; PDU 19
-SIB 6 -&gt; PDU 20
-SIB 7 -&gt; PDU 21
-SIB 8 -&gt; PDU 22
-SIB 9 -&gt; PDU 23
-SIB 11 -&gt; PDU 25
-SIB 12 -&gt; PDU 26
-SIB 13 -&gt; PDU 27
-SIB 13.1 -&gt; PDU 28
-SIB 13.2 -&gt; PDU 29
-SIB 13.3 -&gt; PDU 30
-SIB 13.4 -&gt; PDU 31
-SIB 14 -&gt; PDU 32
-SIB 15 -&gt; PDU 33
-SIB 15.1 -&gt; PDU 34
-SIB 15.4 -&gt; PDU 37
-SIB 15.5 -&gt; PDU 38
-SIB 17 -&gt; PDU 40
-SIB 18 -&gt; PDU 41
-SIB SB1 -&gt; PDU 42
-SIB SB2 -&gt; PDU 43
-SIB 5bis -&gt; PDU 53 applicable as of UMTS Rel. 6
</summary>
            <param name="rDemodRequests">
When the function is called, this pointer contains the request parameters. For details see SDemodRequests.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterface.GetChannelState(System.UInt32)">
            <summary>
GetChannelState returns the current status of the configurable settings from the channel.
</summary>
            <param name="dwChannelIndex">
Specifies the 0-based channel index to be queried.
</param>
            <return>
Returns an object of SChannelState which contains the current state for the channel. The items in SChannelState can be modified during a running measurement using the ModifyChannel method.
SChannelState and ModifyChannel.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterface.ModifyChannel(RohdeSchwarz.ViCom.Net.WCDMA.SChannelState!System.Runtime.CompilerServices.IsConst)">
            <summary>
ModifyChannel is used to modify configurable channel settings during a running measurement. SChannelState for items that can be modified.
</summary>
            <param name="sChannelState">
sChannelState contains the modified settings to be changed in the channel.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterface.AddChannel(System.Double)">
            <summary>
AddChannel is used to create additional channels during a running measurement. The measurement settings from channel index 0, as configured by SetConfiguration(), are used for the new channel. @note
This method can not be called in the idle state (i.e. IsMeasurementStarted() must return TRUE)
@note
Each channel frequency can only be added once. Attempting to add a channel frequency multiple times will return the index that is already present.
</summary>
            <param name="dChannelFrequencyInHz">
Center frequency in Hertz for the channel.
</param>
            <return>
If success, the 0-based channel index for new channel is returned. If failure, 0xFFFFFFFF is returned indicating an invalid channel.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.WCDMA.SChannelSettings!System.Runtime.CompilerServices.IsConst,RohdeSchwarz.ViCom.Net.WCDMA.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary>
CViComWcdmaInterfaceData::SChannelSettings contains the count of channels or frequencies and the table of frequencies in MHz. The frequency or channel index is counted from zero and referenced in other data e.g. BCH demodulation settings. The selection of new frequencies causes default settings for the BCH demodulation.
This function also sets the general BCH demodulation properties, including the LTE Layer 3 PDUs that should be demodulated. Different sets of PDUs may be read from different BCH channels.
</summary>
            <param name="rChannelSettings">
Contains the definition which frequencies shall be measured.
SChannelSettings for a more detailed description on those settings.
</param>
            <param name="rDemodulationSettings">
Contains the definition which PDUs of BCH shall be measured.
SDemodulationSettings for a more detailed description on those settings.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterface.GetMeasRateLimits">
            <summary>
Limits for Parameter SChannelSettings::dwMeasRatePer1000sec.
@note
The resulting meas rate limits are specified for the MeasurementMode::HIGH_SPEED setting. The maxmimum rating for MeasurementMode::HIGH_DYNAMIC is equal to the returned default value of the SRange container object.
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterface.GetDemodThresholdLimits">
            <summary>
Limits for Parameter SDemodulationSettings::sCINRThresholdInDB100. The resulting demod threshhold limits are specified for the MeasurementMode::HIGH_DYNAMIC setting. The minimum limit for MeasurementMode::HIGH_SPEED is equal to the returned default value of the SRange container object.
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterface.GetChannelCountLimits">
            <summary>
Limits for Parameter SChannelSettings::dwCount
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterface.GetBasicInterface">
            <summary>
The basic interface is a part of any application specific ViCom interface. It is used for different TSM applications. The purpose is to control basic TSM functions, which are not specific for a certain measurement. See CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterface.#ctor(RohdeSchwarz.ViCom.WCDMA.CViComWcdmaInterface*)">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterface.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterface.m_converter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterface.m_nativeIf">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterface.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterface">
            <summary>
WCDMA measurement module for ViCom. Offers the configuration and result receiving methods for all WCDMA related measurement tasks.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.DataConverterCViComWcdmaInterfaceData.Convert2M(RohdeSchwarz.ViCom.Technology.Type)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.DataConverterCViComWcdmaInterfaceData.Convert2M(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.DataConverterCViComWcdmaInterfaceData.Convert2M(RohdeSchwarz.ViCom.WCDMA.SMeasResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.DataConverterCViComWcdmaInterfaceData.Convert2M(RohdeSchwarz.ViCom.WCDMA.SL3DecoderResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.DataConverterCViComWcdmaInterfaceData.Convert2M(RohdeSchwarz.ViCom.WCDMA.SSettings!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.DataConverterCViComWcdmaInterfaceData.Convert2M(RohdeSchwarz.ViCom.WCDMA.SChannelState)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.DataConverterCViComWcdmaInterfaceData.Convert2M(RohdeSchwarz.ViCom.SRange&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.DataConverterCViComWcdmaInterfaceData.Convert2M(RohdeSchwarz.ViCom.SRange&lt;System.UInt32&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.DataConverterCViComWcdmaInterfaceData.CleanUp(RohdeSchwarz.ViCom.WCDMA.SL3DecoderRequest*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.WCDMA.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.DataConverterCViComWcdmaInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.WCDMA.SL3DecoderRequest*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.WCDMA.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.DataConverterCViComWcdmaInterfaceData.CleanUp(RohdeSchwarz.ViCom.WCDMA.SDemodRequests*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.WCDMA.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.DataConverterCViComWcdmaInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.WCDMA.SDemodRequests*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.WCDMA.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.DataConverterCViComWcdmaInterfaceData.CleanUp(RohdeSchwarz.ViCom.WCDMA.SChannelState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.WCDMA.SChannelState!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.DataConverterCViComWcdmaInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.WCDMA.SChannelState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.WCDMA.SChannelState!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.DataConverterCViComWcdmaInterfaceData.CleanUp(RohdeSchwarz.ViCom.WCDMA.SDemodulationSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.WCDMA.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.DataConverterCViComWcdmaInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.WCDMA.SDemodulationSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.WCDMA.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.DataConverterCViComWcdmaInterfaceData.CleanUp(RohdeSchwarz.ViCom.WCDMA.SChannelSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.WCDMA.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.DataConverterCViComWcdmaInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.WCDMA.SChannelSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.WCDMA.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.DataConverterCViComWcdmaInterfaceData.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.DataConverterCViComWcdmaInterfaceData.Instance">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.DataConverterCViComWcdmaInterfaceData.s_instance">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.DataConverterCViComWcdmaInterfaceData">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.ICViComWcdmaInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.ICViComWcdmaInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.ICViComWcdmaInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.Net.WCDMA.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst,System.UInt32)">
            <summary>
Issue a request to the Layer 3 Decoder to decode the PDU contained by rSL3DecoderRequest. If the data has been decoded successfully within the time given by dwTimeOutInMs, the method creates the SL3DecoderResult and the buffer within on the heap, fills in the Layer 3 Decoder result and returns a pointer to it.
</summary>
            <param name="rSL3DecoderRequest">
Contains the data that was the result of a WCDMA measurement and holds the PDU data that shall be decoded.
</param>
            <param name="dwTimeOutInMs">
Unless specified, the default timeout value to use.
</param>
            <return>
one measurement result on the heap, if the function succeeded. Otherwise NULL. Attention: The returned pointer is only valid until this function is called again.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.ICViComWcdmaInterface.GetSettings">
            <summary>
By means of the functions: SetConfiguration() internal settings of the PN-Scanner may be changed. The functions SelectReceiver(), SetTimebaseSynchronisationMode() of CViComBasicInterface change basic settings. Except for frequency settings all other settings have default values. By means of this function you can retrieve the PN-Scanner settings which apply at the moment for measurements to be started or during running measurements. Note that the result, like all other results too, is only for reading. To change settings the functions mentioned above should be used.
</summary>
            <return>
pointer to a structure holding the current R&amp;S TSM settings. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.ICViComWcdmaInterface.IssueDemodRequests(RohdeSchwarz.ViCom.Net.WCDMA.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary>
Use this function to issue commands (PDU requests, reset commands) for the BCH demodulator during measurement.
SIBs may be acquired for certain node bs. PDU demodulation for node bs or for channels may be reset.
Only the following SIB (System Information Block) PDU values may be requested:-MIB -&gt; PDU 14
-SIB 1 -&gt; PDU 15
-SIB 2 -&gt; PDU 16
-SIB 3 -&gt; PDU 17
-SIB 4 -&gt; PDU 18
-SIB 5 -&gt; PDU 19
-SIB 6 -&gt; PDU 20
-SIB 7 -&gt; PDU 21
-SIB 8 -&gt; PDU 22
-SIB 9 -&gt; PDU 23
-SIB 11 -&gt; PDU 25
-SIB 12 -&gt; PDU 26
-SIB 13 -&gt; PDU 27
-SIB 13.1 -&gt; PDU 28
-SIB 13.2 -&gt; PDU 29
-SIB 13.3 -&gt; PDU 30
-SIB 13.4 -&gt; PDU 31
-SIB 14 -&gt; PDU 32
-SIB 15 -&gt; PDU 33
-SIB 15.1 -&gt; PDU 34
-SIB 15.4 -&gt; PDU 37
-SIB 15.5 -&gt; PDU 38
-SIB 17 -&gt; PDU 40
-SIB 18 -&gt; PDU 41
-SIB SB1 -&gt; PDU 42
-SIB SB2 -&gt; PDU 43
-SIB 5bis -&gt; PDU 53 applicable as of UMTS Rel. 6
</summary>
            <param name="rDemodRequests">
When the function is called, this pointer contains the request parameters. For details see SDemodRequests.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.ICViComWcdmaInterface.GetChannelState(System.UInt32)">
            <summary>
GetChannelState returns the current status of the configurable settings from the channel.
</summary>
            <param name="dwChannelIndex">
Specifies the 0-based channel index to be queried.
</param>
            <return>
Returns an object of SChannelState which contains the current state for the channel. The items in SChannelState can be modified during a running measurement using the ModifyChannel method.
SChannelState and ModifyChannel.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.ICViComWcdmaInterface.ModifyChannel(RohdeSchwarz.ViCom.Net.WCDMA.SChannelState!System.Runtime.CompilerServices.IsConst)">
            <summary>
ModifyChannel is used to modify configurable channel settings during a running measurement. SChannelState for items that can be modified.
</summary>
            <param name="sChannelState">
sChannelState contains the modified settings to be changed in the channel.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.ICViComWcdmaInterface.AddChannel(System.Double)">
            <summary>
AddChannel is used to create additional channels during a running measurement. The measurement settings from channel index 0, as configured by SetConfiguration(), are used for the new channel. @note
This method can not be called in the idle state (i.e. IsMeasurementStarted() must return TRUE)
@note
Each channel frequency can only be added once. Attempting to add a channel frequency multiple times will return the index that is already present.
</summary>
            <param name="dChannelFrequencyInHz">
Center frequency in Hertz for the channel.
</param>
            <return>
If success, the 0-based channel index for new channel is returned. If failure, 0xFFFFFFFF is returned indicating an invalid channel.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.ICViComWcdmaInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.WCDMA.SChannelSettings!System.Runtime.CompilerServices.IsConst,RohdeSchwarz.ViCom.Net.WCDMA.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary>
CViComWcdmaInterfaceData::SChannelSettings contains the count of channels or frequencies and the table of frequencies in MHz. The frequency or channel index is counted from zero and referenced in other data e.g. BCH demodulation settings. The selection of new frequencies causes default settings for the BCH demodulation.
This function also sets the general BCH demodulation properties, including the LTE Layer 3 PDUs that should be demodulated. Different sets of PDUs may be read from different BCH channels.
</summary>
            <param name="rChannelSettings">
Contains the definition which frequencies shall be measured.
SChannelSettings for a more detailed description on those settings.
</param>
            <param name="rDemodulationSettings">
Contains the definition which PDUs of BCH shall be measured.
SDemodulationSettings for a more detailed description on those settings.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.ICViComWcdmaInterface.GetMeasRateLimits">
            <summary>
Limits for Parameter SChannelSettings::dwMeasRatePer1000sec.
@note
The resulting meas rate limits are specified for the MeasurementMode::HIGH_SPEED setting. The maxmimum rating for MeasurementMode::HIGH_DYNAMIC is equal to the returned default value of the SRange container object.
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.ICViComWcdmaInterface.GetDemodThresholdLimits">
            <summary>
Limits for Parameter SDemodulationSettings::sCINRThresholdInDB100. The resulting demod threshhold limits are specified for the MeasurementMode::HIGH_DYNAMIC setting. The minimum limit for MeasurementMode::HIGH_SPEED is equal to the returned default value of the SRange container object.
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.ICViComWcdmaInterface.GetChannelCountLimits">
            <summary>
Limits for Parameter SChannelSettings::dwCount
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.ICViComWcdmaInterface.GetBasicInterface">
            <summary>
The basic interface is a part of any application specific ViCom interface. It is used for different TSM applications. The purpose is to control basic TSM functions, which are not specific for a certain measurement. See CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.ICViComWcdmaInterface">
            <summary>
WCDMA measurement module for ViCom. Offers the configuration and result receiving methods for all WCDMA related measurement tasks.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterfaceDataProcessor.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.CViComWcdmaInterfaceDataProcessor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SL3DecoderResult.pcPduText">
            <summary>
Pointer to a buffer containing the decoded PDU text, as zero terminated ASCII string.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SL3DecoderResult.dwStringLength">
            <summary>
Number of decoding result text bytes in the buffer (incl. terminating '\0').
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SL3DecoderResult.ePDU">
            <summary>
PDU contained.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SL3DecoderResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.SL3DecoderResult">
            <summary>
Result from the Layer 3 Decoder.
The string returned via this structure is formatted using the ASN.1 notation of the UMTS standard ( 3GPP TS 25.331 V6.9.0 (2006-03) ), which can be found under the following location "http://www.3gpp.org/ftp/Specs/2006-03/Rel-6/25_series/". It contains one completely decoded PDU terminated by CR+LF. Data subsets (i.e. Information Elements) within the string are headed by "CR+LF+{", indented via spaces and terminated by "}+CR+LF".
In addition to the standard, some Information Elements are added twice (see example cellIdentity below):
-Formatted exactly according to the standard.
-Formatted with unit or format description between square brackets ("[" "]") and representing a reasonable value.
For instance, a SIB3 PDU will be decoded as follows:
value&lt;sp&gt;&lt;/sp&gt;SysInfoType3&lt;sp&gt;&lt;/sp&gt;::={&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;sib4indicator&lt;sp&gt;&lt;/sp&gt;FALSE,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;cellIdentity&lt;sp&gt;&lt;/sp&gt;'11011011&lt;sp&gt;&lt;/sp&gt;01110110&lt;sp&gt;&lt;/sp&gt;01011001&lt;sp&gt;&lt;/sp&gt;1101'B,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;cellIdentity[16&lt;sp&gt;&lt;/sp&gt;Bit]&lt;sp&gt;&lt;/sp&gt;26013,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;cellSelectReselectInfo&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;{&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;mappingInfo&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;{&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;{&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;rat&lt;sp&gt;&lt;/sp&gt;gsm,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;mappingFunctionParameterList&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;{&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;{&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;functionType&lt;sp&gt;&lt;/sp&gt;linear,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;mapParameter1&lt;sp&gt;&lt;/sp&gt;1,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;mapParameter2&lt;sp&gt;&lt;/sp&gt;1,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;upperLimit&lt;sp&gt;&lt;/sp&gt;1&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;}&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;}&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;}&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;},&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;cellSelectQualityMeasure&lt;sp&gt;&lt;/sp&gt;cpich-Ec-N0&lt;sp&gt;&lt;/sp&gt;:&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;{&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;q-HYST-2-S&lt;sp&gt;&lt;/sp&gt;1,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;q-HYST-2-S[dB]&lt;sp&gt;&lt;/sp&gt;2&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;},&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;modeSpecificInfo&lt;sp&gt;&lt;/sp&gt;fdd&lt;sp&gt;&lt;/sp&gt;:&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;{&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;s-Intrasearch&lt;sp&gt;&lt;/sp&gt;7,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;s-Intrasearch[dB]&lt;sp&gt;&lt;/sp&gt;14,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;s-Intersearch&lt;sp&gt;&lt;/sp&gt;3,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;s-Intersearch[dB]&lt;sp&gt;&lt;/sp&gt;6,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;s-SearchHCS&lt;sp&gt;&lt;/sp&gt;2,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;s-SearchHCS[dB]&lt;sp&gt;&lt;/sp&gt;5,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;rat-List&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;{&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;{&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;rat-Identifier&lt;sp&gt;&lt;/sp&gt;gsm,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;s-SearchRAT&lt;sp&gt;&lt;/sp&gt;2,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;s-HCS-RAT&lt;sp&gt;&lt;/sp&gt;1,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;s-HCS-RAT[dB]&lt;sp&gt;&lt;/sp&gt;3,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;s-Limit-SearchRAT&lt;sp&gt;&lt;/sp&gt;2&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;}&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;},&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;q-QualMin&lt;sp&gt;&lt;/sp&gt;-18,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;q-RxlevMin&lt;sp&gt;&lt;/sp&gt;-58,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;q-RxlevMin[dBm]&lt;sp&gt;&lt;/sp&gt;-115&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;},&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;q-Hyst-l-S&lt;sp&gt;&lt;/sp&gt;1,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;q-Hyst-l-S[dB]&lt;sp&gt;&lt;/sp&gt;2,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;t-Reselection-S&lt;sp&gt;&lt;/sp&gt;2,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;hcs-ServingCellInformation&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;{&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;hcs-PRIO&lt;sp&gt;&lt;/sp&gt;2,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;q-HCS&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;t-CR-Max&lt;sp&gt;&lt;/sp&gt;notUsed&lt;sp&gt;&lt;/sp&gt;:&lt;sp&gt;&lt;/sp&gt;NULL&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;},&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;maxAllowedUL-TX-Power&lt;sp&gt;&lt;/sp&gt;24&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;},&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;cellAccessRestriction&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;{&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;cellBarred&lt;sp&gt;&lt;/sp&gt;notBarred&lt;sp&gt;&lt;/sp&gt;:&lt;sp&gt;&lt;/sp&gt;NULL,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;cellReservedForOperatorUse&lt;sp&gt;&lt;/sp&gt;notReserved,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;cellReservationExtension&lt;sp&gt;&lt;/sp&gt;notReserved,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;accessClassBarredList&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;{&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;notBarred,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;notBarred,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;notBarred,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;notBarred,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;notBarred,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;notBarred,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;notBarred,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;notBarred,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;notBarred,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;notBarred,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;notBarred,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;notBarred,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;notBarred,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;notBarred,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;notBarred,&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;notBarred&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;}&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;&lt;sp&gt;&lt;/sp&gt;}}
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SL3DecoderRequest.pbBitStream">
            <summary>
Pointer to a buffer containing the PDU bits. The first bit is stored in bit 7 of pbBitStream[0]. If m_dwBitCount is not a multiple of 8, there are remaining bits, which shall be ignored.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SL3DecoderRequest.dwBitCount">
            <summary>
Number of bits for this PDU.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SL3DecoderRequest.ePDU">
            <summary>
PDU contained.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SL3DecoderRequest.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.SL3DecoderRequest">
            <summary>
Request for the Layer 3 Decoder.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.ListMeasurementRates">
            <summary>
List of measurement rates rates and other values in relation to the measurement rate for one or more time intervals of measurement rate calculation. The measurement rate is the ratio of all measurements of the same type of measurement at the time the measurement signals have been picked from the air. So the time of arrival at the host application is not used. And equal measurements at different RF channels are put together.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.ListOfCPichCirs">
            <summary>
Result list of C-PICH CIRs.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.pPSyncCir">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.psAverageInbandPowerInDBm100">
            <summary>
CIR for the P-Sync sequence. This CIR is not specific for a special C-PICH but for the P-SCH channel which is common to all node b.
If a CIR measurement had no success (e.g. there is no WCDMA signal on air) then we get at least the received power of the specified channel. The pointer to this power value is valid (!= NULL) if a power measurement was performed.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.sInvalidPowerInDBm100">
            <summary>
The power values of the CIR are given in 0.01dB resolution as 16 bit signed integer values in the range of (-327.67..327.67dBm). Some power values of a CIR may be below the noise limit or have not been measured. In this case the integer gets the invalid power value 0x8000 = -32768 = -2^15 = -327.68dBm.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.dwCirSamplingRateInHz">
            <summary>
Sometimes it is more convenient to operate with the reciprocal of the CIR resolution. This is the CIR sampling rate = 2^16/10ms.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.dwCirResolutionInFemtoSeconds">
            <summary>
The CIR is given as a discrete power delay spectrum. The resolution (time distance of adjacent power values) is 10ms/2^16. This value is given as an integer constant in femto seconds (10^-15 sec). It is 38400/2^16 = 0.5859375 times the chip distance and about 0.15 micro seconds.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.pDemodResult">
            <summary>
If a PDU was measured then the pointer to the PDU result for this PDU measurement is valid (!= NULL)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.u64DeviceTimeInNs">
            <summary>
This value provides a R&amp;S TSM device time reported in ns.
In general, this is the start time of the CIR measurement. In case of a PDU result, this is the time, when the start of the first radio frame of the most recently received segment arrived at the receiver (R&amp;S TSM device).
Please see SFN_Info:dwSystemFrameNumber, in case of a PDU result.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.dwPcTimeStampInMs">
            <summary>
dwPcTimeStampInMs provides a conversion of the R&amp;S TSM device time to PC time obtained with the GetTickCount() function. The adjustment of the time drift between R&amp;S TSM device time and PC time as well as the resolution of GetTickCount() can cause a conversion error of a few milliseconds.
dwPcTimeStampInMs may be used to synchronise PN-Scanner results with other measurement data in the system or to determine the age of the PN-Scanner result = GetTickCount() - dwPcTimeStampInMs;
In general, this is the start time of the CIR measurement. In case of a PDU result, this is the time, when the start of the first radio frame of the most recently received segment arrived at the receiver (R&amp;S TSM device).
@note
: PDU results and CIR results are always part of separate measurement results.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.dwChannelIndex">
            <summary>
Channel index to which the measurement belongs.
Each result is for only one of the selected RF channels. The channel index counts from 0 and corresponds to the array index in SChannelSettings::pdTableOfFrequencyInMHz.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.pMaxPeak">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.ListOfPeaks">
            <summary>
Peak result list.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.fStdDevTimeDriftInPpm">
            <summary>
The measured standard deviation of the time drift, given in parts per million (ppm). fAverageTimeDriftInPpm for more information.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.fAverageTimeDriftInPpm">
            <summary>
The measured average time drift of the NodeB with respect to the TSMx receiver timing, given in parts per million (ppm). The drift is comprised of two parts:
-Drift associated with the relative motion between the NodeB and TSMx receiver.
-Difference in the clock rates between the NodeB and TSMx receiver. If the TSMx receiver is synchronized with GPS, the drift gives an indication of clock rate error in the NodeB.
To convert to nanoseconds per second, multiply the value by 1000.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.bExceededDriftLimit">
            <summary>
TRUE if the average time drift limit fAverageTimeDriftInPpm exceeded the threshold SChannelSettings::fDriftWarningThresholdInPpm, FALSE if the drift is below threshold or if threshold is not used (fDriftWarningThresholdInPpm = 0).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.wRmsDelaySpreadInChip100">
            <summary>
RMS delay spread value in an accuracy of 0.01 chip time = 2.6041ns. Only available if not 0.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.sISCPInDBm100">
            <summary>
Interference signal code power for spreading factor 256. (C-PICH spreading)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.sRSCPInDBm100">
            <summary>
Integral measured power for the C-PICH signal. (Composition of all peaks)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.sInbandPowerInDBm100">
            <summary>
Power in the RF band during the CIR measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.psCodePowerInDBm100">
            <summary>
CIR power values in 0.01dBm in time distance dwCirResolutionInFemtoSeconds.  @attribute[type="array" size="dwCountOfCodePowerValues" sizeismember="true"]
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.dwCountOfCodePowerValues">
            <summary>
The length of the CIR depends on distance between minimum and maximum delayed signal components.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.dwTimeDelayInCirSamples">
            <summary>
the first CIR signal psCodePowerInDBm100[0] has arrived the receiver dwTimeDelayInCirSamples/dwCirSamplingRateInHz seconds delayed from u64DeviceTimeInNs this value can be used to display the time delay between different CIRs.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.pBchCellIdentification">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.ExtendedSC">
            <summary>
The identifier for this measurement.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SMaxPeak.dwRadioFrameNumber">
            <summary>
Virtual Radio Frame Number (RFN) assigned to each radio frame received. The RFN counting is started for each new combination of Channel and ExtendedSC, i.e. dwChannelIndex, SExtendedSC::wSC, SExtendedSC::wIndicator. See explanation for SExtendedSC.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SMaxPeak.dFrameToaOffsetToPpsInSec">
            <summary>
Time difference between Radio Frame Time of Arrival and the latest PPS pulse received. The time, when the maximum CIR peak has been received, is used as Radio Frame Time of Arrival.
According to 3GPP TS25.211 Chapter 5, the WCDMA FDD radio frame (P-CPICH) has 10 ms length.
To determine the frame delay as value within +/- half of the radio frame length (+/- 10 ms / 2 =&gt; 5 ms), the provided dFrameToaOffsetToPpsInSec must be processed according to he following principle: double dFrameDelay_ms = ( (1000dFrameToaOffsetToPpsInSec + 5 ms) modulo 10 ms ) - 5 ms
@note
This feature requires a GPS antenna to be connected to the receiver.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SMaxPeak.pMaxPeakInfo">
            <summary>
Pointer to the maximum element of the CIR Peak list. This value is not optional, it is a pointer to avoid copying data.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SMaxPeak.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SMaxPeak.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SMaxPeak">
            <summary>
Parameters of the maximum peak.
This result will only be provided, if the peak list is not empty, PPS has been acquired and the Time of Arrival feature has been enabled (i.e. 0 &lt; SSettings::dwToaAvgWindowLengthMs). In addition, it will take about 100 s from start of measurement, before the first results are provided.
@note
: This feature requires a GPS antenna to be connected to the receiver.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SPeakInfo.psDopplerShiftInHz">
            <summary>
The Doppler shift is measured only in MEAS_MODE_HIGH_DYNAMIC. For MEAS_MODE_HIGH_SPEED the pointer is NULL;
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SPeakInfo.pSCHPowerValues">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SPeakInfo.sPeakPowerInDBm100">
            <summary>
This power includes short term reflections and may be different to the power in the CIR graph at the same position.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SPeakInfo.dwTimeDelayInCirSamples">
            <summary>
Signal of the peak has arrived the receiver dwTimeDelayInCirSamples/dwCirSamplingRateInHz seconds delayed from u64DeviceTimeInNs
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SPeakInfo.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SPeakInfo.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SPeakInfo.SSCHPowerValues.sSSCHPowerInDBm100">
            <summary>
code power for one S-SCH code
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SPeakInfo.SSCHPowerValues.sPSCHPowerInDBm100">
            <summary>
code power for one P-SCH code
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SPeakInfo.SSCHPowerValues.sInbandPowerInDBm100">
            <summary>
As the arrival time of the P-SCH and the S-SCH is different from the arrival time of the used C-PICH signal for CIR measurements we have an inband power different from SCPichCir::sInbandPowerInDBm100
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SPeakInfo.SSCHPowerValues.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SPeakInfo.SSCHPowerValues.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SPeakInfo.SSCHPowerValues">
            <summary>
Structure for code power values of synchronisation channels. This values are only valid, if a new synchronisation to this C-PICH signal was possible. If this values are invalid, then the measurement had be taken only because of a previous measurement of the same Node B. In this case the pointer to this structure is NULL.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SPeakInfo">
            <summary>
structure which contains results for separated peak values in the CIR
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SBchCellIdentification.wLAC">
            <summary>
location area code if not SDefs::INVALID_WORD_VALUE. Only available if SIB1 demodulation is active.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SBchCellIdentification.wMNC">
            <summary>
Mobile network code, coded as 3 BCD (4 bit for each digit 0..9) if not SDefs::INVALID_WORD_VALUE. Only available if SIB3 demodulation is active.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SBchCellIdentification.wMCC">
            <summary>
Mobile country code, coded as 3 BCD (4 bit for each digit 0..9) if not SDefs::INVALID_WORD_VALUE. Only available if SIB3 demodulation is active.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SBchCellIdentification.dwCI">
            <summary>
cell identity if not SDefs::INVALID_DWORD_VALUE. Only available if SIB3 demodulation is active.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SBchCellIdentification.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SBchCellIdentification.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir.SBchCellIdentification">
            <summary>
If the BCH demodulator has already demodulated signal of the node b we assume for the ExtendedSC then we get a valid pointer to this structure. If no demodulation result is available then the pointer to this structure is NULL.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SCPichCir">
            <summary>
For most code power measurements and for P-CPICH CIR measurements not only the absolute code power value (in 0.01dBm) is reported but in addition the absolute total inband power value (InbandPower) belonging to the code power measurement is reported. This makes it possible to calculate the Ec/Io for the measured code power by subtracting the InbandPower which belongs to the code power.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SPSyncCir.sCodePowerInDBm100">
            <summary>
This array contains the measured power values
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SPSyncCir.dwFixCountOfCirValues">
            <summary>
Maximum number of CIR values in measurement
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SPSyncCir.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SPSyncCir.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SPSyncCir">
            <summary>
These are the actual CIR measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SDemodResult.SFN_Info">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SDemodResult.pbBitStream">
            <summary>
pointer to (dwBitCount + 7) / 8 bytes which contain the PDU bits. The first bit is stored in the bit 7 of pbBitStream[0]. If dwBitCount is not a multiple of 8 than some tail bits in the last byte pbBitStream[(dwBitCount + 7) / 8 - 1] should be ignored.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SDemodResult.dwBitCount">
            <summary>
count of bits the PDU consists of
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SDemodResult.ePDU">
            <summary>
PDU that has been measured.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SDemodResult.ExtendedSC">
            <summary>
Scrambling code and indicator of the channel.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SDemodResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SDemodResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SDemodResult.SSFN_Info.dwTimeOfLastSegInMs">
            <summary>
This is the PC time of the first radio frame of the most recently received segment. It corresponds to the device time (u64DeviceTimeInNs) and contains the same value as dwPcTimeStampInMs.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SDemodResult.SSFN_Info.dwTimeOfFirstSegInMs">
            <summary>
This is the PC time, when the first radio frame of the first segment has been received.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SDemodResult.SSFN_Info.dwRadioFrameNumber">
            <summary>
(Virtual) Radio Frame Number (RFN) assigned to the first radio frame of the most recently received segment, i.e. this RFN indicates the same radio frame as the SFN (dwSystemFrameNumber) from a source identified by dwChannelIndex and ExtendedSC. See explanation for SMaxPeak::dwRadioFrameNumber.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SDemodResult.SSFN_Info.dwSystemFrameNumber">
            <summary>
According to the 3GPP standard, the WCDMA System frame number (SFN) is provided modulo 4096. This is the SFN of the most recently measured BCCH BCH segment, which contributed to the PDU. The device time, when the start of the first radio frame of the most recently received segment arrived at the receiver, is stored in u64DeviceTimeInNs.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SDemodResult.SSFN_Info.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SDemodResult.SSFN_Info.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SDemodResult.SSFN_Info">
            <summary>
Optional information about radio frame numbers and times. Each element is only valid, if its value is not SDefs::INVALID_DWORD_VALUE.
@note
: If you want to use scheduling information from MIB or Scheduling Blocks (SB1, SB2) together with dwSystemFrameNumber, you must take into account, that the SFN start value of the scheduling information is related to the first segment, whereas SFN and RFN reported here are related to the most recently received segment (i.e. the last segment) of the PDU.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SDemodResult">
            <summary>
BCH demodulator results
If the Time of Arrival feature is enabled and available (i.e. 0 &lt; SSettings::dwToaAvgWindowLengthMs), the virtual Radio Frame Number will be added to the PDU result.
The relation between the SFN and the RFN is given by the following equations:
The offset between virtual RFN and real SFN can be calculated by
Delta = ( 4096 + SFN - (RFN mod 4096) )
You can add or subtract integral multiples of 4096, because the complete set of System Information Messages is repeated after 4096 radio frames. Due to this, any of the possible Delta values provides a correct relation between SFN and RFN, but the time of the repetition is arbitrary. If you want to find the correct relation in time, you must calculate the absolute Time of arrival (ToA) and add or subtract integral multiples of 40.96 s, till you get the same ToA calculated from RFN as was reported for the PDU.
This value is constant for all PDUs provided by the same base station sector (cell).
To verify the relation for any PDU result you can calculate
SFN = (RFN + Delta) mod 4096
@note
: If a SIB is assembled from more than one segment, the PC time interval of segment collection is given.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SExtendedSC.wIndicator">
            <summary>
0, 1, ... see explanation above
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SExtendedSC.wSC">
            <summary>
Scrambling code, one of: 0, 16, ..., 16  511.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SExtendedSC.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SExtendedSC.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult.SExtendedSC">
            <summary>
Scrambling codes (SC) are measured and used to identify the Node B which is using the SC. If C-PICH signals generated with the same SC have been received then the PN-Scanner normally relates this signal to each other with the assumption that this signals have been transmitted from the same Node B. But in the case of different frame timing (outside a range for reflections) or if the measurements have been acquired at different times (with more than a few minutes delay), the assumption that both signals have been transmitted from the same Node B is wrong or may be uncertain. To indicate whether received signals with the same SC at the same RF channel are reliably related (transmitted from the same Node B) the PN-Scanner attaches an indicator to each measured SC. If this indicator is different for the same SC, the signals may be transmitted from the same Node B, but this is not certain. This uncertainty can be resolved by Cell Identity measurements (SIB3 demodulation).
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.SMeasResult">
            <summary>
This structure holds a measurement result from the result buffer. Please refer to the manual for a detailed discussion of how to interpret the results.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SSettings.DemodulationSettings">
            <summary>
Configuration of the BCH demodulation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SSettings.ChannelSettings">
            <summary>
Defines the measured frequencies.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SSettings.dwReceiverIndex">
            <summary>
Index to SConnectedReceiverTable::Receiver of the currently selected receiver.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.SSettings">
            <summary>
By means of the functions: SetConfiguration() internal settings of the PN-Scanner may be changed and with the functions SelectReceiver(), SetTimebaseSynchronisationMode() of CViComBasicInterfaceData change basic settings. Except of frequency settings all other settings have default values.
This structure bundles these settings and will be returned as result from the GetSettings() method.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SDemodulationSettings.sStartMeasurementRequests">
            <summary>
The requests for the general start measurement command.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SDemodulationSettings.dwFrontEndSelectionMask">
            <summary>
Receiver front end to be used by the demodulator for this channel. If no demodulation shall be provided, this shall be set to 0. Demodulation tasks are not allowed to contain multiple FE's.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SDemodulationSettings.dwMaxNodeBHoldTimeInSec">
            <summary>
Time limit the scanner remembers an already measured NodeB (channel, SC, SCId). If a NodeB defined by channel, SC and SCId was not received for the here specified time, the combination channel, SC and SCId will not be used anymore. This causes a restart of all demodulation requests for this NodeB.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SDemodulationSettings.dwOptMaxNodeBHoldTimeInSec">
            <summary>
suggested value for dwMaxNodeBHoldTimeInSec
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SDemodulationSettings.dwMinMaxNodeBHoldTimeInSec">
            <summary>
lower limit for dwMaxNodeBHoldTimeInSec
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SDemodulationSettings.lEcToIoThresholdInDB100">
            <summary>
Threshold for demodulation trials in 0.01dB. For default value and range see GetDemodThresholdLimits().
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SDemodulationSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.SDemodulationSettings">
            <summary>
This structure is used to configure the BCH demodulation process.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SDemodRequests.pDemodRequests">
            <summary>
Array of SDemodRequest, counter is dwCountOfRequests above .
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SDemodRequests.dwCountOfRequests">
            <summary>
Number of demodulation requests.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SDemodRequests.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SDemodRequests.SDemodRequest.wScId">
            <summary>
Used to specify node b for DemodulationModes BTS_FORCE or BTS.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SDemodRequests.SDemodRequest.wPrimarySCFrom0To511">
            <summary>
Used to specify node b for DemodulationModes BTS_FORCE or BTS.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SDemodRequests.SDemodRequest.wRepetitionDelayIn100ms">
            <summary>
Repeat measurement after this delay time, if eDemodulationMode is REPETITION. Timeout for request, if eDemodulationMode is ON_CMD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SDemodRequests.SDemodRequest.eDemodulationMode">
            <summary>
The mode used for demodulation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SDemodRequests.SDemodRequest.ePDU">
            <summary>
The PDU to be demodulated.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SDemodRequests.SDemodRequest.dwChannelIndex">
            <summary>
Index of the frequency in SChannelSettings::pdTableOfFrequencyInMHz.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SDemodRequests.SDemodRequest.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.SDemodRequests.SDemodRequest">
            <summary>
There must be one instance of this structure for each demodulation request, therefore different PDUs can be measured on different channels.
Example for start measurement: On the first channel SIBs 3 and 4 shall be decoded, on the the second channel SIBs 3, 5 and 7 shall be decoded. SIB 5 shall be decoded repeatedly every 10 seconds (100100 ms) and SIB 7 shall be decoded on demand. This requires five structures containing the following parameter sets: (0,&lt;sp&gt;&lt;/sp&gt;SIB3,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(0,&lt;sp&gt;&lt;/sp&gt;SIB4,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(1,&lt;sp&gt;&lt;/sp&gt;SIB3,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(1,&lt;sp&gt;&lt;/sp&gt;SIB5,&lt;sp&gt;&lt;/sp&gt;REPETITION,&lt;sp&gt;&lt;/sp&gt;100,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(1,&lt;sp&gt;&lt;/sp&gt;SIB7,&lt;sp&gt;&lt;/sp&gt;ON_CMD,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0) Example during measurement: On channel 0 PDU demodulation shall be completely reset for the node b identified by SC 375 SC ID 0 and on the the second channel SIB 7 shall be decoded for the node b identified by SC 429 SC ID 0 with a timeout for the request of 1 sec (10100ms): (0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;BTS_RESET,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;375,&lt;sp&gt;&lt;/sp&gt;0)(1,&lt;sp&gt;&lt;/sp&gt;SIB7,&lt;sp&gt;&lt;/sp&gt;BTS,&lt;sp&gt;&lt;/sp&gt;10,&lt;sp&gt;&lt;/sp&gt;429,&lt;sp&gt;&lt;/sp&gt;0) Note that you are responsible to manage the memory when you use SetDemodulationSettings(). Note: All parameters which are not necessary for a certain request shall be set to 0.
If any PDU besides MIB, SB1 and SB2 shall be decoded, SIB3 needs to be requested as well.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.SDemodRequests">
            <summary>
This structure is used to configure PDU requests. It is used in start measurement requests and it is used to issue demodulation requests during measurement, e.g. SIB requests on demand or to reset SIB demodulation.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.DemodMode.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.DemodMode.Type.BTS_OLD_FORCE">
            <summary>
Equal to BTS_FORCE but previously measured messages may be used for the result. This can be requested only during a running measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.DemodMode.Type.BTS_OLD">
            <summary>
Equal to BTS but previously measured messages may be used for the result. This can be requested only during a running measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.DemodMode.Type.CHANNEL_RESET">
            <summary>
All demodulation results for each BTS on the specified channel will be deleted and the demodulation for this channel starts as specified in SDemodulationSettings::sStartMeasurementRequests. This can be requested only during a running measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.DemodMode.Type.BTS_RESET">
            <summary>
All demodulation results for a special BTS will be deleted and the demodulation for this BTS starts as specified in SDemodulationSettings::sStartMeasurementRequests. This can be requested only during a running measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.DemodMode.Type.BTS_FORCE">
            <summary>
Equal to BTS but the limitation in receiver resource usage will be ignored and the demodulation will be be done until the PDU has been demodulated or timeout occurred.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.DemodMode.Type.BTS">
            <summary>
The demodulation is only for a BTS. This can be requested only during a running measurement and when the PDU was also requested in SDemodulationSettings::sStartMeasurementRequests. If dwTimeOutOrRepetitionDelayIn100ms is different from 0 then the demodulation is only tried during the given time.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.DemodMode.Type.REPETITION">
            <summary>
After each successful demodulation a new one will be started automatically after the delay time specified in wRepetitionDelayIn100ms Only to be used in start measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.DemodMode.Type.ON_CMD">
            <summary>
The PDU is only demodulated if an extra command requests the demodulation. Only to be used in SDemodulationSettings::sStartMeasurementRequests.
If this is used, then no PDU is decoded until it is explicitly requested. The method IssueDemodRequests can be used for that purpose.
PDUs configured with this setting can be decoded using one of BTS, BTS_FORCE, BTS_OLD, DEMOD_BTS_OLD_HIGH modes.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.DemodMode.Type.ONCE">
            <summary>
The PDU is demodulated only once for each BTS. Only to be used in SDemodulationSettings::sStartMeasurementRequests.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.DemodMode.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.DemodMode">
            <summary>
This enumeration defines modes for the demodulation. Use this in the SDemodRequest structure to specify when the demodulation of this PDU shall be done.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.UNKNOWN">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SB2">
            <summary>
SB 2 is PDU 43 Do not request, if necessary, this PDU will be acquired automatically.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SB1">
            <summary>
SB 1 is PDU 42 Do not request, if necessary, this PDU will be acquired automatically.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB24">
            <summary>
SIB 24 is PDU 47.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB23">
            <summary>
SIB 23 is PDU 46.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB20">
            <summary>
SIB 20 is PDU 76.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB19">
            <summary>
SIB 19 is PDU 75.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB18">
            <summary>
SIB 18 is PDU 41.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB16">
            <summary>
SIB 16 is PDU 39.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB15_8">
            <summary>
SIB 15.8 is PDU 74.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB15_7">
            <summary>
SIB 15.7 is PDU 73.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB15_6">
            <summary>
SIB 15.6 is PDU 72.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB15_5">
            <summary>
SIB 15.5 is PDU 38.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB15_4">
            <summary>
SIB 15.4 is PDU 37.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB15_3bis">
            <summary>
SIB 15.3bis is PDU 71.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB15_3">
            <summary>
SIB 15.3 is PDU 36.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB15_2ter">
            <summary>
SIB 15.2ter is PDU 70.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB15_2bis">
            <summary>
SIB 15.2bis is PDU 69.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB15_2">
            <summary>
SIB 15.2 is PDU 35.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB15_1bis">
            <summary>
SIB 15.1bis is PDU 68.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB15_1">
            <summary>
SIB 15.1 is PDU 34.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB15_bis">
            <summary>
SIB 15bis is PDU 67.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB15">
            <summary>
SIB 15 is PDU 33.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB13_4">
            <summary>
SIB 13.4 is PDU 31.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB13_3">
            <summary>
SIB 13.3 is PDU 30.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB13_2">
            <summary>
SIB 13.2 is PDU 29.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB13_1">
            <summary>
SIB 13.1 is PDU 28.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB13">
            <summary>
SIB 13 is PDU 27.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB12">
            <summary>
SIB 12 is PDU 26.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB11bis">
            <summary>
SIB 11bis is PDU 61.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB11ter">
            <summary>
SIB 11ter is PDU 60.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB11">
            <summary>
SIB 11 is PDU 25.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB7">
            <summary>
SIB 7 is PDU 21.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB5bis">
            <summary>
SIB 5bis is PDU 53.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB5">
            <summary>
SIB 5 is PDU 19.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB3">
            <summary>
SIB 3 is PDU 17.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB2">
            <summary>
SIB 2 is PDU 16.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.SIB1">
            <summary>
SIB 1 is PDU 15.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.MIB">
            <summary>
MIB is PDU 14.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type.UNDEFINED">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.Pdu.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.Pdu">
            <summary>
This enumeration defines a translation table from SIB to PDU. Use this in the SDemodRequest structure to define what SIB shall be decoded.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SChannelSettings.bDriftScanning">
            <summary>
Setting bDriftScanning to TRUE will enable WCDMA drift scanning to track drifting NodeBs. NodeBs with similar drifts will be grouped together; however, there is a limit on the number of groups that can be tracked. If the limit is reached, a logging message is displayed in the message tracer file.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SChannelSettings.fDriftWarningThresholdInPpm">
            <summary>
When a NodeB is detected to be drifting in excess of this threshold, the value SMeasResult::SCPichCir::bExceededDriftLimit is set to TRUE. The threshold is set in units of parts per million (ppm). 1 ppm = 1000 ns/sec. @note
The flag bDriftScanning must be enabled in order to set this value.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SChannelSettings.pTableOfFrequencySetting">
            <summary>
Pointer to an array containing the frequencies of the selected channels. The number of members in the array is defined by dwCount (above). For value range see SReceiver::SSupportedFrequencies.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SChannelSettings.dwCount">
            <summary>
Number of frequency configurations that shall be used from the pTableOfFrequencySetting to perform the measurement tasks.
For value range see GetChannelCountLimits().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SChannelSettings.dwToaAvgWindowLengthMs">
            <summary>
Length of the sliding window for Time of Arrival averaging in ms. Values in the near past of the current value contribute more to the average than older values. Values older than dwToaAvgWindowLengthMs will contribute significantly less to the average value. If &gt; 1, this value is treated as double Sigma threshold of a Gaussian distribution in time, on which the averaging is based. If 1, results are provided without averaging. If 0, feature deactivated, no ToA processing and no results. This is the default!
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SChannelSettings.dwMeasRatePer1000Sec">
            <summary>
The desired measurement rate value. For default value and range see GetMeasRateLimits(). The limits are dependent from the currently set eMeasurementMode.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SChannelSettings.eMeasurementMode">
            <summary>
Measurement mode settings.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SChannelSettings.dwFrontEndSelectionMask">
            <summary>
Receiver front end to be used by the scanner for this channel. Scanner tasks are not allowed to contain multiple FE's.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SChannelSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.SChannelSettings">
            <summary>
SChannelSettings contains the count of channels or frequencies and the table of frequencies in MHz.
The selection of new frequencies (with SetConfiguration) automatically resets the BCH demodulator, so that it demodulates the default SIBs.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.MeasurementMode.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.MeasurementMode.Type.HIGH_DYNAMIC">
            <summary>
supported by TSMQ, TSMU, TSMW, TSME
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.MeasurementMode.Type.HIGH_SPEED">
            <summary>
supported by TSMQ, TSMU, TSML, TSMW, TSME
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.MeasurementMode.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.MeasurementMode">
            <summary>
This defines the different measurement modi. For the TSML device, only the HIGH_SPEED mode can be set.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SFrequencySetting.dCenterFrequencyInHz">
            <summary>
Center frequency of the channel in Hz.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SFrequencySetting.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.SFrequencySetting">
            <summary>
This defines the frequency in Hz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SChannelState.bIsEnabled">
            <summary>
TRUE - this channel is currently active. FALSE - all channel measurements are switched off (measurement rates below are preserved for future use).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.WCDMA.SChannelState.dwChannelIndex">
            <summary>
The channel index for this measurement settings information.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.WCDMA.SChannelState.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.WCDMA.SChannelState">
            <summary>
Struct containing the channel measurement settings that can be modified during a running measurement
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderWcdma.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderWcdma.m_loader">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderWcdma.GetInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderWcdma.GetBasicInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderWcdma.SetSettings(RohdeSchwarz.ViCom.Net.SReceiverSettings)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderWcdma.Disconnect">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderWcdma.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComError@,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderWcdma.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderWcdma.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderWcdma.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderWcdma">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.WCDMA.CViComWcdmaInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.WCDMA.SMeasResult&gt;*)">
   Unregister a formerly registered ScannerData listener to remove it from the list of objects that
   shall get notification about new measurement data.

   @param[in] pListener
      The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered
      objects, an error is indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.WCDMA.CViComWcdmaInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.WCDMA.SMeasResult&gt;*)">
   Register a ScannerData listener that will be notified when new data is available. Note that it is
   important to Unregister the listener again once it is getting deleted, to avoid crashes.

   @param[in] pListener
      The object that shall be notified when new measurement data is available. This must not be
      null. If the listener has already been registered to the interface, it will not be
      registered a second time. Instead, an error will be indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.WCDMA.CViComWcdmaInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.WCDMA.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsLong)">
   Issue a request to the Layer 3 Decoder to decode the PDU contained by rSL3DecoderRequest.
   If the data has been decoded successfully within the time given by dwTimeOutInMs,
   the method creates the SL3DecoderResult and the buffer within on the heap, fills in the Layer 3 Decoder result
   and returns a pointer to it.

   @param[in] rSL3DecoderRequest
      Contains the data that was the result of a WCDMA measurement and holds the PDU data that shall be decoded.

   @param[in] dwTimeOutInMs
      Unless specified, the default timeout value to use.

   @return
      one measurement result on the heap, if the function succeeded. Otherwise NULL.
      Attention: The returned pointer is only valid until this function is called again.

</member>
        <member name="M:RohdeSchwarz.ViCom.WCDMA.CViComWcdmaInterface.IssueDemodRequests(RohdeSchwarz.ViCom.WCDMA.SDemodRequests!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   Use this function to issue commands (PDU requests, reset commands) for the BCH demodulator during measurement.

   SIBs may be acquired for certain node bs. PDU demodulation for node bs or for channels may be reset.

   Only the following SIB (System Information Block) PDU values may be requested:
   - MIB          -&gt; PDU 14
   - SIB 1        -&gt; PDU 15
   - SIB 2        -&gt; PDU 16
   - SIB 3        -&gt; PDU 17
   - SIB 4        -&gt; PDU 18
   - SIB 5        -&gt; PDU 19
   - SIB 6        -&gt; PDU 20
   - SIB 7        -&gt; PDU 21
   - SIB 8        -&gt; PDU 22
   - SIB 9        -&gt; PDU 23
   - SIB 11       -&gt; PDU 25
   - SIB 12       -&gt; PDU 26
   - SIB 13       -&gt; PDU 27
   - SIB 13.1     -&gt; PDU 28
   - SIB 13.2     -&gt; PDU 29
   - SIB 13.3     -&gt; PDU 30
   - SIB 13.4     -&gt; PDU 31
   - SIB 14       -&gt; PDU 32
   - SIB 15       -&gt; PDU 33
   - SIB 15.1     -&gt; PDU 34
   - SIB 15.4     -&gt; PDU 37
   - SIB 15.5     -&gt; PDU 38
   - SIB 17       -&gt; PDU 40
   - SIB 18       -&gt; PDU 41
   - SIB SB1      -&gt; PDU 42
   - SIB SB2      -&gt; PDU 43
   - SIB 5bis     -&gt; PDU 53          applicable as of UMTS Rel. 6

   @param[in] rDemodRequests
      When the function is called, this pointer contains the request parameters.
      For details see SDemodRequests.

</member>
        <member name="M:RohdeSchwarz.ViCom.WCDMA.CViComWcdmaInterface.GetChannelState(System.UInt32!System.Runtime.CompilerServices.IsLong)">
   GetChannelState returns the current status of the configurable settings from the channel.

   @param[in] dwChannelIndex
      Specifies the 0-based channel index to be queried.

   @return
      Returns an object of SChannelState which contains the current state for the channel.  The items
      in SChannelState can be modified during a running measurement using the ModifyChannel method.
      @sa SChannelState and ModifyChannel.

</member>
        <member name="M:RohdeSchwarz.ViCom.WCDMA.CViComWcdmaInterface.ModifyChannel(RohdeSchwarz.ViCom.WCDMA.SChannelState!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   ModifyChannel is used to modify configurable channel settings during a running measurement.
   @sa SChannelState for items that can be modified.

   @param[in] sChannelState
      sChannelState contains the modified settings to be changed in the channel.

</member>
        <member name="M:RohdeSchwarz.ViCom.WCDMA.CViComWcdmaInterface.AddChannel(System.Double)">
   AddChannel is used to create additional channels during a running measurement.  The measurement settings from channel index
   0, as configured by SetConfiguration(), are used for the new channel.
   @note This method can not be called in the idle state (i.e. IsMeasurementStarted() must return TRUE)
   @note Each channel frequency can only be added once. Attempting to add a channel frequency multiple times will return the index that is already present.

   @param[in] dChannelFrequencyInHz
      Center frequency in Hertz for the channel.

   @return
      If success, the 0-based channel index for new channel is returned.  If failure, 0xFFFFFFFF is returned indicating an invalid channel.

</member>
        <member name="M:RohdeSchwarz.ViCom.WCDMA.CViComWcdmaInterface.SetConfiguration(RohdeSchwarz.ViCom.WCDMA.SChannelSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.WCDMA.SDemodulationSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   CViComWcdmaInterfaceData::SChannelSettings contains the count of channels or frequencies and the table of frequencies in MHz.
   The frequency or channel index is counted from zero and referenced in other data e.g. BCH demodulation settings.
   The selection of new frequencies causes default settings for the BCH demodulation.

   This function also sets the general BCH demodulation properties, including the LTE Layer 3 PDUs that should
   be demodulated. Different sets of PDUs may be read from different BCH channels.

   @param[in] rChannelSettings
   Contains the definition which frequencies shall be measured. @see SChannelSettings for
   a more detailed description on those settings.

   @param[in] rDemodulationSettings
   Contains the definition which PDUs of BCH shall be measured. @see SDemodulationSettings for
   a more detailed description on those settings.

</member>
        <member name="M:RohdeSchwarz.ViCom.WCDMA.CViComWcdmaInterface.GetMeasRateLimits">
   Limits for Parameter SChannelSettings::dwMeasRatePer1000sec.

   @note
      The resulting meas rate limits are specified for the MeasurementMode::HIGH_SPEED setting. The maxmimum rating
      for MeasurementMode::HIGH_DYNAMIC is equal to the returned default value of the SRange container object.

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.WCDMA.CViComWcdmaInterface.GetDemodThresholdLimits">
   Limits for Parameter SDemodulationSettings::sCINRThresholdInDB100.
   The resulting demod threshhold limits are specified for the MeasurementMode::HIGH_DYNAMIC setting. 
   The minimum limit for MeasurementMode::HIGH_SPEED is equal to the returned default value of the SRange container object.

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.WCDMA.CViComWcdmaInterface.GetChannelCountLimits">
   Limits for Parameter SChannelSettings::dwCount

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.WCDMA.CViComWcdmaInterface.GetBasicInterface">
   The basic interface is a part of any application specific ViCom interface. It is used for different TSM applications.
   The purpose is to control basic TSM functions, which are not specific for a certain measurement.
   See CViComBasicInterface for specification of basic interface functions.


   @return reference to the BasicInterface object that can be used to control basic functions like
      StartMeasurement() and StopMeasurement() et al.

</member>
        <member name="T:RohdeSchwarz.ViCom.WCDMA.CViComWcdmaInterface">
WCDMA measurement module for ViCom. Offers the configuration and result receiving methods for all WCDMA related
measurement tasks.
\@attribute[type="interface" supportedDevices="TSME"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WCDMA.SL3DecoderResult">
Result from the Layer 3 Decoder.

The string returned via this structure is formatted using the ASN.1 notation of the UMTS standard
( 3GPP TS 25.331 V6.9.0 (2006-03) ), which can be found under the following location
"http://www.3gpp.org/ftp/Specs/2006-03/Rel-6/25_series/".
It contains one completely decoded PDU terminated by CR+LF. Data subsets (i.e. Information Elements)
within the string are headed by "CR+LF+{", indented via spaces and terminated by "}+CR+LF".

In addition to the standard, some Information Elements are added twice (see example cellIdentity below):
   1. Formatted exactly according to the standard.
   2. Formatted with unit or format description between square brackets ("[" "]") and representing a reasonable value.

For instance, a SIB3 PDU will be decoded as follows:

@code
value SysInfoType3 ::=
{
   sib4indicator FALSE,
   cellIdentity '11011011 01110110 01011001 1101'B,
   cellIdentity[16 Bit] 26013,
   cellSelectReselectInfo
   {
      mappingInfo
      {
         {
            rat gsm,
            mappingFunctionParameterList
            {
               {
                  functionType linear,
                  mapParameter1 1,
                  mapParameter2 1,
                  upperLimit 1
               }
            }
         }
      },
      cellSelectQualityMeasure cpich-Ec-N0 :
      {
         q-HYST-2-S 1,
         q-HYST-2-S[dB] 2
      },
      modeSpecificInfo fdd :
      {
         s-Intrasearch 7,
         s-Intrasearch[dB] 14,
         s-Intersearch 3,
         s-Intersearch[dB] 6,
         s-SearchHCS 2,
         s-SearchHCS[dB] 5,
         rat-List
         {
            {
               rat-Identifier gsm,
               s-SearchRAT 2,
               s-HCS-RAT 1,
               s-HCS-RAT[dB] 3,
               s-Limit-SearchRAT 2
            }
         },
         q-QualMin -18,
         q-RxlevMin -58,
         q-RxlevMin[dBm] -115
      },
      q-Hyst-l-S 1,
      q-Hyst-l-S[dB] 2,
      t-Reselection-S 2,
      hcs-ServingCellInformation
      {
         hcs-PRIO 2,
         q-HCS 0,
         t-CR-Max notUsed : NULL
      },
      maxAllowedUL-TX-Power 24
   },
   cellAccessRestriction
   {
      cellBarred notBarred : NULL,
      cellReservedForOperatorUse notReserved,
      cellReservationExtension notReserved,
      accessClassBarredList
      {
         notBarred,
         notBarred,
         notBarred,
         notBarred,
         notBarred,
         notBarred,
         notBarred,
         notBarred,
         notBarred,
         notBarred,
         notBarred,
         notBarred,
         notBarred,
         notBarred,
         notBarred,
         notBarred
      }
   }
}
@endcode
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WCDMA.SL3DecoderRequest">
Request for the Layer 3 Decoder.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.ListMeasurementRates">
List of measurement rates rates and other values in relation to the measurement rate for
one or more time intervals of measurement rate calculation. The measurement rate is
the ratio of all measurements of the same type of measurement at the time
the measurement signals have been picked from the air. So the time of arrival
at the host application is not used. And equal measurements at different RF channels are put together.

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.ListOfCPichCirs">
Result list of C-PICH CIRs.

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SCPichCir.SMaxPeak.dwRadioFrameNumber">
Virtual Radio Frame Number (RFN) assigned to each radio frame received.
The RFN counting is started for each new combination of Channel and ExtendedSC,
i.e. dwChannelIndex, SExtendedSC::wSC, SExtendedSC::wIndicator.
See explanation for SExtendedSC.

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SCPichCir.SMaxPeak.dFrameToaOffsetToPpsInSec">
         Time difference between Radio Frame Time of Arrival and the latest PPS pulse received.
         The time, when the maximum CIR peak has been received, is used as Radio Frame Time of Arrival.

         According to 3GPP TS25.211 Chapter 5, the WCDMA FDD radio frame (P-CPICH) has 10 ms length.

         To determine the frame delay as value within +/- half of the radio frame length (+/- 10 ms / 2  =&gt;  5 ms),
         the provided dFrameToaOffsetToPpsInSec must be processed according to he following principle:
         double dFrameDelay_ms = ( (1000*dFrameToaOffsetToPpsInSec  + 5 ms) modulo 10 ms ) - 5 ms

         @note
         This feature requires a GPS antenna to be connected to the receiver.

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SCPichCir.SMaxPeak.pMaxPeakInfo">
Pointer to the maximum element of the CIR Peak list. 
This value is not optional, it is a pointer to avoid copying data.

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SCPichCir.ListOfPeaks">
Peak result list.

</member>
        <member name="T:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SCPichCir.SPeakInfo.SSCHPowerValues">
Structure for code power values of synchronisation channels. This values are only valid, if a new synchronisation to this
C-PICH signal was possible. If this values are invalid, then the measurement had be taken only because of a previous
measurement of the same Node B. In this case the pointer to this structure is NULL.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SCPichCir.SPeakInfo">
structure which contains results for separated peak values in the CIR
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SCPichCir.SBchCellIdentification">
If the BCH demodulator has already demodulated signal of the node b we assume for the ExtendedSC then we get a valid
pointer to this structure. If no demodulation result is available then the pointer to this structure is NULL.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SCPichCir">
For most code power measurements and for P-CPICH CIR measurements not only the absolute code power value (in 0.01dBm) is
reported but in addition the absolute total inband power value (InbandPower) belonging to the code power measurement is reported.
This makes it possible to calculate the Ec/Io for the measured code power by subtracting the InbandPower which belongs to the
code power.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SPSyncCir.sCodePowerInDBm100">
This array contains the measured power values

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SPSyncCir.dwFixCountOfCirValues">
Maximum number of CIR  values in measurement

</member>
        <member name="T:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SPSyncCir">
These are the actual CIR measurements.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.psAverageInbandPowerInDBm100">
   CIR for the P-Sync sequence. This CIR is not specific for a special C-PICH but for the P-SCH channel which is common to all node b.

   If a CIR measurement had no success (e.g. there is no WCDMA signal on air) then we get at least the received power of the
   specified channel.
   The pointer to this power value is valid (!= NULL) if a power measurement was performed.

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.sInvalidPowerInDBm100">
The power values of the CIR are given in 0.01dB resolution as 16 bit signed integer values in the range of (-327.67..327.67dBm).
Some power values of a CIR may be below the noise limit or have not been measured. In this case the integer gets the invalid power value
0x8000 = -32768 = -2^15 = -327.68dBm.

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.dwCirSamplingRateInHz">
Sometimes it is more convenient to operate with the reciprocal of the CIR resolution. This is the CIR sampling rate = 2^16/10ms.

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.dwCirResolutionInFemtoSeconds">
The CIR is given as a discrete power delay spectrum. The resolution (time distance of adjacent power values) is 10ms/2^16.
This value is given as an integer constant in femto seconds (10^-15 sec). It is 38400/2^16 = 0.5859375 times the
chip distance and about 0.15 micro seconds.

</member>
        <member name="T:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SDemodResult.SSFN_Info">
      Optional information about radio frame numbers and times.
      Each element is only valid, if its value is not SDefs::INVALID_DWORD_VALUE.

      @note: 
      If you want to use scheduling information from MIB or Scheduling Blocks (SB1, SB2) together with dwSystemFrameNumber,
      you must take into account, that the SFN start value of the scheduling information is related to the first segment, 
      whereas SFN and RFN reported here are related to the most recently received segment (i.e. the last segment) of the PDU.

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.dwChannelIndex">
   Channel index to which the measurement belongs.

   Each result is for only one of the selected RF channels. The channel index counts from 0 and corresponds to the
   array index in SChannelSettings::pdTableOfFrequencyInMHz.

</member>
        <member name="T:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SExtendedSC">
Scrambling codes (SC) are measured and used to identify the Node B which is using the SC. If C-PICH signals
generated with the same SC have been received then the PN-Scanner normally relates this signal to each other
with the assumption that this signals have been transmitted from the same Node B. But in the case of different
frame timing (outside a range for reflections) or if the measurements have been acquired at different times
(with more than a few minutes delay), the assumption that both signals have been transmitted from the same
Node B is wrong or may be uncertain.
To indicate whether received signals with the same SC at the same RF channel are reliably related
(transmitted from the same Node B) the PN-Scanner attaches an indicator to each measured SC.
If this indicator is different for the same SC, the signals may be transmitted from the same Node B,
but this is not certain. This uncertainty can be resolved by Cell Identity measurements (SIB3 demodulation).
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WCDMA.SMeasResult">
This structure holds a measurement result from the result buffer. Please refer to the manual for a detailed discussion of
how to interpret the results.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WCDMA.SSettings">
By means of the functions: SetConfiguration() internal settings of the PN-Scanner may be changed and with the functions SelectReceiver(),
SetTimebaseSynchronisationMode() of CViComBasicInterfaceData change basic settings.
Except of frequency settings all other settings have default values.

This structure bundles these settings and will be returned as result from the GetSettings() method.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SDemodulationSettings.dwFrontEndSelectionMask">
Receiver front end to be used by the demodulator for this channel. 
If no demodulation shall be provided, this shall be set to 0.
Demodulation tasks are not allowed to contain multiple FE's.

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SDemodulationSettings.dwMaxNodeBHoldTimeInSec">
Time limit the scanner remembers an already measured NodeB (channel, SC, SCId).
If a NodeB defined by channel, SC and SCId was not received for the here specified time,
the combination channel, SC and SCId will not be used anymore.
This causes a restart of all demodulation requests for this NodeB.

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SDemodulationSettings.lEcToIoThresholdInDB100">
Threshold for demodulation trials in 0.01dB.
For default value and range see GetDemodThresholdLimits().

</member>
        <member name="T:RohdeSchwarz.ViCom.WCDMA.SDemodulationSettings">
This structure is used to configure the BCH demodulation process.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SDemodRequests.pDemodRequests">
@brief Array of SDemodRequest, counter is dwCountOfRequests above
\@attribute[type="array" size="dwCountOfRequests" sizeismember="true"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WCDMA.SDemodRequests.SDemodRequest">
   There must be one instance of this structure for each demodulation request,
   therefore different PDUs can be measured on different channels.

   Example for start measurement:
            On the first channel SIBs 3 and 4 shall be decoded, on the the second channel SIBs 3, 5 and 7 shall be decoded.
            SIB 5 shall be decoded repeatedly every 10 seconds (100*100 ms) and SIB 7 shall be decoded on demand.
            This requires five structures containing the following parameter sets:
   @code
            (0, SIB3, 0, 0, 0, 0)
            (0, SIB4, 0, 0, 0, 0)
            (1, SIB3, 0, 0, 0, 0)
            (1, SIB5, REPETITION, 100, 0, 0)
            (1, SIB7, ON_CMD, 0, 0, 0)
   @endcode
   Example during measurement:
            On channel 0 PDU demodulation shall be completely reset for the node b identified by SC 375 SC ID 0
            and on the the second channel SIB 7 shall be decoded for the node b identified by SC 429 SC ID 0 with
            a timeout for the request of 1 sec (10*100ms):
   @code
            (0, 0, BTS_RESET, 0, 375, 0)
            (1, SIB7, BTS, 10, 429, 0)
   @endcode
   Note that you are responsible to manage the memory when you use SetDemodulationSettings().
   Note: All parameters which are not necessary for a certain request shall be set to 0.

   If any PDU besides MIB, SB1 and SB2 shall be decoded, SIB3 needs to be requested as well.
   \@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WCDMA.SDemodRequests">
This structure is used to configure PDU requests.
It is used in start measurement requests and it is used to issue demodulation requests during measurement,
e.g. SIB requests on demand or to reset SIB demodulation.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WCDMA.DemodMode">
This enumeration defines modes for the demodulation.
Use this in the SDemodRequest structure to specify when the demodulation 
of this PDU shall be done.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WCDMA.Pdu">
This enumeration defines a translation table from SIB to PDU. Use this in the
SDemodRequest structure to define what SIB shall be decoded.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SChannelSettings.bDriftScanning">
Setting bDriftScanning to TRUE will enable WCDMA drift scanning to track 
drifting NodeBs.  NodeBs with similar drifts will be grouped together;
however, there is a limit on the number of groups that can be tracked.  If
the limit is reached, a logging message is displayed in the message tracer 
file.

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SChannelSettings.fDriftWarningThresholdInPpm">
When a NodeB is detected to be drifting in excess of this threshold, the value
\ref SMeasResult::SCPichCir::bExceededDriftLimit is set to TRUE.  The threshold 
is set in units of parts per million (ppm).  1 ppm = 1000 ns/sec.
\note The flag bDriftScanning must be enabled in order to set this value.

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SChannelSettings.pTableOfFrequencySetting">
Pointer to an array containing the frequencies of the selected channels.
The number of members in the array is defined by dwCount (above).
For value range see SReceiver::SSupportedFrequencies.
\@attribute[type="array" size="dwCount" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SChannelSettings.dwCount">
   Number of frequency configurations that shall be used from the pTableOfFrequencySetting 
   to perform the measurement tasks.

   For value range see GetChannelCountLimits().
   *
</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SChannelSettings.dwToaAvgWindowLengthMs">
Length of the sliding window for Time of Arrival averaging in ms. 
Values in the near past of the current value contribute more to the average 
than older values. Values older than dwToaAvgWindowLengthMs will contribute 
significantly less to the average value.
If &gt; 1, this value is treated as double Sigma threshold of a Gaussian distribution
in time, on which the averaging is based.
If 1, results are provided without averaging.
If 0, feature deactivated, no ToA processing and no results. This is the default!

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SChannelSettings.dwMeasRatePer1000Sec">
The desired measurement rate value. For default value and range see GetMeasRateLimits().
The limits are dependent from the currently set eMeasurementMode.

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SChannelSettings.eMeasurementMode">
Measurement mode settings.

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SChannelSettings.dwFrontEndSelectionMask">
Receiver front end to be used by the scanner for this channel.
Scanner tasks are not allowed to contain multiple FE's.

</member>
        <member name="T:RohdeSchwarz.ViCom.WCDMA.SChannelSettings">
SChannelSettings contains the count of channels or frequencies and the table of frequencies in MHz.

The selection of new frequencies (with SetConfiguration) automatically resets the BCH demodulator,
so that it demodulates the default SIBs.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WCDMA.MeasurementMode">
This defines the different measurement modi. For the TSML device, only the HIGH_SPEED mode can be set.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.WCDMA.SFrequencySetting.dCenterFrequencyInHz">
Center frequency of the channel in Hz.

</member>
        <member name="T:RohdeSchwarz.ViCom.WCDMA.SFrequencySetting">
This defines the frequency in Hz.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WCDMA.SChannelState">
Struct containing the channel measurement settings that can be modified during a running measurement
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.WCDMA.etViComInterfaceVersion">
Data containers used for ViCom WCDMA interface. Contains measurement configuration and result structures.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterface.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterface.GetType">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterface.RetrieveTextForPDU(System.String)">
            <summary>
Issue a request to the V2X message decoder to decode the contents of the PDCP PDU byte buffer contained in pduByteBuffer. If the data has been decoded successfully, the method creates the XML string on the heap and returns a pointer to it.
The first byte in pduByteBuffer should contain the region with remaining bytes being the ITS message. The ITS message may contain other protocol headers such as IEEE1609.3 header, IEEE1609.2 header, etc. that will be processed by the decoder.
@note
ITS message decoding requires a specific version of Wireshark to be installed. Will error if it is not found.
</summary>
            <param name="pduByteBuffer">
Contains the data that was the result of an V2X measurement and holds the message data that shall be decoded.
</param>
            <return>
A pointer to the decoded ITS message in XML format, if the function succeeded. Otherwise NULL. !! Attention !! : The returned pointer is only valid until RetrieveTextForPDU is called again.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterface.ResetConfiguration">
            <summary>
Resets the configuration for V2X scanning.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterface.SetITSMessageDecoding(System.Boolean)">
            <summary>
SetITSMEssageDecoding will indicate if the ITS messages should be decoded by ViCom or not. @note
Regardless of the choice, the raw ITS message will still be reported.
@note
ITS message decoding is disabled by default.
</summary>
            <param name="DecodeChoice">
Set to true to enable ViCom ITS message decoding capabilities. Set to false to disable ViCom ITS message decoding capabilities.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterface.RemoveChannel(System.UInt32)">
            <summary>
RemoveChannel is used remove a channel to V2X for measurements. @note
This method can only be called in the idle state (IsMeasurementStarted() must return false)
</summary>
            <param name="channelIndex">
Channel index to remove from ViCom
</param>
            <return>
Returns true if channel was successfully removed and false if the channel did not exist or was unable to removed.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterface.GetChannelIndex(System.Double)">
            <summary>
In case the channel index for a configuration is lost, it can be retrieved using GetChannelIndex and the frequency.
</summary>
            <param name="frequencyInHz">
Center frequency in Hertz for the channel.
</param>
            <return>
Returns the channel index associated with the selected frequency, otherwise will return a INVALID_DWORD value indicating that the frequency was not found.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterface.AddChannel(RohdeSchwarz.ViCom.Net.V2X.RegionFlag.Type,System.Double,System.UInt16,RohdeSchwarz.ViCom.Net.V2X.SPoolParameters)">
            <summary>
AddChannel is used add a channel to V2X for measurements. @note
This method can only be called in the idle state (IsMeasurementStarted() must return false)
</summary>
            <param name="region">
Indicates the region for the channel. Refer to RegionFlag for details.
</param>
            <param name="frequencyInHz">
Center frequency in Hertz for the channel.
</param>
            <param name="numberOfResourceBlocks">
Number of resource blocks to measure on V2X (bandwidth).
</param>
            <param name="poolParameters">
Defines the pool parameters needed for V2X measurements.
</param>
            <return>
If success, the 0-based channel index for new channel is returned. If failure, 0xFFFFFFFF is returned indicating an invalid channel.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterface.GetChannelCountLimits">
            <summary>
Limits for Parameter SChannelSettings::dwCount
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterface.SelectFrontEnd(System.UInt32)">
            <summary>
Allows manual selection of the front end (FE). Used when more than one FE is connected. If a FE is not specified, will default to using SRFPort::RF_1 also known as FE 1.
</summary>
            <param name="frontend">
FE that should be used. Filled using SRFPort structure.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterface.GetBasicInterface">
            <summary>
The basic interface is a part of any application specific ViCom interface. It is used for different device applications. The purpose is to control basic device functions, which are not specific for a certain measurement. See CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterface.#ctor(RohdeSchwarz.ViCom.V2X.CViComV2xInterface*)">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterface.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterface.m_converter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterface.m_nativeIf">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterface.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterface">
            <summary>
V2X measurement module for ViCom. Offers the configuration and result receiving methods for all V2X related measurement tasks.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.ICViComV2xInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.ICViComV2xInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.ICViComV2xInterface.RetrieveTextForPDU(System.String)">
            <summary>
Issue a request to the V2X message decoder to decode the contents of the PDCP PDU byte buffer contained in pduByteBuffer. If the data has been decoded successfully, the method creates the XML string on the heap and returns a pointer to it.
The first byte in pduByteBuffer should contain the region with remaining bytes being the ITS message. The ITS message may contain other protocol headers such as IEEE1609.3 header, IEEE1609.2 header, etc. that will be processed by the decoder.
@note
ITS message decoding requires a specific version of Wireshark to be installed. Will error if it is not found.
</summary>
            <param name="pduByteBuffer">
Contains the data that was the result of an V2X measurement and holds the message data that shall be decoded.
</param>
            <return>
A pointer to the decoded ITS message in XML format, if the function succeeded. Otherwise NULL. !! Attention !! : The returned pointer is only valid until RetrieveTextForPDU is called again.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.ICViComV2xInterface.ResetConfiguration">
            <summary>
Resets the configuration for V2X scanning.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.ICViComV2xInterface.SetITSMessageDecoding(System.Boolean)">
            <summary>
SetITSMEssageDecoding will indicate if the ITS messages should be decoded by ViCom or not. @note
Regardless of the choice, the raw ITS message will still be reported.
@note
ITS message decoding is disabled by default.
</summary>
            <param name="DecodeChoice">
Set to true to enable ViCom ITS message decoding capabilities. Set to false to disable ViCom ITS message decoding capabilities.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.ICViComV2xInterface.RemoveChannel(System.UInt32)">
            <summary>
RemoveChannel is used remove a channel to V2X for measurements. @note
This method can only be called in the idle state (IsMeasurementStarted() must return false)
</summary>
            <param name="channelIndex">
Channel index to remove from ViCom
</param>
            <return>
Returns true if channel was successfully removed and false if the channel did not exist or was unable to removed.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.ICViComV2xInterface.GetChannelIndex(System.Double)">
            <summary>
In case the channel index for a configuration is lost, it can be retrieved using GetChannelIndex and the frequency.
</summary>
            <param name="frequencyInHz">
Center frequency in Hertz for the channel.
</param>
            <return>
Returns the channel index associated with the selected frequency, otherwise will return a INVALID_DWORD value indicating that the frequency was not found.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.ICViComV2xInterface.AddChannel(RohdeSchwarz.ViCom.Net.V2X.RegionFlag.Type,System.Double,System.UInt16,RohdeSchwarz.ViCom.Net.V2X.SPoolParameters)">
            <summary>
AddChannel is used add a channel to V2X for measurements. @note
This method can only be called in the idle state (IsMeasurementStarted() must return false)
</summary>
            <param name="region">
Indicates the region for the channel. Refer to RegionFlag for details.
</param>
            <param name="frequencyInHz">
Center frequency in Hertz for the channel.
</param>
            <param name="numberOfResourceBlocks">
Number of resource blocks to measure on V2X (bandwidth).
</param>
            <param name="poolParameters">
Defines the pool parameters needed for V2X measurements.
</param>
            <return>
If success, the 0-based channel index for new channel is returned. If failure, 0xFFFFFFFF is returned indicating an invalid channel.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.ICViComV2xInterface.GetChannelCountLimits">
            <summary>
Limits for Parameter SChannelSettings::dwCount
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.ICViComV2xInterface.SelectFrontEnd(System.UInt32)">
            <summary>
Allows manual selection of the front end (FE). Used when more than one FE is connected. If a FE is not specified, will default to using SRFPort::RF_1 also known as FE 1.
</summary>
            <param name="frontend">
FE that should be used. Filled using SRFPort structure.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.ICViComV2xInterface.GetBasicInterface">
            <summary>
The basic interface is a part of any application specific ViCom interface. It is used for different device applications. The purpose is to control basic device functions, which are not specific for a certain measurement. See CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.V2X.ICViComV2xInterface">
            <summary>
V2X measurement module for ViCom. Offers the configuration and result receiving methods for all V2X related measurement tasks.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterfaceDataProcessor.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.V2X.CViComV2xInterfaceDataProcessor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderV2x.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderV2x.m_loader">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderV2x.GetInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderV2x.GetBasicInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderV2x.SetSettings(RohdeSchwarz.ViCom.Net.SReceiverSettings)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderV2x.Disconnect">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderV2x.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComError@,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderV2x.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderV2x.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderV2x.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderV2x">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.V2X.CViComV2xInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.V2X.SMeasResult&gt;*)">
   Unregister a formerly registered ScannerData listener to remove it from the list of objects that
   shall get notification about new measurement data.

   @param[in] pListener
      The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered
      objects, an error is indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.V2X.CViComV2xInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.V2X.SMeasResult&gt;*)">
   Register a ScannerData listener that will be notified when new data is available. Note that it is
   important to Unregister the listener again once it is getting deleted, to avoid crashes.

   @param[in] pListener
      The object that shall be notified when new measurement data is available. This must not be
      null. If the listener has already been registered to the interface, it will not be
      registered a second time. Instead, an error will be indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.V2X.CViComV2xInterface.RetrieveTextForPDU(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
   Issue a request to the V2X message decoder to decode the contents of the PDCP PDU byte buffer
   contained in pduByteBuffer. If the data has been decoded successfully, the method creates 
   the XML string on the heap and returns a pointer to it.
   
   The first byte in pduByteBuffer should contain the region with remaining bytes being the 
   ITS message.  The ITS message may contain other protocol headers such as IEEE1609.3 header,
   IEEE1609.2 header, etc. that will be processed by the decoder.

   @note ITS message decoding requires a specific version of Wireshark to be installed.  Will error if it is not found.
   
   @param[in] pduByteBuffer
      Contains the data that was the result of an V2X measurement and holds the message data that shall be decoded.

   @return
      A pointer to the decoded ITS message in XML format, if the function succeeded.  Otherwise NULL.
      !! Attention !! : The returned pointer is only valid until RetrieveTextForPDU is called again.

</member>
        <member name="M:RohdeSchwarz.ViCom.V2X.CViComV2xInterface.GetBasicInterface">
   The basic interface is a part of any application specific ViCom interface. It is used for different device applications.
   The purpose is to control basic device functions, which are not specific for a certain measurement.
   See CViComBasicInterface for specification of basic interface functions.

   @return
      reference to the BasicInterface object that can be used to control basic functions like
      StartMeasurement() and StopMeasurement() et al.

</member>
        <member name="M:RohdeSchwarz.ViCom.V2X.CViComV2xInterface.ResetConfiguration">
Resets the configuration for V2X scanning.

</member>
        <member name="M:RohdeSchwarz.ViCom.V2X.CViComV2xInterface.SetITSMessageDecoding(System.Boolean)">
   SetITSMEssageDecoding will indicate if the ITS messages should be decoded by ViCom or not.
   @note Regardless of the choice, the raw ITS message will still be reported.
   @note ITS message decoding is disabled by default.

   @param[in] DecodeChoice
      Set to true to enable ViCom ITS message decoding capabilities.
      Set to false to disable ViCom ITS message decoding capabilities.

</member>
        <member name="M:RohdeSchwarz.ViCom.V2X.CViComV2xInterface.RemoveChannel(System.UInt32!System.Runtime.CompilerServices.IsLong)">
   RemoveChannel is used remove a channel to V2X for measurements.
   @note This method can only be called in the idle state (IsMeasurementStarted() must return false)

   @param[in] channelIndex
      Channel index to remove from ViCom

   @return
      Returns true if channel was successfully removed and false if the channel did not exist or was unable
      to removed.

</member>
        <member name="M:RohdeSchwarz.ViCom.V2X.CViComV2xInterface.GetChannelIndex(System.Double)">
   In case the channel index for a configuration is lost, it can be retrieved using GetChannelIndex
   and the frequency.

   @param[in] frequencyInHz
      Center frequency in Hertz for the channel.

   @return
      Returns the channel index associated with the selected frequency, otherwise will return a INVALID_DWORD
      value indicating that the frequency was not found.

</member>
        <member name="M:RohdeSchwarz.ViCom.V2X.CViComV2xInterface.AddChannel(RohdeSchwarz.ViCom.V2X.RegionFlag.Type,System.Double,System.UInt16,RohdeSchwarz.ViCom.V2X.SPoolParameters)">
   AddChannel is used add a channel to V2X for measurements. 
   @note This method can only be called in the idle state (IsMeasurementStarted() must return false)

   @param[in] region
      Indicates the region for the channel. Refer to RegionFlag for details.

   @param[in] frequencyInHz
      Center frequency in Hertz for the channel.

   @param[in] numberOfResourceBlocks
      Number of resource blocks to measure on V2X (bandwidth).

   @param[in] poolParameters
      Defines the pool parameters needed for V2X measurements.

   @return
      If success, the 0-based channel index for new channel is returned.  If failure, 0xFFFFFFFF is returned indicating an invalid channel.

</member>
        <member name="M:RohdeSchwarz.ViCom.V2X.CViComV2xInterface.GetChannelCountLimits">
   Limits for Parameter SChannelSettings::dwCount

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.V2X.CViComV2xInterface.SelectFrontEnd(System.UInt32)">
   Allows manual selection of the front end (FE). Used when more than one FE is connected.
   If a FE is not specified, will default to using SRFPort::RF_1 also known as FE 1.

   @param[in] frontend
      FE that should be used. Filled using SRFPort structure.

</member>
        <member name="T:RohdeSchwarz.ViCom.V2X.CViComV2xInterface">
V2X measurement module for ViCom. Offers the configuration and result receiving methods for all V2X related
measurement tasks.
\@attribute[type="interface" supportedDevices="TSME"]

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.DataConverterCViComV2xInterfaceData.Convert2M(RohdeSchwarz.ViCom.Technology.Type)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.DataConverterCViComV2xInterfaceData.Convert2M(RohdeSchwarz.ViCom.V2X.SMeasResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.DataConverterCViComV2xInterfaceData.Convert2M(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.DataConverterCViComV2xInterfaceData.Convert2M(RohdeSchwarz.ViCom.SRange&lt;System.UInt32&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.DataConverterCViComV2xInterfaceData.CleanUp(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**,System.String)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.DataConverterCViComV2xInterfaceData.Convert2Cpp(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**,System.String)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.DataConverterCViComV2xInterfaceData.CleanUp(RohdeSchwarz.ViCom.V2X.SPoolParameters*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.V2X.SPoolParameters)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.DataConverterCViComV2xInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.V2X.SPoolParameters*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.V2X.SPoolParameters)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.DataConverterCViComV2xInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.Net.V2X.RegionFlag.Type)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.DataConverterCViComV2xInterfaceData.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.DataConverterCViComV2xInterfaceData.Instance">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.DataConverterCViComV2xInterfaceData.s_instance">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.V2X.DataConverterCViComV2xInterfaceData">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResults">
            <summary>
List of PSCCH and PSSCH (if available) measured on this channel.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.channelIndex">
            <summary>
The channel to which all the data relates is specified using this index. The index refers to the position in the SChannelSettings::pTableOfFrequencySetting array.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.utcTimeInSec">
            <summary>
In case that a synchronisation to UTC was possible this is the number of seconds from 00:00:00 UTC on 1 January 1970. Leap seconds are ignored.
If utcTime is not possible, utcTimeInSec will come back as an invalid dword.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.timeStampInMs">
            <summary>
PC local time when the signal was measured (or was started to being measured) on the device.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.itsDecodedMessageResults">
            <summary>
The decoded ITS message. Used when SetITSMessageDecoding( true ) has been set in ViCom to utilize ViCom's decoder.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.itsRawMessageResults">
            <summary>
The raw undecoded ITS message. Used when a different decoder is preferred over ViCom.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.sidelinkControlInfoResult">
            <summary>
This is nullptr if no SCI information is available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.sharedChannelResult">
            <summary>
This is nullptr if no PSSCH information is available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.rsRssiDbm">
            <summary>
Reference Signal Received Signal Strength Indicator in dBm.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.rsrpDbm">
            <summary>
Reference Signal Received Power in dBm.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.rsCinrDb">
            <summary>
Reference Signal Carrier to Interference and Noise Ratio in dB.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.ITSMessageResult.itsMessage">
            <summary>
The ITS message. Depending on which SViComList is called used can contain information on the Raw or Decoded version of the ITS message.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.ITSMessageResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.ITSMessageResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.ITSMessageResult">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.SCIResult.retransmissionIndex">
            <summary>
If the retransmission index = 0/1, then the repetition is after/before the main transmission.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.SCIResult.freqResourceLocation">
            <summary>
This is our well known RIV number and is explained in TS36.213 Section 14.1.1.4C. The legal number of sidelink subchannels = N_SL_SubCH = 1, 3, 5, 10, 15, 20.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.SCIResult.resourceReservation">
            <summary>
Set to 0 for Transmission Mode (TM) 3. For TM4, the Resource Reservation interval (= 20, 50, 100, 200, 300, ... 1000 msec) is divided by 100 to produce an index X into TS36.213 Table 14.2.1-2. The content of that index is the Resource Reservation. The Resource Reservation field indicates when and whether the next message is sent.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.SCIResult.MCS">
            <summary>
The Modulation and Coding Scheme. See TS36.213 Table 7.1.7.1-1 and Table 7.1.7.2.1-1.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.SCIResult.timeGap">
            <summary>
The TimeGap is the absolute difference between the index of the Subframe of the current transmission and the index of the subframe of the retransmission, used to set the SFgap. See TS36.212, TS36.213 and TS36.321.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.SCIResult.priority">
            <summary>
A 3 bit quantity indicating the quality of service. The higher quality the service is, the higher it's priority is compared to other services.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.SCIResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.SCIResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.SCIResult">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.PSSCHResult.peakPathDelayInNSec">
            <summary>
Approximate flight time of the path with the largest magnitude in nanoseconds.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.PSSCHResult.BER">
            <summary>
Bit error rate. Value is provided by Turbo Decoder Algorithm. BER represented as a ratio.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.PSSCHResult.sourceID">
            <summary>
The MAC source ID provided in the MAC SL-SCH header. This ID temporarily defines the V2X transmitter. If there is no MAC PDU sourceID will be invalid.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.PSSCHResult.rsrpDbm">
            <summary>
Reference Signal Received Power in dBm.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.PSSCHResult.rsCinrDb">
            <summary>
Reference Signal Carrier to Interference and Noise Ratio in dB.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.PSSCHResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.PSSCHResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult.PSSCHResult">
            <summary>
The shared channel result. Holds decoded V2x messages. Will only be present if channel has been decoded.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.V2X.SMeasResult.PSCCHResult">
            <summary>
The control channel result. Contains location and minor information.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.V2X.SMeasResult">
            <summary>
The V2X measurement result for a single channel returned by CViComV2xInterface::GetResult().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SPoolParameters.subframeBitMapSize">
            <summary>
Determines the length in bits of subframeBitMap.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SPoolParameters.startRBForPscchPool">
            <summary>
Indicates the lowest RB index of the PSCCH pool. Only used if adjacentPscchPssch is false.
startRB-PSCCH-Pool-r14. Ref 3GPP TS36.331
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SPoolParameters.startRBForSubChannel">
            <summary>
Indicates the lowest RB index of the subchannel with the lowest index
startRB-Subchannel-r14. Ref 3GPP TS36.331
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SPoolParameters.numberOfSubChannels">
            <summary>
The number of subchannels in the corresponding resource pool.
numSubchannel-r14. Ref 3GPP TS36.331
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SPoolParameters.sizeOfSubChannel">
            <summary>
Number of Physical Resource Blocks (PRB) of each subchannel in the corresponding resource pool.
A subchannel is a certain number of adjacent resource blocks.
Adjacency = true {n5, n6, n10, n15, n20, n50, n75, n100} Adjacency = false {n4, n5, n6, n8, n9, n10, n12, n15, n16, n18, n20, n30, n48, n72, n96}
If adjacentPscchPssch is true, then the PSSCH and PSCCH are located right next to one another in frequency. If false, they can be seperated in frequency. Meaning there can be a gap of some number of resource blocks in between them.
sizeSubchannel-r14. Ref 3GPP TS36.331
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SPoolParameters.offsetIndicator">
            <summary>
Indicates offset of the first subframe (0-10239) of the subframe pool within the standard range of 1024 direct frames (DFN=0 to DFN=1039)
sl-OffsetIndicator-r14. Ref 3GPP TS36.331
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SPoolParameters.adjacentPscchPssch">
            <summary>
This parameter indicates whether the PSCCH and PSSCH entities are located next to one another in frequency (true) or may have a resource block gap in between them (false).
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.SPoolParameters.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.SPoolParameters.SubframeBitmapSize.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SPoolParameters.SubframeBitmapSize.Type.BIT_100">
            <summary>
Number of bits sl-Subframe-r14 in the bitmap, 100 bit for FDD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SPoolParameters.SubframeBitmapSize.Type.BIT_60">
            <summary>
Number of bits sl-Subframe-r14 in the bitmap, 60 bit for TDD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SPoolParameters.SubframeBitmapSize.Type.BIT_50">
            <summary>
Number of bits sl-Subframe-r14 in the bitmap, 50 bit for TDD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SPoolParameters.SubframeBitmapSize.Type.BIT_40">
            <summary>
Number of bits sl-Subframe-r14 in the bitmap, 40 bit for TDD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SPoolParameters.SubframeBitmapSize.Type.BIT_30">
            <summary>
Number of bits sl-Subframe-r14 in the bitmap, 30 bit for TDD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SPoolParameters.SubframeBitmapSize.Type.BIT_20">
            <summary>
Number of bits sl-Subframe-r14 in the bitmap, 20 bit for FDD/TDD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SPoolParameters.SubframeBitmapSize.Type.BIT_16">
            <summary>
Number of bits sl-Subframe-r14 in the bitmap, 16 bit for FDD/TDD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.SPoolParameters.SubframeBitmapSize.Type.BIT_10">
            <summary>
Number of bits sl-Subframe-r14 in the bitmap, 10 bit for TDD.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.V2X.SPoolParameters.SubframeBitmapSize.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.V2X.SPoolParameters.SubframeBitmapSize">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.V2X.SPoolParameters">
            <summary>
The pool parameters define the subframe pool and resource block pool. The subframe pool defines the subframes where V2X messages may appear, whereas the resource block pool determines within which resource blocks the V2X messages may appear.
The subframe pool is a sequence of subframes T[n] = [ T[0], T[1], T[2], ... T[N-1] ], where the index n = 0 ... N-1 and N is the number of total subframes in the subframe pool.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.V2X.RegionFlag.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.RegionFlag.Type.REGION_CHINA">
            <summary>
China (CN)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.RegionFlag.Type.REGION_EUROPE">
            <summary>
Europe (EU)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.V2X.RegionFlag.Type.REGION_NORTH_AMERICA">
            <summary>
North American (NA)
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.V2X.RegionFlag.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.V2X.RegionFlag">
            <summary>
Indicator used to determine which region V2X will be operating in.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.PSCCHResults">
List of PSCCH and PSSCH (if available) measured on this channel.

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.PSCCHResult.itsDecodedMessageResults">
The decoded ITS message. Used when SetITSMessageDecoding( true ) has been set
in ViCom to utilize ViCom's decoder.
\@attribute[filterable="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.PSCCHResult.itsRawMessageResults">
The raw undecoded ITS message. Used when a different decoder is preferred
over ViCom.
\@attribute[filterable="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.PSCCHResult.ITSMessageResult.itsMessage">
The ITS message. Depending on which SViComList is called used
can contain information on the Raw or Decoded version of the ITS
message.
\@attribute[filterable="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.PSCCHResult.sidelinkControlInfoResult">
This is nullptr if no SCI information is available.
\@attribute[filterable="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.PSCCHResult.SCIResult.retransmissionIndex">
If the retransmission index = 0/1, then the repetition is after/before 
the main transmission.

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.PSCCHResult.SCIResult.freqResourceLocation">
This is our well known RIV number and is explained in TS36.213 Section 14.1.1.4C. 
The legal number of sidelink subchannels = N_SL_SubCH = 1, 3, 5, 10, 15, 20.

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.PSCCHResult.SCIResult.resourceReservation">
Set to 0 for Transmission Mode (TM) 3. For TM4, the Resource Reservation 
interval (= 20, 50, 100, 200, 300, ... 1000 msec) is divided by 100 to 
produce an index X into TS36.213 Table 14.2.1-2. The content of that 
index is the Resource Reservation. The Resource Reservation field 
indicates when and whether the next message is sent.

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.PSCCHResult.SCIResult.MCS">
The Modulation and Coding Scheme. See TS36.213 Table 7.1.7.1-1 and 
Table 7.1.7.2.1-1.

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.PSCCHResult.SCIResult.timeGap">
The TimeGap is the absolute difference between the index of the 
Subframe of the current transmission and the index of the subframe of 
the retransmission, used to set the SFgap.  See TS36.212, TS36.213 and 
TS36.321.

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.PSCCHResult.SCIResult.priority">
A 3 bit quantity indicating the quality of service. The higher quality
the service is, the higher it's priority is compared to other services.

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.PSCCHResult.sharedChannelResult">
This is nullptr if no PSSCH information is available.
\@attribute[filterable="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.PSCCHResult.PSSCHResult.peakPathDelayInNSec">
Approximate flight time of the path with the largest magnitude
in nanoseconds.

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.PSCCHResult.PSSCHResult.BER">
Bit error rate. Value is provided by Turbo Decoder Algorithm.
BER represented as a ratio.

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.PSCCHResult.PSSCHResult.sourceID">
The MAC source ID provided in the MAC SL-SCH header. This ID
temporarily defines the V2X transmitter. If there is no MAC PDU
sourceID will be invalid.

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.PSCCHResult.PSSCHResult.rsrpDbm">
Reference Signal Received Power in dBm.

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.PSCCHResult.PSSCHResult.rsCinrDb">
Reference Signal Carrier to Interference and Noise Ratio in dB.

</member>
        <member name="T:RohdeSchwarz.ViCom.V2X.SMeasResult.PSCCHResult.PSSCHResult">
The shared channel result. Holds decoded V2x messages.
Will only be present if channel has been decoded.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.PSCCHResult.rsRssiDbm">
Reference Signal Received Signal Strength Indicator in dBm.

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.PSCCHResult.rsrpDbm">
Reference Signal Received Power in dBm.

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.PSCCHResult.rsCinrDb">
Reference Signal Carrier to Interference and Noise Ratio in dB.

</member>
        <member name="T:RohdeSchwarz.ViCom.V2X.SMeasResult.PSCCHResult">
The control channel result. Contains location and minor information.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.channelIndex">
The channel to which all the data relates is specified using this index.
The index refers to the position in the SChannelSettings::pTableOfFrequencySetting array.

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.utcTimeInSec">
   In case that a synchronisation to UTC was possible this is the number of seconds from 00:00:00 
   UTC on 1 January 1970. Leap seconds are ignored.

   If utcTime is not possible, utcTimeInSec will come back as an invalid dword.

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SMeasResult.timeStampInMs">
PC local time when the signal was measured (or was started to being measured) on the device.

</member>
        <member name="T:RohdeSchwarz.ViCom.V2X.SMeasResult">
The V2X measurement result for a single channel returned by CViComV2xInterface::GetResult().
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SPoolParameters.subframeBitMapSize">
Determines the length in bits of subframeBitMap.

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SPoolParameters.startRBForPscchPool">
Indicates the lowest RB index of the PSCCH pool. Only used if
adjacentPscchPssch is false.

startRB-PSCCH-Pool-r14. Ref 3GPP TS36.331

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SPoolParameters.startRBForSubChannel">
   Indicates the lowest RB index of the subchannel with the lowest index

   startRB-Subchannel-r14. Ref 3GPP TS36.331

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SPoolParameters.numberOfSubChannels">
   The number of subchannels in the corresponding resource pool.

   numSubchannel-r14. Ref 3GPP TS36.331

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SPoolParameters.sizeOfSubChannel">
   Number of Physical Resource Blocks (PRB) of each subchannel in the 
   corresponding resource pool.

   A subchannel is a certain number of adjacent resource blocks.

   Adjacency = true {n5, n6, n10, n15, n20, n50, n75, n100}
   Adjacency = false {n4, n5, n6, n8, n9, n10, n12, n15, n16, n18, n20, n30, n48, n72, n96}

   If adjacentPscchPssch is true, then the PSSCH and PSCCH are located right next to one another in
   frequency. If false, they can be seperated in frequency. Meaning there can be a gap of some 
   number of resource blocks in between them.

   sizeSubchannel-r14. Ref 3GPP TS36.331

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SPoolParameters.offsetIndicator">
   Indicates offset of the first subframe (0-10239) of the subframe pool within the standard 
   range of 1024 direct frames (DFN=0 to DFN=1039)

   sl-OffsetIndicator-r14. Ref 3GPP TS36.331

</member>
        <member name="F:RohdeSchwarz.ViCom.V2X.SPoolParameters.adjacentPscchPssch">
This parameter indicates whether the PSCCH and PSSCH entities are located next to one 
another in frequency (true) or may have a resource block gap in between them (false).

</member>
        <member name="T:RohdeSchwarz.ViCom.V2X.SPoolParameters">
The pool parameters define the subframe pool and resource block pool. 
The subframe pool defines the subframes where V2X messages may appear, whereas 
the resource block pool determines within which resource blocks the V2X messages 
may appear.

The subframe pool is a sequence of subframes T[n] = [ T[0], T[1], T[2], ... T[N-1] ], 
where the index n = 0 ... N-1 and N is the number of total subframes in 
the subframe pool.

\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.V2X.RegionFlag">
Indicator used to determine which region V2X will be operating in.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.V2X.etViComInterfaceVersion">
Data containers used for ViCom V2X interface. Contains measurement configuration and result structures.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderNoTemplate.BuildTsmeLoaderNR">
Builds a specific TSME loader for NR. There is no NR support for
TSMW or TSMx devices.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderNoTemplate.BuildTsmeLoaderWimax">
Builds a specific TSME loader for WIMAX.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderNoTemplate.BuildTsmeLoaderGps">
Builds a specific TSME loader for the GPS internal device

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderNoTemplate.BuildTsmxPps2LoaderGps">
Builds a specific TSMX-PPS2 loader for the GPS internal device

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderNoTemplate.BuildTsmeLoaderLte">
Builds a specific TSME loader for LTE.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderNoTemplate.BuildTsmeLoaderGsm">
Builds a specific TSME loader for GSM NWS

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderNoTemplate.BuildTsmeLoaderRFPowerScan">
Builds a specific Tsme loader for RFPowerScan

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderNoTemplate.BuildTsmeLoaderWcdma">
Builds a specific Tsme loader for Wcdma

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderNoTemplate.BuildTsmeLoaderCWScan">
Builds a specific Tsme loader for CW

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderNoTemplate.BuildTsmeLoaderCdma">
Builds a specific Tsme loader for Cdma

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderNoTemplate.BuildTsmeLoader(System.Type)">
Builds a specific Tsme loader of the desired type

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderNoTemplate.BuildTsmxPps2Loader(System.Type)">
Builds a specific TsmxPPS2 loader of the desired type

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderNoTemplate.EffectiveLoader">
Returns a reference to the effective loader, an instance of the CViComLoaderHelper,
based on the specific technology of this instance.

</member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComLoaderNoTemplate.m_effectiveLoader">
Reference to the effective loader, an instance of the CViComLoaderHelper

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderNoTemplate.#ctor">
Protected c-tor

</member>
        <member name="P:RohdeSchwarz.ViCom.Net.CViComLoaderNoTemplate.Connected">
Returns true when this loader is connected, false otherwise

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderNoTemplate.Dispose">
Destructor

</member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComLoaderNoTemplate">
Base class, no-template implementation part of the CViComLoader generic classes

</member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderNr.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderNr.m_loader">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderNr.GetInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderNr.GetBasicInterface">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderNr.SetSettings(RohdeSchwarz.ViCom.Net.SReceiverSettings)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderNr.Disconnect">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderNr.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComError@,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderNr.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderNr.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderNr.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComTsmeLoaderNr">
            <summary />
        </member>
        <member name="D:RohdeSchwarz.ViCom.Net.OnConnectProgressFnc">
This code should allow creation of a callback from C++ into .NET, while the .NET side runs inside an AppDomain
Info was taken from http://www.lenholgate.com/blog/2009/07/error-cannot-pass-a-gchandle-across-appdomains.html
Unfortunatelly the solution works on function-callbacks. We do not know yet how to use it on callback interfaces.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderHelper.#ctor">
Protected c-tor

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderHelper.GetInterface">
Returns a reference to the specific interface of the technology, 
accesses here as a reference to Object.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderHelper.GetBasicInterface">
Returns a reference to the basic interface

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderHelper.SetSettings(RohdeSchwarz.ViCom.Net.SReceiverSettings)">
Sets the receiver settings

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderHelper.Disconnect">
Relases the hardware.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderHelper.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComError@,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
       * Loads the device available at the specific ip address. In case of the TSMx series,
       * no such IP address has to be specified, i.e. can be a nullptr.
	   * Returns false upon failure, 'error' contains a description why.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderHelper.Connect(System.String,RohdeSchwarz.ViCom.Net.CViComReceiverListener)">
Loads the device available at the specific ip address. In case of the TSMx series,
no such IP address has to be specified, i.e. can be a nullptr.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComLoaderHelper.Dispose">
Virtual destructor

</member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComLoaderHelper">
Base class for technology specific bridges between native ViCom loaders
and the .NET wrappers

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComReceiverListener.OnError(RohdeSchwarz.ViCom.Net.CViComReceiverListener.Error.Type,System.String)">
   Every time a receiver error occurred, it is reported by the listener using this function.

   @note The callback is not allowed to throw exceptions!

   @param [out] error
         the specific receiver error.
   @param [out] errorMessage
         the informative text message related to the specific receiver error.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComReceiverListener.OnWarning(RohdeSchwarz.ViCom.Net.CViComReceiverListener.Warning.Type,System.String)">
   Every time a receiver warning occurred, it is reported by the listener using this function.

   @note The callback is not allowed to throw exceptions!

   @param [out] warning
         the specific receiver warning.
   @param [out] warningMessage
         the informative text message related to the specific receiver warning.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComReceiverListener.OnConnectProgress(System.Single,System.String)">
   Every time a connection progress event is available, it is reported by the listener
   using this function. This is used to indicated the connection progress.

   @note The callback is not allowed to throw exceptions!

   @param [out] progressInPct
         the connection progress in percent, value range [0,1].
   @pram [out] message
         the informative text message related to the connection progress.

</member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComReceiverListener.Error">
Definition of receiver error events.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComReceiverListener.Warning">
Definition of receiver warning events.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComReceiverListener">
Common interface for both CViComResultDataProcessor and CViComRawDataProcessor.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterface.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterface.GetType">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
            <return>
if listener has been removed from the list of registered listeners or not
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
            <return>
if listener has been appended to the list of registered listeners or not
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.Net.TDSCDMA.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst,System.UInt32)">
            <summary>
Issue a request to the Layer 3 Decoder to decode the PDU contained by rSL3DecoderRequest. If the data has been decoded successfully within the time given by dwTimeOutInMs, the method creates the SL3DecoderResult and the buffer within on the heap, fills in the Layer 3 Decoder result and returns a pointer to it.
</summary>
            <param name="rSL3DecoderRequest">
Contains the data that was the result of an TD-SCDMA measurement and holds the PDU data that shall be decoded.
</param>
            <return>
one measurement result on the heap, if the function succeeded. Otherwise NULL. Attention: The returned pointer is only valid until this function is called again.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterface.GetSettings">
            <summary>
By means of the functions: SetFrequencyTable(), SetMeasurementMode() and SetDemodulationSettings() internal settings of the PN-Scanner may be changed. The functions SelectReceiver(), SetResultBufferDepth()of CViComBasicInterface change basic settings. Except for frequency settings all other settings have default values. By means of this function you can retrieve the PN-Scanner settings which apply at the moment for measurements to be started or during running measurements. Note that the result, like all other results too, is only for reading. To change settings the functions mentioned above should be used.
</summary>
            <return>
pointer to a structure holding the current device settings. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterface.IssueDemodRequests(RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary>
Use this function to issue commands (PDU requests, reset commands) for the BCH demodulator during measurement.
PDUs may be acquired for certain eNodeBs. PDU demodulation for eNodeBs or for channels may be reset.
</summary>
            <param name="rDemodRequests">
When the function is called, this pointer contains the request parameters. For details see SDemodRequests.
</param>
            <return>
in case of success true otherwise False
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.TDSCDMA.SChannelSettings!System.Runtime.CompilerServices.IsConst,RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary>
SChannelSettings contains the count of channels or frequencies and the table of frequencies in MHz. The frequency or channel index is counted from zero and referenced in other data e.g. BCH demodulation settings. The selection of new frequencies causes default settings for the BCH demodulation.
</summary>
            <param name="rChannelSettings">
Contains the definition which frequencies shall be measured.
SChannelSettings for a more detailed description on those settings.
</param>
            <param name="rDemodulationSettings">
When the function is called, this pointer contains the values that the application wants to set, and when the function returns, it contains the values that were actually set. For details see SDemodulationSettings and SDemodRequests.
</param>
            <return>
in case of success true otherwise False
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterface.GetMeasRateLimits">
            <summary>
Limits for Parameter SFrequencySettings::dwMeasRatePer1000sec.
@note
The resulting meas rate limits are specified for the MeasurementMode::HIGH_SPEED setting. The maxmimum rating for MeasurementMode::HIGH_SENSITIVITY is equal to the returned default value of the SRange container object.
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterface.GetDemodThresholdLimits">
            <summary>
Limits for Parameter SDemodulationSettings::sEcToIoThresholdDB100
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterface.GetChannelCountLimits">
            <summary>
Limits for Parameter SChannelSettings::dwCount
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterface.GetBasicInterface">
            <summary>
The basic interface is a part of any application specific ViCom interface. It is used for different TSMW applications. The purpose is to control basic TSMW functions, which are not specific for a certain measurement. See CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterface.#ctor(RohdeSchwarz.ViCom.TDSCDMA.CViComTdScdmaInterface*)">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterface.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterface.m_converter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterface.m_nativeIf">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterface.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterface">
            <summary>
TD-SCDMA measurement module for ViCom. Offers the configuration and result receiving methods for all TD-SCDMA related measurement tasks.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.DataConverterCViComTdScdmaInterfaceData.Convert2M(RohdeSchwarz.ViCom.Technology.Type)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.DataConverterCViComTdScdmaInterfaceData.Convert2M(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.DataConverterCViComTdScdmaInterfaceData.Convert2M(RohdeSchwarz.ViCom.TDSCDMA.SMeasResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.DataConverterCViComTdScdmaInterfaceData.Convert2M(RohdeSchwarz.ViCom.TDSCDMA.SL3DecoderResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.DataConverterCViComTdScdmaInterfaceData.Convert2M(RohdeSchwarz.ViCom.TDSCDMA.SSettings!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.DataConverterCViComTdScdmaInterfaceData.Convert2M(RohdeSchwarz.ViCom.SRange&lt;System.Int16&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.DataConverterCViComTdScdmaInterfaceData.Convert2M(RohdeSchwarz.ViCom.SRange&lt;System.UInt32&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.DataConverterCViComTdScdmaInterfaceData.CleanUp(RohdeSchwarz.ViCom.TDSCDMA.SL3DecoderRequest*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.TDSCDMA.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.DataConverterCViComTdScdmaInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.TDSCDMA.SL3DecoderRequest*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.TDSCDMA.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.DataConverterCViComTdScdmaInterfaceData.CleanUp(RohdeSchwarz.ViCom.TDSCDMA.SDemodRequests*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.DataConverterCViComTdScdmaInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.TDSCDMA.SDemodRequests*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.DataConverterCViComTdScdmaInterfaceData.CleanUp(RohdeSchwarz.ViCom.TDSCDMA.SDemodulationSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.DataConverterCViComTdScdmaInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.TDSCDMA.SDemodulationSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.DataConverterCViComTdScdmaInterfaceData.CleanUp(RohdeSchwarz.ViCom.TDSCDMA.SChannelSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.TDSCDMA.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.DataConverterCViComTdScdmaInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.TDSCDMA.SChannelSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.TDSCDMA.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.DataConverterCViComTdScdmaInterfaceData.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.DataConverterCViComTdScdmaInterfaceData.Instance">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.DataConverterCViComTdScdmaInterfaceData.s_instance">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.DataConverterCViComTdScdmaInterfaceData">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.ICViComTdScdmaInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
            <return>
if listener has been removed from the list of registered listeners or not
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.ICViComTdScdmaInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
            <return>
if listener has been appended to the list of registered listeners or not
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.ICViComTdScdmaInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.Net.TDSCDMA.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst,System.UInt32)">
            <summary>
Issue a request to the Layer 3 Decoder to decode the PDU contained by rSL3DecoderRequest. If the data has been decoded successfully within the time given by dwTimeOutInMs, the method creates the SL3DecoderResult and the buffer within on the heap, fills in the Layer 3 Decoder result and returns a pointer to it.
</summary>
            <param name="rSL3DecoderRequest">
Contains the data that was the result of an TD-SCDMA measurement and holds the PDU data that shall be decoded.
</param>
            <return>
one measurement result on the heap, if the function succeeded. Otherwise NULL. Attention: The returned pointer is only valid until this function is called again.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.ICViComTdScdmaInterface.GetSettings">
            <summary>
By means of the functions: SetFrequencyTable(), SetMeasurementMode() and SetDemodulationSettings() internal settings of the PN-Scanner may be changed. The functions SelectReceiver(), SetResultBufferDepth()of CViComBasicInterface change basic settings. Except for frequency settings all other settings have default values. By means of this function you can retrieve the PN-Scanner settings which apply at the moment for measurements to be started or during running measurements. Note that the result, like all other results too, is only for reading. To change settings the functions mentioned above should be used.
</summary>
            <return>
pointer to a structure holding the current device settings. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.ICViComTdScdmaInterface.IssueDemodRequests(RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary>
Use this function to issue commands (PDU requests, reset commands) for the BCH demodulator during measurement.
PDUs may be acquired for certain eNodeBs. PDU demodulation for eNodeBs or for channels may be reset.
</summary>
            <param name="rDemodRequests">
When the function is called, this pointer contains the request parameters. For details see SDemodRequests.
</param>
            <return>
in case of success true otherwise False
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.ICViComTdScdmaInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.TDSCDMA.SChannelSettings!System.Runtime.CompilerServices.IsConst,RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary>
SChannelSettings contains the count of channels or frequencies and the table of frequencies in MHz. The frequency or channel index is counted from zero and referenced in other data e.g. BCH demodulation settings. The selection of new frequencies causes default settings for the BCH demodulation.
</summary>
            <param name="rChannelSettings">
Contains the definition which frequencies shall be measured.
SChannelSettings for a more detailed description on those settings.
</param>
            <param name="rDemodulationSettings">
When the function is called, this pointer contains the values that the application wants to set, and when the function returns, it contains the values that were actually set. For details see SDemodulationSettings and SDemodRequests.
</param>
            <return>
in case of success true otherwise False
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.ICViComTdScdmaInterface.GetMeasRateLimits">
            <summary>
Limits for Parameter SFrequencySettings::dwMeasRatePer1000sec.
@note
The resulting meas rate limits are specified for the MeasurementMode::HIGH_SPEED setting. The maxmimum rating for MeasurementMode::HIGH_SENSITIVITY is equal to the returned default value of the SRange container object.
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.ICViComTdScdmaInterface.GetDemodThresholdLimits">
            <summary>
Limits for Parameter SDemodulationSettings::sEcToIoThresholdDB100
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.ICViComTdScdmaInterface.GetChannelCountLimits">
            <summary>
Limits for Parameter SChannelSettings::dwCount
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.ICViComTdScdmaInterface.GetBasicInterface">
            <summary>
The basic interface is a part of any application specific ViCom interface. It is used for different TSMW applications. The purpose is to control basic TSMW functions, which are not specific for a certain measurement. See CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.ICViComTdScdmaInterface">
            <summary>
TD-SCDMA measurement module for ViCom. Offers the configuration and result receiving methods for all TD-SCDMA related measurement tasks.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterfaceDataProcessor.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.CViComTdScdmaInterfaceDataProcessor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SL3DecoderResult.pcPduText">
            <summary>
Pointer to a buffer containing the decoded PDU text, as zero terminated ASCII string.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SL3DecoderResult.dwStringLength">
            <summary>
Number of decoding result text bytes in the buffer (incl. terminating '\0').
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SL3DecoderResult.ePDU">
            <summary>
PDU contained.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SL3DecoderResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SL3DecoderResult">
            <summary>
Result from the Layer 3 Decoder.
The string returned via this structure is formatted using the ASN.1 notation of the standard (3GPP TS 36.331). It contains one completely decoded PDU terminated by CR+LF. Data subsets (i.e. Information Elements) within the string are headed by "CR+LF+{", indented via spaces and terminated by "}+CR+LF".
In addition to the standard, some Information Elements are added twice (see example cellIdentity below):
-Formatted exactly according to the standard.
-Formatted with unit or format description between square brackets ("[" "]") and representing a reasonable value.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SL3DecoderRequest.pbBitStream">
            <summary>
Pointer to a buffer containing the PDU bits. The first bit is stored in bit 7 of pbBitStream[0]. If dwBitCount is not a multiple of 8, there are remaining bits, which shall be ignored.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SL3DecoderRequest.dwBitCount">
            <summary>
Number of bits for this PDU.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SL3DecoderRequest.ePDU">
            <summary>
PDU contained.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SL3DecoderRequest.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SL3DecoderRequest">
            <summary>
Request data container for the Layer 3 Decoder. Is used to decode a demodulation result into a human-readable structure.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.pDemodResult">
            <summary>
Pointer to demodulation result. If NULL, no demodulation result is present.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.pPowerProfile">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.pSpectrum">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.ListOfSignals">
            <summary>
The actual set of signals associated with the current channel specified by the dwChannelIndex member.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.ListMeasurementRates">
            <summary>
List of measurement rates rates and other values in relation to the measurement rate for one or more time intervals of measurement rate calculation. The measurement rate is the ratio of all measurements of the same type of measurement at the time the measurement signals have been picked from the air. So the time of arrival at the host application is not used. And equal measurements at different RF channels are put together.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.u64DeviceTimeInNs">
            <summary>
The time when the signal was started to being measured on the device, with a higher resolution than the default PC clock. This time is relative to the last restart of the device.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.dwPcTimeStampInMs">
            <summary>
PC local time when the signal was measured (or was started to being measured) on the device.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.dwChannelIndex">
            <summary>
The channel to which all the data relates is specified using this index. The index refers to the position in the SChannelSettings::aTableOfFrequencySetting array.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SDemodResult.pbBitStream">
            <summary>
Pointer to (dwBitCount + 7) / 8 bytes which contain the PDU bits. The first bit is stored in the bit 7 of pbBitStream[0]. If dwBitCount is not a multiple of 8, the trailing bits in the last byte pbBitStream[(dwBitCount + 7) / 8 - 1] shall be ignored.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SDemodResult.dwBitCount">
            <summary>
Number of bits the PDU consists of.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SDemodResult.ePDU">
            <summary>
PDU that has been demodulated
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SDemodResult.dwStopTimeInMs">
            <summary>
This is the last time in ms of signals used for this message. All IQ signals used to produce this demodulation result are in between dwStartTimeInMs and dwStopTimeInMs.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SDemodResult.dwStartTimeInMs">
            <summary>
This is the first time in ms of signals used for this message.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SDemodResult.dwFirstBtsId">
            <summary>
The demodulator fills this parameter with the BTS ID the scanner assigned to this BTS first. If later on, the scanner uses a different BTS ID, but after demodulation it is detected that it is the same eNodeB, the demodulator fills this value with the first BTS ID the scanner used. Example: The scanner has measured a eNodeB with ID = 10 and the demodulator has demodulated it successfully. 20 minutes later the scanner found signals of a eNodeB with ID = 55. After demodulating, the demodulator finds out (by comparing unique BTS information from decoding), that it is the same eNodeB as the one with ID = 10. In this case, dwFirstBtsId will be set to 10.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SDemodResult.wSC">
            <summary>
Scrambling code provided by the scanner as SSignals::wScramblingCode.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SDemodResult.dwBtsId">
            <summary>
Unique BTS ID provided by the scanner as SSignals::dwScannerBtsIdent. Each time the scanner is not sure whether the signal it could demodulate belongs to an already known eNodeB, it sets a new identifier here. I.e. the same eNodeB could have multiple dwBtsIds, but each dwBtsId relates always to a single cell.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SDemodResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SDemodResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SDemodResult">
            <summary>
BCH demodulator results
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SPowerProfile.psPowerValueInDBm100">
            <summary>
RMS power value in 0.01 dBm.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SPowerProfile.dwCountPowerValues">
            <summary>
Number of values available in psPowerValueInDBm100 array if psPowerValueInDBm100 is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SPowerProfile.dwTimeResolutionInNs">
            <summary>
Time resolution in ns.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SPowerProfile.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SPowerProfile.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SPowerProfile">
            <summary>
Optional power profile information. Only available if power profile measurements have been configured using SChannelSettings::dwMEAS_POWER_PROFILE. The power profile contains the received signal power (RSSI) over time curve.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSpectrumResult.psRmsSpectralPowerValueInDBm100">
            <summary>
RMS spectrum value in 0.01 dBm.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSpectrumResult.dwCountOfSpectrumValues">
            <summary>
Number of values available in psRmsSpectralPowerValueInDBm100 array if psRmsSpectralPowerValueInDBm100 is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSpectrumResult.dwFirstSpectrumFreqInHz">
            <summary>
First frequency of spectrum values available in psRmsSpectralPowerValueInDBm100 array.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSpectrumResult.dwSpectrumFreqDistanceInHz">
            <summary>
Frequency spacing of spectrum values available in psRmsSpectralPowerValueInDBm100 array.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSpectrumResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSpectrumResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSpectrumResult">
            <summary>
Optional spectrum measurement results. Only available if spectrum measurements have been configured using SChannelSettings::dwMEAS_SPECTRUM.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.pCir">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.ListOfTimeSlots">
            <summary>
The actual set of time slot measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.pdwDwPtsTimeOffsetInNs">
            <summary>
Time offset of DwPTS in ns with respect to the device time (SMeasResult::u64DeviceTimeInNs), if pdwDwPtsTimeOffsetInNs is not NULL. This time is the Time of Arrival of the DwPTS radio signal, i.e. the start of the sync chips, which follow Time Slot 0 (TS0) after a 32 chip guard period. This means, the difference between this value and ToA of TS0 (dwTS0TimeOffsetInNs) is 700 microseconds.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.dwTS0TimeOffsetInNs">
            <summary>
Time offset of time slot 0 in ns with respect to the device time (SMeasResult::u64DeviceTimeInNs).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.wScramblingCode">
            <summary>
The scrambling code.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.dwScannerBtsIdent">
            <summary>
Internal ID assigned from the scanner to that specific station. Different stations will become different IDs assigned to them, but if the scanner cannot identify a cell exactly, it also might assign different IDs to the same station.
@note
This is unique only within one measurement. Do not use it when combining the results of different measurements
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir.pMaxPeak">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir.ListOfPeaks">
            <summary>
List of CIR peaks found in the signal.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir.wScramblingCode">
            <summary>
The scrambling code.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir.dwScannerBtsIdent">
            <summary>
Internal ID assigned from the scanner to that specific station. Different stations will become different IDs assigned to them, but if the scanner cannot identify a cell exactly, it also might assign different IDs to the same station.
@note
This is unique only within one measurement. Do not use it when combining the results of different measurements
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir.SMaxPeak.dwRadioFrameNumber">
            <summary>
Virtual Radio Frame Number (RFN) assigned to each radio frame received. The RFN counting is started for each new combination of Channel and ExtendedSC, i.e. dwChannelIndex, SExtendedSC::wSC, SExtendedSC::wIndicator. See explanation for SExtendedSC.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir.SMaxPeak.dFrameToaOffsetToPpsInSec">
            <summary>
Time difference between Radio Frame Time of Arrival and the latest PPS pulse received. The time, when the maximum CIR peak has been received, is used as Radio Frame Time of Arrival.
According to 3GPP TS25.221 Chapters 5, 5A and 5B Frame structure, the TD-SCDMA radio frame (10 ms) consists of two 5 ms subframes for each complete radio frame. Each Subframe can be seen as a radio frame, therefore we must use the half radio frame length (5 ms) for the ToA (Time of Arrival) offset to PPS calculation.
The time difference between DwPTS and the latest PPS pulse received can be calculated by double dDwPTS_OffsetToPpsInSec = dFrameToaOffsetToPpsInSec + 0.000675 without the DwPTS Guard Period. If you include the duration of the DwPTS Guard period, you must calculate double dDwPTS_OffsetToPpsInSec = dFrameToaOffsetToPpsInSec + 0.000700, see explanation of pdwDwPtsTimeOffsetInNs.
To determine the frame delay as value within +/- half of the length considered (+/- 5 ms / 2 =&gt; 2.5 ms), the provided dFrameToaOffsetToPpsInSec must be processed according to he following principle: double dFrameDelay_ms = ( (1000dFrameToaOffsetToPpsInSec + 5 ms) modulo 10 ms ) - 5 ms
@note
This feature requires a GPS antenna to be connected to the receiver.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir.SMaxPeak.pMaxPeakInfo">
            <summary>
Pointer to the maximum element of the CIR Peak list. This value is not optional, it is a pointer to avoid copying data.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir.SMaxPeak.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir.SMaxPeak.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir.SMaxPeak">
            <summary>
Parameters of the maximum peak.
This result will only be provided, if the peak list is not empty, PPS has been acquired and the Time of Arrival feature has been enabled (i.e. 0 &lt; SSettings::dwToaAvgWindowLengthMs). In addition, it will take about 100 s from start of measurement, before the first results are provided.
@note
This feature requires a GPS antenna to be connected to the receiver.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir.SPeak.dwDelayInNs">
            <summary>
Delay of the peak related to the device time in ns.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir.SPeak.sPowerInDBm100">
            <summary>
The actual power of the impulse peak in 0.01 dBm.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir.SPeak.ePeakType">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir.SPeak.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir.SPeak.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir.SPeak.etPeakType.PEAK_DWPTS">
            <summary>
Peak from DwPTS.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir.SPeak.etPeakType.PEAK_PCCPCH">
            <summary>
Peak from PCCPCH.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir.SPeak.etPeakType.PEAK_MIDAMBLE">
            <summary>
Peak from Midamble.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir.SPeak.etPeakType">
            <summary>
Peak type
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir.SPeak">
            <summary>
Contains information about the single peaks in the Channel Impulse Response.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SCir">
            <summary>
Optional data container that holds information about the channel impulse responses measured in this cycle. The CIR consists of a list of peaks. Additionally there is a power profile.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.pSlotDescription">
            <summary>
Description of extented information for the time slot, if not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.sEcI0inDB100">
            <summary>
Ec/I0 in 0.01 dB if not SDefs::INVALID_SHORT_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.sRSSIinDBm100">
            <summary>
RSSI in 0.01 dBm if not SDefs::INVALID_SHORT_VALUE. The RSSI measurement is performed over the entire slot for TSx, DwPTS, UpPTS and over the PCCPCH segments for PCCPCH.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.sCIinDB100">
            <summary>
C/I in 0.01 dB if not SDefs::INVALID_SHORT_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.sISCPinDBm100">
            <summary>
ISCP in 0.01 dBm if not SDefs::INVALID_SHORT_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.sRSCPinDBm100">
            <summary>
RSCP in 0.01 dBm if not SDefs::INVALID_SHORT_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.enTimeSlot">
            <summary>
Type of the time slot.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.TimeSlot.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.TimeSlot.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.TimeSlot.Type.PCCPCH">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.TimeSlot.Type.UpPTS">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.TimeSlot.Type.DwPTS">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.TimeSlot.Type.TS6">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.TimeSlot.Type.TS5">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.TimeSlot.Type.TS4">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.TimeSlot.Type.TS3">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.TimeSlot.Type.TS2">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.TimeSlot.Type.TS1">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.TimeSlot.Type.TS0">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.TimeSlot.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot.TimeSlot">
            <summary>
Definition of the time slot type.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.STimeSlot">
            <summary>
Time slot measurement results.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SSlotDescription.pConstellationData">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SSlotDescription.fMER_dB">
            <summary>
Modulation error ratio in dB
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SSlotDescription.enSlotFormat">
            <summary>
Format of the slot.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SSlotDescription.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SSlotDescription.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SSlotDescription.SConstellationData.pSComplexDataPoints">
            <summary>
Constellation data points.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SSlotDescription.SConstellationData.dwCountOfComplexDataPoints">
            <summary>
Number of values available in pSComplexDataPoints array, if pSComplexDataPoints is not NULL.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SSlotDescription.SConstellationData.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SSlotDescription.SConstellationData.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SSlotDescription.SConstellationData">
            <summary>
Measurement data for the constellation diagram.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SSlotDescription.Slot.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SSlotDescription.Slot.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SSlotDescription.Slot.Format.SLOT_PCCPCH">
            <summary>
PCCPCH information on slot 0.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SSlotDescription.Slot.Format.SLOT_64QAM_SF16">
            <summary>
Modulation 64-QAM SF16.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SSlotDescription.Slot.Format.SLOT_64QAM_SF1">
            <summary>
Modulation 64-QAM SF1.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SSlotDescription.Slot.Format.SLOT_16QAM_SF16">
            <summary>
Modulation 16-QAM SF16.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SSlotDescription.Slot.Format.SLOT_16QAM_SF1">
            <summary>
Modulation 16-QAM SF1.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SSlotDescription.Slot.Format.SLOT_QPSK_SF16">
            <summary>
Modulation QPSK SF16.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SSlotDescription.Slot.Format.SLOT_QPSK_SF1">
            <summary>
Modulation QPSK SF1.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SSlotDescription.Slot.Format">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SSlotDescription.Slot">
            <summary>
Definition of the slot format.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals.SSlotDescription">
            <summary>
Description of extented information for one time slot.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult.SSignals">
            <summary>
Actual measurement values for a single server.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SMeasResult">
            <summary>
The TD-SCDMA measurement result for a single channel returned by CViComTdScdmaInterface::GetResult().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SSettings.DemodulationSettings">
            <summary>
Configuration of the BCH demodulation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SSettings.ChannelSettings">
            <summary>
The set of frequencies that shall be measured.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SSettings.dwReceiverIndex">
            <summary>
Index to SConnectedReceiverTable::Receiver of the currently selected receiver.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SSettings">
            <summary>
This structure holds all the measurement setup that is configured in the ViCom TD-SCDMA scanner module. It is a result of the CViComTdScdmaInterface::GetSettings() method.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodulationSettings.sStartMeasurementRequests">
            <summary>
The requests for the general start measurement command.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodulationSettings.dwFrontEndSelectionMask">
            <summary>
Receiver front end to be used by the demodulator for this channel. If no demodulation shall be provided, this shall be set to 0. Demodulation tasks are not allowed to contain multiple FE's.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodulationSettings.sEcToIoThresholdDB100">
            <summary>
Ec/Io threshold for demodulation, given in 1/100 dBm. For default value and range see GetDemodThresholdLimits().
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodulationSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodulationSettings">
            <summary>
This structure is used to configure the BCH demodulation process.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodRequests.pDemodRequests">
            <summary>
Pointer to an array of demodulation requests. Must be NULL, if no demodulation shall be done.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodRequests.dwCountOfRequests">
            <summary>
Number of demodulation requests. Must be 0, if no demodulation shall be done.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodRequests.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodRequests.SDemodRequest.wSC">
            <summary>
Scrambling code provided by the Scanner as SSignals::wScramblingCode. This scrambling code is used by the BCHDemodulator to demodulate a specific BTS, when the bDemodulationMode is set to ON_CMD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodRequests.SDemodRequest.dwBtsId">
            <summary>
Unique BTS ID provided by the scanner as SSignals::dwScannerBtsIdent. This ID is used by the BCHDemodulator to demodulate a specific BTS, when the bDemodulationMode is set to ON_CMD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodRequests.SDemodRequest.wRepetitionDelayInMs">
            <summary>
Repetition time out in ms (only used if bDemodulationMode == REPETITION).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodRequests.SDemodRequest.eDemodulationMode">
            <summary>
The mode used for BCH demodulation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodRequests.SDemodRequest.ePDU">
            <summary>
The PDU to be demodulated.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodRequests.SDemodRequest.dwChannelIndex">
            <summary>
Index of the frequency in SChannelSettings::aTableOfFrequencySetting.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodRequests.SDemodRequest.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodRequests.SDemodRequest">
            <summary>
There must be one instance of this structure for each BCH demodulation request, therefore different PDUs can be measured on different channels.
Example for start measurement: On the first channel SIBs 3 and 4 shall be decoded, on the the second channel SIBs 3, 5 and 7 shall be decoded. SIB 5 shall be decoded repeatedly every 10 seconds (10000 ms) and SIB 7 shall be decoded on demand. This requires five structures containing the following parameter sets: (0,&lt;sp&gt;&lt;/sp&gt;SIB3,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(0,&lt;sp&gt;&lt;/sp&gt;SIB4,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(1,&lt;sp&gt;&lt;/sp&gt;SIB3,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(1,&lt;sp&gt;&lt;/sp&gt;SIB5,&lt;sp&gt;&lt;/sp&gt;REPETITION,&lt;sp&gt;&lt;/sp&gt;10000,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(1,&lt;sp&gt;&lt;/sp&gt;SIB7,&lt;sp&gt;&lt;/sp&gt;ON_CMD,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0) Example during measurement: On channel 0 PDU demodulation shall be completely reset for the BTS identified by ID 3 and on the the second channel SIB 7 shall be decoded for the BTS identified by ID 4 SC 5 with a timeout for the request of 1 sec (1000ms): (0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;CHANNEL_RESET,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;3,&lt;sp&gt;&lt;/sp&gt;5)(1,&lt;sp&gt;&lt;/sp&gt;PDU_FOR_SIB7,&lt;sp&gt;&lt;/sp&gt;ON_CMD,&lt;sp&gt;&lt;/sp&gt;1000,&lt;sp&gt;&lt;/sp&gt;4,&lt;sp&gt;&lt;/sp&gt;5)@note
You are responsible to manage memory, when you use SetDemodulationSettings(). All parameters which are not necessary for a certain request shall be set to 0.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SDemodRequests">
            <summary>
This structure is used to configure PDU requests. It is used in start measurement requests and it is used to issue BCH demodulation requests during measurement, e.g. SIB requests on demand or to reset SIB demodulation.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.DemodMode.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.DemodMode.Type.CHANNEL_RESET">
            <summary>
Delete all demodulation results for all BTS at the specified channel. Restart demodulation for this channel as specified in the command. This can be requested only during a running measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.DemodMode.Type.BTS">
            <summary>
The demodulation is only for a special BTS. This can be requested only during a running measurement and when the PDU was also requested in the start measurement frame. If dwTimeOutOrRepetitionDelayIn100ms is different from 0 then the demodulation is only tried during the given time.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.DemodMode.Type.REPETITION">
            <summary>
After each successful demodulation a new one will be started automatically after the repetition time specified in wRepetitionDelayIn100ms. Only to be used in start measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.DemodMode.Type.ON_CMD">
            <summary>
The PDU is only demodulated if an extra command for demodulation requests the demodulation.
If this is used, then no PDU is decoded until it is explicitly requested. The method IssueDemodRequests can be used for that purpose.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.DemodMode.Type.ONCE">
            <summary>
Demodulate the PDU for each BTS at the specified channel only once. Only to be used in start measurement.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.DemodMode.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.DemodMode">
            <summary>
This enumeration defines modes for the BCH demodulation. Use this in the S_TDSCDMA_PDU_Request structure to specify when the demodulation of this PDU shall be done.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.Pdu.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.Pdu.Type.UNKNOWN">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.Pdu.Type.SB2">
            <summary>
SB 2 is PDU 43 Do not request, if necessary, this PDU will be acquired automatically.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.Pdu.Type.SB1">
            <summary>
SB 1 is PDU 42 Do not request, if necessary, this PDU will be acquired automatically.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.Pdu.Type.SIB18">
            <summary>
SIB 18 is PDU 41.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.Pdu.Type.SIB17">
            <summary>
SIB 17 is PDU 40.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.Pdu.Type.SIB16">
            <summary>
SIB 16 is PDU 39.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.Pdu.Type.SIB14">
            <summary>
SIB 14 is PDU 32.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.Pdu.Type.SIB12">
            <summary>
SIB 12 is PDU 26.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.Pdu.Type.SIB11">
            <summary>
SIB 11 is PDU 25.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.Pdu.Type.SIB7">
            <summary>
SIB 7 is PDU 21.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.Pdu.Type.SIB5">
            <summary>
SIB 5 is PDU 19.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.Pdu.Type.SIB3">
            <summary>
SIB 3 is PDU 17.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.Pdu.Type.SIB2">
            <summary>
SIB 2 is PDU 16.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.Pdu.Type.SIB1">
            <summary>
SIB 1 is PDU 15.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.Pdu.Type.MIB">
            <summary>
MIB is PDU 14 Do not request, if necessary, this PDU will be acquired automatically.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.Pdu.Type.UNDEFINED">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.Pdu.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.Pdu">
            <summary>
This enumeration defines IDs for the TD-SCDMA Layer 3 PDUs. Use this in the SDemodRequest structure to specify which PDUs shall be decoded.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SChannelSettings.pTableOfFrequencySetting">
            <summary>
This array of structures can be filled with single frequency configurations. Only dwCount entries from this table will be used.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SChannelSettings.dwToaAvgWindowLengthMs">
            <summary>
Length of the sliding window for Time of Arrival averaging in ms. Values in the near past of the current value contribute more to the average than older values. Values older than dwToaAvgWindowLengthMs will contribute significantly less to the average value. If &gt; 1, this value is treated as double Sigma threshold of a Gaussian distribution in time, on which the averaging is based. If 1, results are provided without averaging. If 0, feature deactivated, no ToA processing and no results. This is the default!
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SChannelSettings.dwCount">
            <summary>
Number of frequency configurations that shall be used from the pTableOfFrequencySetting to perform the measurement tasks. For value range see GetChannelCountLimits().
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SChannelSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SChannelSettings">
            <summary>
This structure holds the measurement setup for the TD-SCDMA measurement. It basically consists of the set of frequencies that shall be measured.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SFrequencySetting.dwMeasRatePer1000Sec">
            <summary>
The desired measurement rate value. For default value and range see GetMeasRateLimits(). The limits are dependent from the currently set enMeasurementMode.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SFrequencySetting.dwActiveMeasurements">
            <summary>
Active measurements. Used to configure if frequency spectrum of power profile measurements should be done or not. The measurements can be combined, i.e. to get power profile and frequency spectrum measurements dwMEAS_SPECTRUM | dwMEAS_POWER_PROFILE shall be set.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SFrequencySetting.dwMEAS_ALL">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SFrequencySetting.dwMEAS_EXT_SLOT">
            <summary>
Extended Analysis on the timeslots for HSDPA. Activate all supported measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SFrequencySetting.dwMEAS_PCCPCH_CONST">
            <summary>
Constellation diagram measurements on PCCPCH (slot 0).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SFrequencySetting.dwMEAS_POWER_PROFILE">
            <summary>
Measurement of the power profile.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SFrequencySetting.dwMEAS_SPECTRUM">
            <summary>
Measurement of the frequency spectrum.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SFrequencySetting.enMeasurementMode">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SFrequencySetting.dCenterFrequencyInHz">
            <summary>
The center frequency on which the TD-SCDMA signals shall be measured. For value range see SReceiver::SSupportedFrequencies.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SFrequencySetting.dwFrontEndSelectionMask">
            <summary>
Receiver front end to be used by the scanner for this channel. Scanner tasks are not allowed to contain multiple FE's.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SFrequencySetting.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.TDSCDMA.SFrequencySetting.MeasurementMode.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SFrequencySetting.MeasurementMode.Type.HIGH_SPEED">
            <summary>
High speed mode. In this mode the measurements are performed over one sub-frame only to maximize the measurement speed.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.TDSCDMA.SFrequencySetting.MeasurementMode.Type.HIGH_SENSITIVITY">
            <summary>
High sensitivity mode. In this mode the measurements are performed over several sub-frames thus gaining sensitivity and accuracy on the cost of measurement speed.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SFrequencySetting.MeasurementMode.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SFrequencySetting.MeasurementMode">
            <summary>
Measurement mode. Used to switch between the standard mode which is fast but has less sensitivity or the high sensitivity mode which lacks speed.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.TDSCDMA.SFrequencySetting">
            <summary>
Configuration of the measurement that is performed on one single frequency.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.TDSCDMA.CViComTdScdmaInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.TDSCDMA.SMeasResult&gt;*)">
   Unregister a formerly registered ScannerData listener to remove it from the list of objects that
   shall get notification about new measurement data.

   @param[in] pListener
      The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered
      objects, an error is indicated.

   @return
      if listener has been removed from the list of registered listeners or not

</member>
        <member name="M:RohdeSchwarz.ViCom.TDSCDMA.CViComTdScdmaInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.TDSCDMA.SMeasResult&gt;*)">
   Register a ScannerData listener that will be notified when new data is available. Note that it is
   important to Unregister the listener again once it is getting deleted, to avoid crashes.

   @param[in] pListener
      The object that shall be notified when new measurement data is available. This must not be
      null. If the listener has already been registered to the interface, it will not be
      registered a second time. Instead, an error will be indicated.

   @return
      if listener has been appended to the list of registered listeners or not

</member>
        <member name="M:RohdeSchwarz.ViCom.TDSCDMA.CViComTdScdmaInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.TDSCDMA.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsLong)">
   Issue a request to the Layer 3 Decoder to decode the PDU contained by rSL3DecoderRequest.
   If the data has been decoded successfully within the time given by dwTimeOutInMs,
   the method creates the SL3DecoderResult and the buffer within on the heap, fills in the Layer 3 Decoder result
   and returns a pointer to it.

   @param[in] rSL3DecoderRequest
      Contains the data that was the result of an TD-SCDMA measurement and holds the PDU data that shall be decoded.

   @return
      one measurement result on the heap, if the function succeeded. Otherwise NULL.
      Attention: The returned pointer is only valid until this function is called again.

</member>
        <member name="M:RohdeSchwarz.ViCom.TDSCDMA.CViComTdScdmaInterface.GetSettings">
   By means of the functions: SetFrequencyTable(), SetMeasurementMode() and SetDemodulationSettings() internal settings
   of the PN-Scanner may be changed. The functions SelectReceiver(), SetResultBufferDepth()of CViComBasicInterface 
   change basic settings. Except for frequency settings all other settings have default values.
   By means of this function you can retrieve the PN-Scanner settings which apply at the moment for measurements to be started
   or during running measurements.
   Note that the result, like all other results too, is only for reading.
   To change settings the functions mentioned above should be used.

   @return
      pointer to a structure holding the current device settings. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.TDSCDMA.CViComTdScdmaInterface.IssueDemodRequests(RohdeSchwarz.ViCom.TDSCDMA.SDemodRequests!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   Use this function to issue commands (PDU requests, reset commands) for the BCH demodulator during measurement.

   PDUs may be acquired for certain eNodeBs. PDU demodulation for eNodeBs or for channels may be reset.

   @param[in] rDemodRequests
   When the function is called, this pointer contains the request parameters.
   For details see SDemodRequests.

   @return
   in case of success true otherwise False

</member>
        <member name="M:RohdeSchwarz.ViCom.TDSCDMA.CViComTdScdmaInterface.SetConfiguration(RohdeSchwarz.ViCom.TDSCDMA.SChannelSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.TDSCDMA.SDemodulationSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   SChannelSettings contains the count of channels or frequencies and the table of frequencies in MHz.
   The frequency or channel index is counted from zero and referenced in other data e.g. BCH demodulation settings.
   The selection of new frequencies causes default settings for the BCH demodulation.

   @param[in] rChannelSettings
      Contains the definition which frequencies shall be measured. @see SChannelSettings for
      a more detailed description on those settings.

   @param[in] rDemodulationSettings
      When the function is called, this pointer contains the values that the application wants to set,
      and when the function returns, it contains the values that were actually set.
      For details see SDemodulationSettings and
      SDemodRequests.

   @return
      in case of success true otherwise False

</member>
        <member name="M:RohdeSchwarz.ViCom.TDSCDMA.CViComTdScdmaInterface.GetMeasRateLimits">
   Limits for Parameter SFrequencySettings::dwMeasRatePer1000sec.

   @note
   The resulting meas rate limits are specified for the MeasurementMode::HIGH_SPEED setting. The maxmimum rating
   for MeasurementMode::HIGH_SENSITIVITY is equal to the returned default value of the SRange container object.

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.TDSCDMA.CViComTdScdmaInterface.GetDemodThresholdLimits">
   Limits for Parameter SDemodulationSettings::sEcToIoThresholdDB100

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.TDSCDMA.CViComTdScdmaInterface.GetChannelCountLimits">
   Limits for Parameter SChannelSettings::dwCount

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.TDSCDMA.CViComTdScdmaInterface.GetBasicInterface">
   The basic interface is a part of any application specific ViCom interface. It is used for different TSMW applications.
   The purpose is to control basic TSMW functions, which are not specific for a certain measurement.
   See CViComBasicInterface for specification of basic interface functions.


   @return
      reference to the BasicInterface object that can be used to control basic functions like
      StartMeasurement() and StopMeasurement() et al.

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.CViComTdScdmaInterface">
TD-SCDMA measurement module for ViCom. Offers the configuration and result receiving methods for all TD-SCDMA related
measurement tasks.
\@attribute[type="interface"  supportedDevices="TSME"]

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.SL3DecoderResult">
Result from the Layer 3 Decoder.

The string returned via this structure is formatted using the ASN.1 notation of the standard (3GPP TS 36.331).
It contains one completely decoded PDU terminated by CR+LF. Data subsets (i.e. Information Elements)
within the string are headed by "CR+LF+{", indented via spaces and terminated by "}+CR+LF".

In addition to the standard, some Information Elements are added twice (see example cellIdentity below):
   1. Formatted exactly according to the standard.
   2. Formatted with unit or format description between square brackets ("[" "]") and representing a reasonable value.

\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.SL3DecoderRequest">
Request data container for the Layer 3 Decoder. Is used to decode a demodulation result into
a human-readable structure.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.pDemodResult">
Pointer to demodulation result. If NULL, no demodulation result is present.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SDemodResult.pbBitStream">
Pointer to (dwBitCount + 7) / 8 bytes which contain the PDU bits. The first bit is stored in the bit 7 of pbBitStream[0]. 
If dwBitCount is not a multiple of 8, the trailing bits in the last byte pbBitStream[(dwBitCount + 7) / 8 - 1] shall be ignored.
\@attribute[type="bitfield" size="dwBitCount" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SDemodResult.dwBitCount">
Number of bits the PDU consists of.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SDemodResult.ePDU">
PDU that has been demodulated

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SDemodResult.dwStopTimeInMs">
This is the last time in ms of signals used for this message. 
All IQ signals used to produce this demodulation result are in between dwStartTimeInMs and dwStopTimeInMs.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SDemodResult.dwStartTimeInMs">
This is the first time in ms of signals used for this message.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SDemodResult.dwFirstBtsId">
The demodulator fills this parameter with the BTS ID the scanner assigned to this BTS first.
If later on, the scanner uses a different BTS ID, but after demodulation it is detected that it is the same eNodeB,
the demodulator fills this value with the first BTS ID the scanner used.  
Example: 
The scanner has measured a eNodeB with ID = 10 and the demodulator has demodulated it successfully. 
20 minutes later the scanner found signals of a eNodeB with ID = 55. After demodulating, the demodulator finds 
out (by comparing unique BTS information from decoding), that it is the same eNodeB as the one with ID = 10. 
In this case, dwFirstBtsId will be set to 10.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SDemodResult.wSC">
Scrambling code provided by the scanner as SSignals::wScramblingCode.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SDemodResult.dwBtsId">
Unique BTS ID provided by the scanner as SSignals::dwScannerBtsIdent. Each time the scanner is not
sure whether the signal it could demodulate belongs to an already known eNodeB, it sets a new identifier
here. I.e. the same eNodeB could have multiple dwBtsIds, but each dwBtsId relates always to a single cell.

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SDemodResult">
BCH demodulator results
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SPowerProfile.psPowerValueInDBm100">
RMS power value in 0.01 dBm.
\@attribute[type="array" size="dwCountPowerValues" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SPowerProfile.dwCountPowerValues">
Number of values available in psPowerValueInDBm100 array if psPowerValueInDBm100 is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SPowerProfile.dwTimeResolutionInNs">
Time resolution in ns.

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SPowerProfile">
Optional power profile information. Only available if power profile
measurements have been configured using SChannelSettings::dwMEAS_POWER_PROFILE.
The power profile contains the received signal power (RSSI) over time curve.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSpectrumResult.psRmsSpectralPowerValueInDBm100">
RMS spectrum value in 0.01 dBm.
\@attribute[type="array" size="dwCountOfSpectrumValues" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSpectrumResult.dwCountOfSpectrumValues">
Number of values available in psRmsSpectralPowerValueInDBm100 array if psRmsSpectralPowerValueInDBm100 is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSpectrumResult.dwFirstSpectrumFreqInHz">
First frequency of spectrum values available in psRmsSpectralPowerValueInDBm100 array.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSpectrumResult.dwSpectrumFreqDistanceInHz">
Frequency spacing of spectrum values available in psRmsSpectralPowerValueInDBm100 array.

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSpectrumResult">
Optional spectrum measurement results. Only available if spectrum measurements
have been configured using SChannelSettings::dwMEAS_SPECTRUM.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.ListOfSignals">
The actual set of signals associated with the current channel specified
by the dwChannelIndex member.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.SCir.SMaxPeak.dwRadioFrameNumber">
Virtual Radio Frame Number (RFN) assigned to each radio frame received.
The RFN counting is started for each new combination of Channel and ExtendedSC,
i.e. dwChannelIndex, SExtendedSC::wSC, SExtendedSC::wIndicator.
See explanation for SExtendedSC.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.SCir.SMaxPeak.dFrameToaOffsetToPpsInSec">
            Time difference between Radio Frame Time of Arrival and the latest PPS pulse received.
            The time, when the maximum CIR peak has been received, is used as Radio Frame Time of Arrival.

            According to 3GPP TS25.221 Chapters 5, 5A and 5B Frame structure,
            the TD-SCDMA radio frame (10 ms) consists of two 5 ms subframes for each complete radio frame.
            Each Subframe can be seen as a radio frame, therefore we must use the half radio frame 
            length (5 ms) for the ToA (Time of Arrival) offset to PPS calculation.

            The time difference between DwPTS and the latest PPS pulse received can be calculated by
            double dDwPTS_OffsetToPpsInSec = dFrameToaOffsetToPpsInSec + 0.000675 without the DwPTS Guard Period.
            If you include the duration of the DwPTS Guard period, you must calculate
            double dDwPTS_OffsetToPpsInSec = dFrameToaOffsetToPpsInSec + 0.000700,
            see explanation of pdwDwPtsTimeOffsetInNs.

            To determine the frame delay as value within +/- half of the length considered (+/- 5 ms / 2  =&gt;  2.5 ms),
            the provided dFrameToaOffsetToPpsInSec must be processed according to he following principle:
            double dFrameDelay_ms = ( (1000*dFrameToaOffsetToPpsInSec  + 5 ms) modulo 10 ms ) - 5 ms

            @note
            This feature requires a GPS antenna to be connected to the receiver.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.SCir.SMaxPeak.pMaxPeakInfo">
Pointer to the maximum element of the CIR Peak list. 
This value is not optional, it is a pointer to avoid copying data.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.SCir.ListOfPeaks">
List of CIR peaks found in the signal.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.SCir.SPeak.dwDelayInNs">
Delay of the peak related to the device time in ns.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.SCir.SPeak.sPowerInDBm100">
The actual power of the impulse peak in 0.01 dBm.

</member>
        <member name="F:PEAK_DWPTS">
Peak from DwPTS.

</member>
        <member name="F:PEAK_PCCPCH">
Peak from PCCPCH.

</member>
        <member name="F:PEAK_MIDAMBLE">
Peak from Midamble.

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.SCir.SPeak.etPeakType">
Peak type

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.SCir.SPeak">
Contains information about the single peaks in the Channel Impulse Response.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.SCir.wScramblingCode">
The scrambling code.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.SCir.dwScannerBtsIdent">
         Internal ID assigned from the scanner to that specific station. Different
         stations will become different IDs assigned to them, but if the scanner
         cannot identify a cell exactly, it also might assign different IDs to
         the same station.

         @note
         This is unique only within one measurement. Do not use it when
         combining the results of different measurements

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.SCir">
Optional data container that holds information about the channel impulse
responses measured in this cycle. The CIR consists of a list of peaks. 
Additionally there is a power profile.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.ListOfTimeSlots">
The actual set of time slot measurements.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.STimeSlot.pSlotDescription">
Description of extented information for the time slot, if not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.STimeSlot.sEcI0inDB100">
Ec/I0 in 0.01 dB if not SDefs::INVALID_SHORT_VALUE.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.STimeSlot.sRSSIinDBm100">
RSSI in 0.01 dBm if not SDefs::INVALID_SHORT_VALUE.
The RSSI measurement is performed over the entire slot for TSx, DwPTS, UpPTS and over the PCCPCH segments for PCCPCH.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.STimeSlot.sCIinDB100">
C/I in 0.01 dB if not SDefs::INVALID_SHORT_VALUE.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.STimeSlot.sISCPinDBm100">
ISCP in 0.01 dBm if not SDefs::INVALID_SHORT_VALUE.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.STimeSlot.sRSCPinDBm100">
RSCP in 0.01 dBm if not SDefs::INVALID_SHORT_VALUE.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.STimeSlot.enTimeSlot">
Type of the time slot.

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.STimeSlot.TimeSlot">
Definition of the time slot type.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.STimeSlot">
Time slot measurement results.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.SSlotDescription.SConstellationData.pSComplexDataPoints">
Constellation data points.
\@attribute[type="array" size="dwCountOfComplexDataPoints" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.SSlotDescription.SConstellationData.dwCountOfComplexDataPoints">
Number of values available in pSComplexDataPoints array, if pSComplexDataPoints is not NULL.

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.SSlotDescription.SConstellationData">
Measurement data for the constellation diagram.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.SSlotDescription.fMER_dB">
Modulation error ratio in dB

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.SSlotDescription.enSlotFormat">
Format of the slot.

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.SSlotDescription.Slot">
Definition of the slot format.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.SSlotDescription">
Description of extented information for one time slot.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.pdwDwPtsTimeOffsetInNs">
Time offset of DwPTS in ns with respect to the device time (SMeasResult::u64DeviceTimeInNs),
if pdwDwPtsTimeOffsetInNs is not NULL.
This time is the Time of Arrival of the DwPTS radio signal, i.e. the start of the sync chips, 
which follow Time Slot 0 (TS0) after a 32 chip guard period. 
This means, the difference between this value and ToA of TS0 (dwTS0TimeOffsetInNs) is 700 microseconds.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.dwTS0TimeOffsetInNs">
Time offset of time slot 0 in ns with respect to the device time (SMeasResult::u64DeviceTimeInNs).

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.wScramblingCode">
The scrambling code.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.dwScannerBtsIdent">
      Internal ID assigned from the scanner to that specific station. Different
      stations will become different IDs assigned to them, but if the scanner
      cannot identify a cell exactly, it also might assign different IDs to
      the same station.

      @note
      This is unique only within one measurement. Do not use it when
      combining the results of different measurements

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals">
Actual measurement values for a single server.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.ListMeasurementRates">
List of measurement rates rates and other values in relation to the measurement rate for 
one or more time intervals of measurement rate calculation. The measurement rate is 
the ratio of all measurements of the same type of measurement at the time
the measurement signals have been picked from the air. So the time of arrival 
at the host application is not used. And equal measurements at different RF channels are put together.      

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.u64DeviceTimeInNs">
The time when the signal was started to being measured on the device, with a higher resolution than the default PC clock. 
This time is relative to the last restart of the device.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.dwPcTimeStampInMs">
PC local time when the signal was measured (or was started to being measured) on the device.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.dwChannelIndex">
The channel to which all the data relates is specified using this index.
The index refers to the position in the SChannelSettings::aTableOfFrequencySetting array.

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult">
The TD-SCDMA measurement result for a single channel returned by CViComTdScdmaInterface::GetResult().
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.SSettings">
This structure holds all the measurement setup that is configured in the ViCom TD-SCDMA scanner module. 
It is a result of the CViComTdScdmaInterface::GetSettings() method.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SDemodulationSettings.sStartMeasurementRequests">
The requests for the general start measurement command.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SDemodulationSettings.dwFrontEndSelectionMask">
Receiver front end to be used by the demodulator for this channel. 
If no demodulation shall be provided, this shall be set to 0.
Demodulation tasks are not allowed to contain multiple FE's.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SDemodulationSettings.sEcToIoThresholdDB100">
Ec/Io threshold for demodulation, given in 1/100 dBm.
For default value and range see GetDemodThresholdLimits().

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.SDemodulationSettings">
This structure is used to configure the BCH demodulation process.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SDemodRequests.pDemodRequests">
Pointer to an array of demodulation requests. Must be NULL, if no demodulation shall be done.
\@attribute[type="array" size="dwCountOfRequests" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SDemodRequests.SDemodRequest.wSC">
Scrambling code provided by the Scanner as SSignals::wScramblingCode. This scrambling code is used
by the BCHDemodulator to demodulate a specific BTS, when the bDemodulationMode is set to ON_CMD.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SDemodRequests.SDemodRequest.dwBtsId">
Unique BTS ID provided by the scanner as SSignals::dwScannerBtsIdent. This ID is used by the 
BCHDemodulator to demodulate a specific BTS, when the bDemodulationMode is set to ON_CMD.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SDemodRequests.SDemodRequest.wRepetitionDelayInMs">
Repetition time out in ms (only used if bDemodulationMode == REPETITION).

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SDemodRequests.SDemodRequest.eDemodulationMode">
The mode used for BCH demodulation.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SDemodRequests.SDemodRequest.ePDU">
The PDU to be demodulated.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SDemodRequests.SDemodRequest.dwChannelIndex">
Index of the frequency in SChannelSettings::aTableOfFrequencySetting.

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.SDemodRequests.SDemodRequest">
   There must be one instance of this structure for each BCH demodulation request,
   therefore different PDUs can be measured on different channels.

   Example for start measurement:
            On the first channel SIBs 3 and 4 shall be decoded, on the the second channel SIBs 3, 5 and 7 shall be decoded.
            SIB 5 shall be decoded repeatedly every 10 seconds (10000 ms) and SIB 7 shall be decoded on demand.
            This requires five structures containing the following parameter sets:
   @code
            (0, SIB3, 0, 0, 0, 0)
            (0, SIB4, 0, 0, 0, 0)
            (1, SIB3, 0, 0, 0, 0)
            (1, SIB5, REPETITION, 10000, 0, 0)
            (1, SIB7, ON_CMD, 0, 0, 0)
   @endcode
   Example during measurement:
            On channel 0 PDU demodulation shall be completely reset for the BTS identified by ID 3
            and on the the second channel SIB 7 shall be decoded for the BTS identified by ID 4 
            SC 5 with a timeout for the request of 1 sec (1000ms):
   @code
            (0, 0, CHANNEL_RESET, 0, 3, 5)
            (1, PDU_FOR_SIB7, ON_CMD, 1000, 4, 5)
   @endcode
   @note
   You are responsible to manage memory, when you use SetDemodulationSettings().
   All parameters which are not necessary for a certain request shall be set to 0.
   \@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SDemodRequests.dwCountOfRequests">
Number of demodulation requests. Must be 0, if no demodulation shall be done.

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.SDemodRequests">
This structure is used to configure PDU requests.
It is used in start measurement requests and it is used to issue BCH demodulation requests during measurement,
e.g. SIB requests on demand or to reset SIB demodulation.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.DemodMode">
This enumeration defines modes for the BCH demodulation.
Use this in the S_TDSCDMA_PDU_Request structure to specify when the demodulation 
of this PDU shall be done.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.Pdu">
This enumeration defines IDs for the TD-SCDMA Layer 3 PDUs. 
Use this in the SDemodRequest structure to specify which PDUs shall be decoded.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SChannelSettings.pTableOfFrequencySetting">
This array of structures can be filled with single frequency configurations.
Only dwCount entries from this table will be used.
\@attribute[type="array" size="dwCount" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SChannelSettings.dwToaAvgWindowLengthMs">
Length of the sliding window for Time of Arrival averaging in ms. 
Values in the near past of the current value contribute more to the average 
than older values. Values older than dwToaAvgWindowLengthMs will contribute 
significantly less to the average value.
If &gt; 1, this value is treated as double Sigma threshold of a Gaussian distribution
in time, on which the averaging is based.
If 1, results are provided without averaging.
If 0, feature deactivated, no ToA processing and no results. This is the default!

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SChannelSettings.dwCount">
Number of frequency configurations that shall be used from the pTableOfFrequencySetting to perform the measurement tasks.
For value range see GetChannelCountLimits().

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.SChannelSettings">
This structure holds the measurement setup for the TD-SCDMA measurement. It
basically consists of the set of frequencies that shall be measured.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SFrequencySetting.dwMeasRatePer1000Sec">
The desired measurement rate value. For default value and range see GetMeasRateLimits().
The limits are dependent from the currently set enMeasurementMode.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SFrequencySetting.dwActiveMeasurements">
Active measurements. Used to configure if frequency spectrum of power profile measurements should be done or not.
The measurements can be combined, i.e. to get power profile and frequency spectrum measurements 
dwMEAS_SPECTRUM | dwMEAS_POWER_PROFILE shall be set.

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.SFrequencySetting.MeasurementMode">
Measurement mode. Used to switch between the standard mode which is fast but has less sensitivity or the
high sensitivity mode which lacks speed.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SFrequencySetting.dCenterFrequencyInHz">
The center frequency on which the TD-SCDMA signals shall be measured.
For value range see SReceiver::SSupportedFrequencies.

</member>
        <member name="F:RohdeSchwarz.ViCom.TDSCDMA.SFrequencySetting.dwFrontEndSelectionMask">
Receiver front end to be used by the scanner for this channel.
Scanner tasks are not allowed to contain multiple FE's.

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.SFrequencySetting">
Configuration of the measurement that is performed on one single frequency.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.TDSCDMA.etViComInterfaceVersion">
Data containers used for ViCom TD-SCDMA interface. Contains measurement configuration and result structures.

</member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SL3DecoderResult.pcPduText">
            <summary>
Pointer to a buffer containing the decoded PDU text, as zero terminated ASCII string.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SL3DecoderResult.dwStringLength">
            <summary>
Number of decoding result text bytes in the buffer (incl. terminating '\0').
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SL3DecoderResult.ePDU">
            <summary>
PDU contained.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SL3DecoderResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SL3DecoderResult">
            <summary>
Result from the Layer 3 Decoder. The string returned via this structure is formatted according to the appropriate CDMA / EVDO standard.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SL3DecoderRequest.pbBitStream">
            <summary>
Pointer to a buffer containing the message bits, organized in the same way as returned in the measurement result above (in terms of bit orientation).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SL3DecoderRequest.dwBitCount">
            <summary>
Number of bits for this PDU.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SL3DecoderRequest.PduSpec">
            <summary>
Channel type and message id of the message stored in the bitstream.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SL3DecoderRequest.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SL3DecoderRequest">
            <summary>
Request for the Layer 3 Decoder.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.ListMeasurementRates">
            <summary>
List of measurement rates rates and other values in relation to the measurement rate for one or more time intervals of measurement rate calculation. The measurement rate is the ratio of all measurements of the same type of measurement at the time the measurement signals have been picked from the air. So the time of arrival at the host application is not used. And equal measurements at different RF channels are put together.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.pTimeEstimationResult">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.pDemodResult">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.pSyncChannelDemodulationResult">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.ListOfFPichCirs">
            <summary>
Result list of F-PICH CIRs.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.pdTsmuMeasTimeInSec">
            <summary>
Tsmu Meas Time Exact time when the CIR measurement was taken. This can be used to analyze the fading situation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.psAverageInbandPowerInDBm100">
            <summary>
If a CIR measurement had no success (e.g. there is no CDMA2000 signal on air) then we get at least the received power of the specified channel. The pointer to this power value is valid (!= NULL) if a power measurement was performed.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.sInvalidPowerInDBm100">
            <summary>
The power values of the CIR are given in 0.01dB resolution as 16 bit signed integer values in the range of (-327.67..327.67dBm). Some power values of a CIR may be below the noise limit or have not been measured. In this case the integer gets the invalid power value 0x8000 = -32768 = -2^15 = -327.68dBm.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.dwCirSamplingRateInHz">
            <summary>
Sometimes it is more convenient to operate with the reciprocal of the CIR resolution. This is the CIR sampling twice the chip rate.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.dwCirResolutionInFemtoSeconds">
            <summary>
The CIR is given as a discrete power delay spectrum. The resolution (time distance of adjacent power values) is half the chip distance. This value is given as an integer constant in femto seconds (10^-15 sec). It is 10^15/(2  1228800) = 406901042.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.u64DeviceTimeInNs">
            <summary>
If available, the device time in ns is reported, otherwise NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.dwPcTimeStampInMs">
            <summary>
The start time of the RF measurement which was used to produce the result.
The dwPcTimeStampInMs is a conversion of the device time to the PC system time obtained with the GetTickCount() function. The adjustment of possible time drift between internal device time and GetTickCount() as well as the resolution of GetTickCount() causes a conversion error of a few milliseconds. dwPcTimeStampInMs may be used to synchronize PN-Scanner results with other measurement data in the system or to determine the age of the PN-Scanner result = GetTickCount() - dwPcTimeStampInMs
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.dwChannelIndex">
            <summary>
Channel index to which the measurement belongs.
Each result is for only one of the selected RF channels. The channel index counts from 0 and corresponds to the array index in SChannelSettings::pdTableOfFrequencyInMHz.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.STimeEstimationResult.lMeasuredPPSDelayInNs">
            <summary>
The measured GPS PPS Pulse time difference in ns. This value is valid, if bGpsPpsWasAvailable is TRUE and if the eOffsetEstimationMethod is OFFSET_ESTIMATION_METHOD_3. The range is -1ms (-1000000).. 999ms (999000000). It shows the GPS arrival time for the case that the measurement results (delays) are correct.
If a time delay of a BTS signal is known, than the measurement error of the PN-Scanner result can be calculated. The same error applies to this value. E.g. PN_Offest 271 was measured. The frame of this signal is transmitted 271  64/1228800sec = 14114.58us after a frame with offset 0. Assume the distance to the BTS is 5km. So a measurement result of 14114.58us + 5000m / (300m/us) = 14114.58us + 16.67us = 14131.31us is the expected measurement value. If for instance a delay of 14141.31us was measured as a delay value for this BTS then the measurement result has an error of +10us.
Now we can reduce both the delay value and the PPS delay value by 10us to get correct results.
The corrected value times 0.01 can be used to be set in the SPPSSettings::iDelayOfPPSFallingEdgeIn100ns in the start command to calibrate the GPS delay.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.STimeEstimationResult.lInvalidPPSDelayInNs">
            <summary>
invalid value: 1 sec (1e9 ns)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.STimeEstimationResult.dwAgeOfGpsPpsInMs">
            <summary>
Age of GPS PPS in ms or SDefs::INVALID_DWORD_VALUE if PPS not available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.STimeEstimationResult.dwAgeOfDemodulationInMs">
            <summary>
Age of demodulation in ms or SDefs::INVALID_DWORD_VALUE if no demodulation was used. Once a demodulation was successful, this increases with every measurement (for one bastesation).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.STimeEstimationResult.eOffsetEstimationMethod">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.STimeEstimationResult.bGpsPpsWasAvailable">
            <summary>
TRUE if a PPS was available at the PN-scanner. It is necessary to use TimeBaseSynchronisationMode::PPS in CViComBasicInterface::SetTimebaseSynchronisationMode
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.STimeEstimationResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.STimeEstimationResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.STimeEstimationResult.etOffsetEstimationMethod.OFFSET_ESTIMATION_METHOD_4">
            <summary>
At least one F-Sync demodulation and GPS PPS were used for the CDMA2000 time line estimation. The PN offset values for pilot signals can be estimated from arrival time as long as no F-Sync demodulation for this pilots are successful. Transmit time has now GPS accuracy. To enable the GPS time based offset estimation method PPS synchronisation has to be used for the receiver and SPPSSettings::iDelayOfPPSFallingEdgeIn100ns is in a valid range and PPS pulses are fed in the receiver. The accuracy of the time line estimation directly depends on SPPSSettings::iDelayOfPPSFallingEdgeIn100ns.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.STimeEstimationResult.etOffsetEstimationMethod.OFFSET_ESTIMATION_METHOD_3">
            <summary>
At least one F-Sync demodulation was successful but GPS PPS is not available or not used for time line estimation. The PN offset values for pilot signals will be estimated from of the arrival time as long as no F-Sync demodulation for this pilots are successful. The transmit time was estimated by several received pilots using internal algorithms. The scanner remains in this state if PPS synchronisation is not used for the receiver or if SPPSSettings::iDelayOfPPSFallingEdgeIn100ns is not in a valid range or if no PPS pulses are fed in the receiver.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.STimeEstimationResult.etOffsetEstimationMethod.OFFSET_ESTIMATION_METHOD_1">
            <summary>
No F-Sync demodulation for any BTS was not yet successfully finished, therefore all reported PN-offset values are set to wInvalidPNOffset. The transmit time is estimated by receive time by an internal algorithm. For a CDMA2000 channel the scanner is in this state only short time normally.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.STimeEstimationResult.etOffsetEstimationMethod">
            <summary>
If the F-SYNC channel of any receiver pilot signal is not yet demodulated a time based PN-Offset estimation method is used by the scanner. For this estimation the CDMA 2000 time line has to be synchronised with the internal receiver time. The time based PN-Offset estimation needs at least one F-SYNC channel to be demodulated for both, the PPS synchronised method and the CDMA2000 network synchronised method.
The offset estimation method specifies how a time based PN offset measurement value was derived and how reliable the result is.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.STimeEstimationResult">
            <summary>
Information for the time line estimation used for arrival times and time estimation of PN-Offset
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SDemodResult.dwStopTime">
            <summary>
Containing end time of demodulation (see dwStartTime).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SDemodResult.dwStartTime">
            <summary>
Timestamp showing when the demodulation of the message started. Together with dwStopTime this can be used to see how long the demodulation process took to detect and interpret the data contained in the CDMA 2000 signal.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SDemodResult.pbBitStream">
            <summary>
pointer to (dwBitCount + 7) / 8 bytes which contain the bits of the message. The first bit is stored in the bit 1 of pbBitStream[0]. If dwBitCount is not a multiple of 8 then some tail bits in the last byte pbBitStream[(dwBitCount + 7) / 8 - 1] should be ignored.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SDemodResult.dwBitCount">
            <summary>
count of bits the demodulated message consists of
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SDemodResult.PduSpec">
            <summary>
Container holding information about the decoded message, i.e. which message id has been decoded and from what type of channel the message has been retrieved.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SDemodResult.wFirstBtsId">
            <summary>
The ExtendedPnOffset contains an identifier for the BTS, but it may be the case that the monitored BTS has been measured before. Only when a message is decoded successfully, the id of the BTS can be determined uniquely. For example, a BTS got the id 13 when detected for the first time. After a while, the BTS is found again, but the id 49 is assigned to it since the back-reference could not be surely made. After demodulation, it is clear that the BTS was the same as before, then 13 is entered in this attribute. If this is 0, then there is no such backreference.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SDemodResult.wBtsId">
            <summary>
Unique identifier during the measurement for the measured station.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SDemodResult.dwChannelIndex">
            <summary>
Index of the channel used to measure the BTS.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SDemodResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SDemodResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SDemodResult">
            <summary>
If a message could be demodulated then the pointer to the MsgResult for this measurement is valid (!= NULL)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult.dwInvalidCountOfAllReceivedBits">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult.dwCountOfAllReceivedBits">
            <summary>
Count of all received bits, can be invalid, see below.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult.dwCountOfReceivedBitsWithError">
            <summary>
Count of received bits with error.
Bit error rate measured Given as Count of received bits with error and count of all received bits Can be invalid.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult.bDS_INCL">
            <summary>
Direct spread (DS) system and information available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult.SR3_INCL">
            <summary>
SR3 support indicator.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult.bSR1_TD_INCL">
            <summary>
SR1 TD BCCH support indicator.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult.bSR1_BCCH_NON_TD_INCL">
            <summary>
SR1 Non-TD BCCH support indicator.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult.wEXT_CDMA_FREQ">
            <summary>
Extended frequency assignment.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult.wCDMA_FREQ">
            <summary>
Frequency assignment.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult.bPRAT">
            <summary>
Paging channel data rate.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult.bDAYLT">
            <summary>
Daylight savings time indicator.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult.bLTM_OFF">
            <summary>
Offset of local time from system time.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult.bLP_SEC">
            <summary>
Number of leap seconds that have occurred since the start of the system time.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult.w64SYS_TIME">
            <summary>
System time.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult.l64LC_STATE">
            <summary>
Long code state.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult.wPILOT_PN">
            <summary>
Pilot PN sequence offset index.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult.wNID">
            <summary>
Network identification.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult.wSID">
            <summary>
System identification.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult.bMIN_P_REV">
            <summary>
Minimum protocol revision level.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult.bP_REV">
            <summary>
Protocol revision level.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SSyncChannelDemodulationResult">
            <summary>
Sync Channel Demodulation Result SyncChannelDemodulationResult: The contents of the synchronization message are described in standard TIA-2000.5-D. see spec C.S0005-D 3.7.2.3.2.26
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SFPichCir.ListOfPeaks">
            <summary>
Peak result list.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SFPichCir.sRSCPInDBm100">
            <summary>
Integral measured power for the F-PICH signal (composition of all peaks).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SFPichCir.sInbandPowerInDBm100">
            <summary>
Power in the RF band during the CIR measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SFPichCir.psCodePowerInDBm100">
            <summary>
CIR power values in 0.01dBm in time distance dwCirResolutionInFemtoSeconds.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SFPichCir.dwCountOfCodePowerValues">
            <summary>
The length of the CIR depends on distance between minimum and maximum delayed signal components.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SFPichCir.pfFrameToaOffsetToPpsInSec">
            <summary>
The offset of the radio frame arrival time from the time it was sent from the base station. It uses the even GPS PPS pulse and the PN Offset value to determine the time offset. The radio frame beginning is calculated using the maximum CIR peak.
3 CDMA radio frames build up one CDMA super frame with 80 ms length, therefore one radio frame has a length of 80/3 ms = 26.6666666 ms.
To determine the frame delay as value within +/- half of the radio length (+/- 26.666666 ms / 2), you must add this half RF length value, apply a full RF length modulo calculation and then subtract the half length value: double dFrameDelay_ms = ( (1000dFrameToaOffsetToPpsInSec + 5 ms) modulo 10 ms ) - 5 ms
In addition, it will take about 100 s from start of measurement, before the first results are provided.
@note
This feature requires a GPS antenna to be connected to the receiver.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SFPichCir.dwTimeDelayInCirSamples">
            <summary>
The first CIR signal psCodePowerInDBm100[0] has arrived the receiver dwTimeDelayInCirSamples/dwCirSamplingRateInHz seconds delayed from u64DeviceTimeInNs this value can be used to display the time delay between different CIRs.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SFPichCir.ExtendedPNOffset">
            <summary>
!&lt; The identifier for this measurement.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SFPichCir.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SFPichCir.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SFPichCir.SPeakInfo.psDopplerShiftInHz">
            <summary>
The doppler shift. If invalid, the pointer is NULL;
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SFPichCir.SPeakInfo.sPeakPowerInDBm100">
            <summary>
This power includes short term reflections and may be different to the power in the CIR graph at the same position.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SFPichCir.SPeakInfo.dwTimeDelayInCirSamples">
            <summary>
Signal of the peak has arrived the receiver dwTimeDelayInCirSamples/dwCirSamplingRateInHz seconds delayed from u64DeviceTimeInNs.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SFPichCir.SPeakInfo.pExtendedPNOffset">
            <summary>
The identifier for this measurement, NULL if not available.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SFPichCir.SPeakInfo.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SFPichCir.SPeakInfo.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SFPichCir.SPeakInfo">
            <summary>
structure which contains results for separated peak values in the CIR
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SFPichCir">
            <summary>
For most code power measurements and for F-PICH CIR measurements not only the absolute code power value (in 0.01dBm) is reported but in addition the absolute total inband power value (InbandPower) belonging to the code power measurement is reported. This makes it possible to calculate the Ec/Io for the measured code power by subtracting the InbandPower which belongs to the code power.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SExtendedPNOffset.bOffsetSourceIsTimeEstimation">
            <summary>
The PN-Offset was found by a time estimation. The circumstances (reliability etc.) of the time estimation are described in STimeEstimationResult. Only this or bOffsetSourceIsSyncChannelDemodulation is set.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SExtendedPNOffset.bOffsetSourceIsSyncChannelDemodulation">
            <summary>
Source of the PN-Offset was a demodulation of the sync channel of this base station (even if it was long before we did this measurement). So the PN Offset value is correct.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SExtendedPNOffset.wIndicator">
            <summary>
ID: 0, 1, ... see explanation above.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SExtendedPNOffset.wPNOffset">
            <summary>
PN offset: 0 .. 511, or SDefs::INVALID_WORD_VALUE if neither demodulation nor time estimation could be performed successfully (normally the case when a measurement is started).
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SExtendedPNOffset.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SExtendedPNOffset.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult.SExtendedPNOffset">
            <summary>
The SExtendedPNOffset structure identifies a basestation in the system and provides PN-Offset measurement results for this basestation.
Measurement results with equal values {channel, ID} are very likely from the same physical BTS. As long as the arrival time of a measured pilot signal fits the 80/3 ms frame pattern of a previously measured pilot signal the ID of the previously measured signal is reused for this measured signal. If two pilot signals transmitted from the same BTS have been measured at different locations a new ID value is used for the recent signal if the previous pilot signal measurement was taken long ago or due to strong reflections a fit of the frame timing is not assumed.
In contrast to UMTS SC the PN-Offset in the measurement results is not used to indicate that results belong to the same BTS, as the PN-Offset is time-estimated or demodulated. E.g. two results for the same channel {ID = 156, PN-Offset = 30 (time estimated)} and {ID = 156, PN-Offset = 32 (demodulated)} belong to the same BTS. In this case the PN-Offset time estimation was wrong and may be corrected in a post process using this ID.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SMeasResult">
            <summary>
This structure holds a measurement result from the result buffer. Please refer to the manual for a detailed discussion of how to interpret the results.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SSettings.EvdoSettings">
            <summary>
Control settings how EVDO Channels shall be demodulated.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SSettings.DemodulationSettings">
            <summary>
Settings that control the BCH demodulator.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SSettings.eSyncChannelDemodulationMode">
            <summary>
Sync Channel Demodulation Mode.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SSettings.MaxVelocity">
            <summary>
Max speed of the test vehicle.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SSettings.PPSSettings">
            <summary>
PPS Pulse.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SSettings.ChannelSettings">
            <summary>
Defines the measured frequencies.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SSettings.dwReceiverIndex">
            <summary>
Index to SConnectedReceiverTable::Receiver of the currently selected receiver.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SSettings">
            <summary>
By means of the functions: SetConfiguration() internal settings of the PN-Scanner may be changed and with the functions SelectReceiver(), SetTimebaseSynchronisationMode() of CViComBasicInterfaceData change basic settings. Except of frequency settings all other settings have default values.
This structure bundles these settings and will be returned as result from the GetSettings() method.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SEvdoControlSettings.dwShortSyncRangeInChips">
            <summary>
This is the range the short sync will use to calculate the timing estimation when synchronizing with EVDO channels. During such a sync phase, synchronization will be performed around the expected point in time with the specified radius. There are significant processing thresholds all 160 chips (39km). We recommend 160 chips (39km) for downtown areas and 320 chips (78km) for urban areas.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SEvdoControlSettings.dwRecommendedUrbanSyncRangeInChips">
            <summary>
320 chips is equal to 78 km
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SEvdoControlSettings.dwRecommendedDownTownSyncRangeInChips">
            <summary>
160 chips is equal to 39 km
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SEvdoControlSettings.dwMaxShortSyncRange">
            <summary>
Maximum chip count, round about 250 km radius. If this is used, the short sync is equal to the full sync, since the signal investigates is the same in this case.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SEvdoControlSettings.dwMinShortSyncRange">
            <summary>
At least one chip is searched (which is equal to ca 200m).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SEvdoControlSettings.dwShortSyncRatePer1000Sec">
            <summary>
A short synchronization is normally done within shorter time intervals and not as time-consuming as the full synchronization, but it still needs processing time. So it should not be done as often as the normal demodulation.
Compared with the full synchronization, during the short synchronization only a subrange of the measured signal is investigated. The size of the subrange is specified in the dwShortSyncRangeInChips parameter.
Attention: The settings must comply with the following relation: dwFullSyncRatePer1000Sec &lt;= dwShortSyncRatePer1000Sec &lt;= dwMeasRatePer1000Sec.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SEvdoControlSettings.dwMaxShortSyncRatePer1000sec">
            <summary>
The maximum short sync rate is 10/sec.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SEvdoControlSettings.dwMinShortSyncRatePer1000sec">
            <summary>
The minimum short sync rate is 1/sec.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SEvdoControlSettings.dwFullSyncRatePer1000Sec">
            <summary>
When a full synchronization is performed, all the available data within a PN offset frame is searched for EVDO signals, and new and old basestations can be found/tracked. Since a lot of calculation has to be performed during such an operation, this is a time consuming task. To reduce the processing overhead introduced with that computation, the measurement rate can be reduced to a much smaller amount than the original measurement rate.
Attention: The settings must comply with the following relation: dwFullSyncRatePer1000Sec &lt;= dwShortSyncRatePer1000Sec &lt;= dwMeasRatePer1000Sec.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SEvdoControlSettings.dwMaxFullSyncRatePer1000Sec">
            <summary>
The maximum full sync rate is 10/sec.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SEvdoControlSettings.dwMinFullSyncRatePer1000Sec">
            <summary>
The minimum full sync rate is 1/sec.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SEvdoControlSettings.bStopCdma2000AfterSync">
            <summary>
If this is set to true, then the CDMA 2000 demodulation is stopped after the first complete demodulation of a sync channel. That helps saving time and it is not required. Once a synchronization is available, the time estimation can be performed.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SEvdoControlSettings.dwMeasRatePer1000Sec">
            <summary>
Measurement rate for EVDO measurements. All channels together will be measured with this rate, i.e. one channel will be measured with an average of ChannelCount/dwMeasRatePer1000Sec measurements per 1000 sec.
The valid ranges are defined in the SMeasurementRate struct.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SEvdoControlSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SEvdoControlSettings">
            <summary>
As an additional option, the CDMA 2000 interface can measure and demodulate EVDO channels as well. How this is done can be controlled by the parameters made available in this structure.
Which EVDO channels shall be measured is specified as part of the SFrequencySetting structure vector that is contained in the SChannelSettings structure.
@note
To use EVDO scanning without scanning any CDMA channel, you must at least activate BCH Demodulation for EVDO_SYNC message.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SDemodulationSettings.sStartMeasurementRequests">
            <summary>
The requests for the general start measurement command.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SDemodulationSettings.dwFrontEndSelectionMask">
            <summary>
Receiver front end to be used by the demodulator for this channel. If no demodulation shall be provided, this shall be set to 0. Demodulation tasks are not allowed to contain multiple FE's.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SDemodulationSettings.lEcToIoThresholdInDB100_for_EVDO">
            <summary>
Threshold for EVDO demodulation trials in 0.01dB. For default value and range see GetDemodThresholdLimits().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SDemodulationSettings.lEcToIoThresholdInDB100_for_CDMA">
            <summary>
Threshold for CDMA demodulation trials in 0.01dB. For default value and range see GetDemodThresholdLimits().
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SDemodulationSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SDemodulationSettings">
            <summary>
This structure is used to configure the BCH demodulation process.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SDemodRequests.pDemodRequests">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SDemodRequests.dwCountOfRequests">
            <summary>
Number of demodulation requests.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SDemodRequests.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SDemodRequests.SDemodRequest.wBtsId">
            <summary>
This can be used to specify a specific basestation when the demodulation mode is set to one of the following modes: DEMOD__BTS, BTS_FORCE, BTS_RESET, BTS_OLD, BTS_OLD_FORCE. In other words, this can only be used in conjunction with the IssueRequest method, when requestes are specified for a special BTS. Attention: This is ignored during initial measurement setup.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SDemodRequests.SDemodRequest.wRepetitionDelayIn100ms">
            <summary>
Repeat measurement after this delay time, if eDemodulationMode is REPETITION. Timeout for request, if eDemodulationMode is ON_CMD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SDemodRequests.SDemodRequest.eDemodulationMode">
            <summary>
The mode used for demodulation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SDemodRequests.SDemodRequest.PduSpec">
            <summary>
Specifies which messages shall be demodulated on which channel.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SDemodRequests.SDemodRequest.dwChannelIndex">
            <summary>
Index of the frequency in SChannelSettings::pdTableOfFrequencyInMHz.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SDemodRequests.SDemodRequest.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SDemodRequests.SDemodRequest">
            <summary>
There must be one instance of this structure for each BCH demodulation request, therefore different message ids can be measured on different channels.
Example for start measurement: On the first channel the system parameters and the channel list messages shall be decoded, on the the second channel the neighbor list additionally. For the channel with index 1, the channel list shall be decoded repeatedly every 10 seconds (100100 ms) and the neighborlist shall be decoded on demand. This requires five structures containing the following parameter sets: {0,&lt;sp&gt;&lt;/sp&gt;{&lt;sp&gt;&lt;/sp&gt;Pdu::SYS_PARAMS,&lt;sp&gt;&lt;/sp&gt;C2K_CH_TYPE_ALL&lt;sp&gt;&lt;/sp&gt;},&lt;sp&gt;&lt;/sp&gt;ONCE,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0},{0,&lt;sp&gt;&lt;/sp&gt;{&lt;sp&gt;&lt;/sp&gt;Pdu::CHAN_LIST,&lt;sp&gt;&lt;/sp&gt;C2K_CH_TYPE_ALL&lt;sp&gt;&lt;/sp&gt;},&lt;sp&gt;&lt;/sp&gt;ONCE,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0},{1,&lt;sp&gt;&lt;/sp&gt;{&lt;sp&gt;&lt;/sp&gt;Pdu::SYS_PARAMS,&lt;sp&gt;&lt;/sp&gt;C2K_CH_TYPE_ALL&lt;sp&gt;&lt;/sp&gt;},&lt;sp&gt;&lt;/sp&gt;ONCE,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0},{1,&lt;sp&gt;&lt;/sp&gt;{&lt;sp&gt;&lt;/sp&gt;Pdu::CHAN_LIST,&lt;sp&gt;&lt;/sp&gt;C2K_CH_TYPE_ALL&lt;sp&gt;&lt;/sp&gt;},&lt;sp&gt;&lt;/sp&gt;REPETITION,&lt;sp&gt;&lt;/sp&gt;100,&lt;sp&gt;&lt;/sp&gt;0},{1,&lt;sp&gt;&lt;/sp&gt;{&lt;sp&gt;&lt;/sp&gt;Pdu::NEIGHBOR_LIST,&lt;sp&gt;&lt;/sp&gt;C2K_CH_TYPE_ALL&lt;sp&gt;&lt;/sp&gt;},&lt;sp&gt;&lt;/sp&gt;ON_CMD,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0},{2,&lt;sp&gt;&lt;/sp&gt;{&lt;sp&gt;&lt;/sp&gt;Pdu::SYNC,&lt;sp&gt;&lt;/sp&gt;C2K_CH_TYPE_ALL&lt;sp&gt;&lt;/sp&gt;},&lt;sp&gt;&lt;/sp&gt;ONCE,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0}, Example during measurement: On channel 0 the system parameter message demodulation shall be completely reset for the BTS with the ID 260 and on the the second channel the neighbor list demodulation shall be decoded for the BTS identified by ID 116 with a timeout for the request of 1 sec (10100ms): {0,&lt;sp&gt;&lt;/sp&gt;{&lt;sp&gt;&lt;/sp&gt;Pdu::SYS_PARAMS,&lt;sp&gt;&lt;/sp&gt;C2K_CH_TYPE_ALL&lt;sp&gt;&lt;/sp&gt;},&lt;sp&gt;&lt;/sp&gt;BTS_RESET,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;260},{1,&lt;sp&gt;&lt;/sp&gt;{&lt;sp&gt;&lt;/sp&gt;Pdu::NEIGHBOR_LIST,&lt;sp&gt;&lt;/sp&gt;C2K_CH_TYPE_ALL&lt;sp&gt;&lt;/sp&gt;},&lt;sp&gt;&lt;/sp&gt;BTS,&lt;sp&gt;&lt;/sp&gt;10,&lt;sp&gt;&lt;/sp&gt;116}@note
You are responsible to manage the memory when you use SetDemodulationSettings(). All parameters which are not necessary for a certain request shall be set to 0.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SDemodRequests">
            <summary>
This structure is used to configure message demodulation requests. It is used in start measurement requests and it is used to issue BCH demodulation requests during measurement, e.g. demodulation is requested on demand or to reset previous intermediate results of demodulation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SPduSpec.eEvdoProtocol">
            <summary>
EVDO Protocol ID.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SPduSpec.eChannelType">
            <summary>
In output mode: Specifies the channel type that has been used to gain the result. Only one bit is set according to the enumeration type, or all bits are set if no information is available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SPduSpec.ePDU">
            <summary>
Specifies the message type (PDU ID)
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SPduSpec.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SPduSpec">
            <summary>
This structure can be used to define a message type related filter for channels and to specify details on demodulated messages. So it is used as in- and output structure.
@note
When this is used as input parameter to specify the demodulation requests, then the ChannelType information is not evaluated inside the ViCom. Settings made that are ignored completely.
When a message has been demodulated successfully, this structure specifies the demodulation details. The channel information then shows from what channel the message has been demodulated.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.DemodMode.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.DemodMode.Type.BTS_OLD_FORCE">
            <summary>
Equal to BTS_FORCE but previously measured messages may be used for the result. This can be requested only during a running measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.DemodMode.Type.BTS_OLD">
            <summary>
Equal to BTS but previously measured messages may be used for the result. This can be requested only during a running measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.DemodMode.Type.CHANNEL_RESET">
            <summary>
All demodulation results for each BTS on the specified channel will be deleted and the demodulation for this channel starts as specified in SDemodulationSettings::sStartMeasurementRequests. This can be requested only during a running measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.DemodMode.Type.BTS_RESET">
            <summary>
All demodulation results for a special BTS will be deleted and the demodulation for this BTS starts as specified in SDemodulationSettings::sStartMeasurementRequests. This can be requested only during a running measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.DemodMode.Type.BTS_FORCE">
            <summary>
Equal to BTS but the limitation in receiver resource usage will be ignored and the demodulation will be be done until the PDU has been demodulated or timeout occurred.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.DemodMode.Type.BTS">
            <summary>
The demodulation is only for a BTS. This can be requested only during a running measurement and when the PDU was also requested in SDemodulationSettings::sStartMeasurementRequests. If dwTimeOutOrRepetitionDelayIn100ms is different from 0 then the demodulation is only tried during the given time.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.DemodMode.Type.REPETITION">
            <summary>
After each successful demodulation a new one will be started automatically after the delay time specified in wRepetitionDelayIn100ms Only to be used in start measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.DemodMode.Type.ON_CMD">
            <summary>
The PDU is only demodulated if an extra command requests the demodulation. Only to be used in SDemodulationSettings::sStartMeasurementRequests.
If this is used, then no PDU is decoded until it is explicitly requested. The method IssueDemodRequests can be used for that purpose.
PDUs configured with this setting can be decoded using one of BTS, BTS_FORCE, BTS_OLD, BTS_OLD_FORCE modes.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.DemodMode.Type.ONCE">
            <summary>
The PDU is demodulated only once for each BTS. Only to be used in SDemodulationSettings::sStartMeasurementRequests.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.DemodMode.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.DemodMode">
            <summary>
This enumeration defines modes for the demodulation. Use this in the SDemodRequest structure to specify when the demodulation of this PDU shall be done.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.UNKNOWN">
            <summary>
No kind of Protocol ID has been specified in the EVDO request.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.MULTI_MODE_CAP_DIS">
            <summary>
Multi Mode Capability Disc.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.VIRTUAL_STREAM_APP">
            <summary>
Virtual Stream App.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.VIRTUAL_STREAM">
            <summary>
Virtual Stream.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.STREAM_3_APP">
            <summary>
Stream 3 App.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.STREAM_2_APP">
            <summary>
Stream 2 App.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.STREAM_1_APP">
            <summary>
Stream 1 App.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.STREAM_0_APP">
            <summary>
Stream 0 App.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.STREAM">
            <summary>
Stream.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.SESSION_CFG">
            <summary>
Session Configuration.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.ADDRESS_MAN">
            <summary>
Address Management.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.SESSION_MAN">
            <summary>
Session Management.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.OVHD_MSG">
            <summary>
Overhead Messages.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.ROUTE_UPDATE">
            <summary>
Route Update.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.CONNECTED_STATE">
            <summary>
Connected State.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.IDLE_STATE">
            <summary>
Idle State.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.INIT_STATE">
            <summary>
Initialization State.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.AIR_LINK_MAN">
            <summary>
Air-Link Management.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.PACK_CONSOL">
            <summary>
Packet Consolidation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.SECURITY">
            <summary>
Security.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.ENCRYPTION">
            <summary>
Encryption.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.AUTHENT">
            <summary>
Authentication.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.KEY_EXCHANGE">
            <summary>
Key Exchange.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.REV_TRAF_CH_MAC">
            <summary>
Reverse Traffic Channel MAC.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.FWD_TRAF_CH_MAC">
            <summary>
Forward Traffic Channel MAC.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.ACCESS_CH_MAC">
            <summary>
Access Channel MAC.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.CTRL_CH_MAC">
            <summary>
Control Channel MAC.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.PHY_Layer">
            <summary>
Physical Layer.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type.INVALID">
            <summary>
No EVDO Protocol ID, for CDMA2000 usage of PduSpec.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.EvdoProtocol">
            <summary>
Detail information about the EVDO Protocol ID
PduSpec for further details
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.ChannelType.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.ChannelType.Type.ALL">
            <summary>
This can be used to enable decoding of all channel types.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.ChannelType.Type.UNKNOWN">
            <summary>
No further information on what kind of channel has been used to demodulate result.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.ChannelType.Type.CCSYN">
            <summary>
The 1xEVDO Synchronous Control Channel was used for message demodulation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.ChannelType.Type.SYNC">
            <summary>
The sync channel has been used for demodulation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.ChannelType.Type.PCH">
            <summary>
Used the PCH for message demodulation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.ChannelType.Type.BCCH">
            <summary>
Used the BCCH for message demodulation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.ChannelType.Type.INVALID">
            <summary>
No Channel Type, for EVDO usage of PduSpec.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.ChannelType.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.ChannelType">
            <summary>
Detail information on what kind of channel was used to demodulate a message, or which shall be used to demodulate one. This depends on whether this is used in the measurement setup or in the result structures.
PduSpec for further details
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.Pdu.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.Pdu.Type.UNKNOWN">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.Pdu.Type.EVDO_ACCESS_PARAMETERS">
            <summary>
1xEVDO - access parameters message
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.Pdu.Type.EVDO_SECTOR_PARAMETERS">
            <summary>
1xEVDO - sector parameters message
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.Pdu.Type.EVDO_SYNC">
            <summary>
1xEVDO - sync message
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.Pdu.Type.EVDO_QUICK_CONFIG">
            <summary>
1xEVDO - quick config message
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.Pdu.Type.ATIM_MESSAGE">
            <summary>
Alternative Technologies Information Message.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.Pdu.Type.SYNC_MESSAGE">
            <summary>
This message is sent on the sync channel. It is not necessary to request this message explicitly, it is always returned as first message before others get demodulated.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.Pdu.Type.ACCESS_PARAMETERS">
            <summary>
CDMA Access Parameters Message.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.Pdu.Type.EXT_GLOBAL_SERV_RE">
            <summary>
Extended Global Service Redirection Message.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.Pdu.Type.GLOBAL_SERV_DIR">
            <summary>
Global Service Redirection Message.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.Pdu.Type.GEN_NEIGHBOR_LIST">
            <summary>
General Neighbor List Message.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.Pdu.Type.EXT_NEIGHBOR_LIST">
            <summary>
Extended Neighbor List Message.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.Pdu.Type.NEIGHBOR_LIST">
            <summary>
Neighbor List Message, containing a list of BTSs that can be used for Handoff.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.Pdu.Type.EXT_CHAN_LIST">
            <summary>
Extended CDMA Channel List Message.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.Pdu.Type.CHAN_LIST">
            <summary>
CDMA Channel List Message.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.Pdu.Type.EXT_SYS_PARAMS">
            <summary>
Extended System Parameters Message.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.Pdu.Type.SYS_PARAMS">
            <summary>
System Parameters Message containing general purpose information of the network.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.Pdu.Type.NONE">
            <summary>
Empty message ID that refers to no message. Required for BTS_RESET.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.Pdu.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.Pdu">
            <summary>
Here you can find a list of messages that can be demodulated by the CDMA 2000 scanner. The values in this enumeration can be used as in- and output parameters to specify which kind of message shall or has been demodulated. In many cases, this is combined with a channel filter specifying on which channel the message occurred.
etChannelType and PduSpec for the combined usage
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMaxVelocity.dMaxVelocityInKmPerHour">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMaxVelocity.dwMaxVelocityInKmPerHourDefault">
            <summary>
Default value for Max Velocity In Km Per Hour.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMaxVelocity.dwMaxVelocityInKmPerHourUpperLimit">
            <summary>
Upper limit for Max Velocity In Km Per Hour.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SMaxVelocity.dwMaxVelocityInKmPerHourLowerLimit">
            <summary>
Lower limit for Max Velocity In Km Per Hour.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SMaxVelocity.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SMaxVelocity">
            <summary>
Maximum speed of the test vehicle to adjust fading channel limitation in the measurement algorithms.
To calculate a value from miles per hour to kilometer per hour, use the formula shown below: v[km/h] = 0.621371192237334  v[m/h];
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SyncChannelDemodulationMode.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SyncChannelDemodulationMode.Type.FAST">
            <summary>
Usage of fast demodulation if new pilots have been detected. This is the preferred mode, since it combines a high accuracy and a processing saving detection method.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SyncChannelDemodulationMode.Type.ALL">
            <summary>
Sync channel has to be demodulated for each new pilot (if the PN-Scanner has found a new pilot). This is a very time consuming tasks, since the software constantly has to perform a demodulation for new pilots.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SyncChannelDemodulationMode.Type.ONCE">
            <summary>
Sync channel has to be demodulated only once for time synchronization. This has to be done for each RF band, but processing power is saved for other tasks in that mode.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SyncChannelDemodulationMode.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SyncChannelDemodulationMode">
            <summary>
Sync channel demodulation mode settings
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SPPSSettings.iDelayOfPPSFallingEdgeIn100ns">
            <summary>
Delay of the PPS Pulse in 100ns or iInvalidPPSDelayIn100ns.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SPPSSettings.iInvalidPPSDelayIn100ns">
            <summary>
invalid value: 1 sec
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SPPSSettings.iDelayOfPPSFallingEdgeIn100nsUpperLimit">
            <summary>
Upper limit for Delay Of PPS Falling Edge In 100ns.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SPPSSettings.iDelayOfPPSFallingEdgeIn100nsLowerLimit">
            <summary>
Lower limit for Delay Of PPS Falling Edge In 100ns.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SPPSSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SPPSSettings">
            <summary>
PPS Pulse The PPS (pulse per second) signal from an external GPS receiver fed to the PULSE IN connector at the rear panel of the device is used for synchronization. This signal provides maximum accuracy.
If the iDelayOfPPSFallingEdgeIn100ns is valid and PPS synchronisation is used for the receiver than we use the PPS for time synchronization. See also comments to STimeEstimationResult::lMeasuredPPSDelayInNs to find the correct value. If the iDelayOfPPSFallingEdgeIn100ns is invalid, than the PPS is not used for time synchronization even if a PPS is available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SChannelSettings.pTableOfFrequencySetting">
            <summary>
Pointer to an array containing the frequencies of the selected channels. The number of members in the array is defined by dwCount (above).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SChannelSettings.dwCount">
            <summary>
Number of frequency configurations that shall be used from the pTableOfFrequencySetting to perform the measurement tasks. For value range see GetChannelCountLimits().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SChannelSettings.dwMeasRatePer1000Sec">
            <summary>
The desired measurement rate value. For default value and range see GetMeasRateLimits().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SChannelSettings.dwFrontEndSelectionMask">
            <summary>
Receiver front end to be used by the scanner for this channel. Scanner tasks are not allowed to contain multiple FE's.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SChannelSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SChannelSettings">
            <summary>
SChannelSettings contains the count of channels or frequencies and the table of frequencies in MHz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SFrequencySetting.bIsEvdoFrequency">
            <summary>
If this shall be demodulated as EVDO channel, then this has to be set to true.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SFrequencySetting.bTableOfPNOffsetArbitraryLimitation">
            <summary>
512 TRUE/FALSE values. TRUE is if the Offset is used in the network, FALSE if not. This limitation is used for the offset estimation by arrival time. It is not used for demodulation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SFrequencySetting.dCenterFrequencyInHz">
            <summary>
Center frequency of the channel
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SFrequencySetting.dwFixCountOfPNOffsetArbitraryLimits">
            <summary>
Maximum number of PN Offset Arbitrary Limits per frequency
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SFrequencySetting.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SFrequencySetting">
            <summary>
This defines the frequency in Hz and a table, where each single PN offset can be specified to be measure or not. If this is an EVDO channel is also set here.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SChannelState.bIsEnabled">
            <summary>
TRUE - this channel is currently active. FALSE - all channel measurements are switched off (measurement rates below are preserved for future use).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CDMA.SChannelState.dwChannelIndex">
            <summary>
The channel index for this measurement settings information.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CDMA.SChannelState.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CDMA.SChannelState">
            <summary>
Struct containing the channel measurement settings that can be modified during a running measurement
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.SL3DecoderResult">
Result from the Layer 3 Decoder.
The string returned via this structure is formatted according to the appropriate CDMA / EVDO standard.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.SL3DecoderRequest">
Request for the Layer 3 Decoder.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.ListMeasurementRates">
List of measurement rates rates and other values in relation to the measurement rate for
one or more time intervals of measurement rate calculation. The measurement rate is
the ratio of all measurements of the same type of measurement at the time
the measurement signals have been picked from the air. So the time of arrival
at the host application is not used. And equal measurements at different RF channels are put together.

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.STimeEstimationResult.lMeasuredPPSDelayInNs">
      The measured GPS PPS Pulse time difference in ns. This value is valid, if bGpsPpsWasAvailable is TRUE
      and if the eOffsetEstimationMethod is OFFSET_ESTIMATION_METHOD_3. The range is -1ms (-1000000).. 999ms (999000000).
      It shows the GPS arrival time for the case that the measurement results (delays) are correct.

      If a time delay of a BTS signal is known, than the measurement error of the PN-Scanner result can be calculated.
      The same error applies to this value. E.g. PN_Offest 271 was measured. The frame of this signal is
      transmitted 271 * 64/1228800sec =  14114.58us after a frame with offset 0. Assume the distance to the BTS is 5km.
      So a measurement result of 14114.58us + 5000m / (300m/us) = 14114.58us + 16.67us = 14131.31us is the
      expected measurement value. If for instance a delay of 14141.31us was measured as a delay value for this BTS
      then the measurement result has an error of +10us.

      Now we can reduce both the delay value and the PPS delay value by 10us to get correct results.

      The corrected value times 0.01 can be used to be set in the SPPSSettings::iDelayOfPPSFallingEdgeIn100ns in the start command
      to calibrate the GPS delay.

</member>
        <member name="F:OFFSET_ESTIMATION_METHOD_4">
At least one F-Sync demodulation and GPS PPS were used for the CDMA2000 time line estimation. The PN offset values 
for pilot signals can be estimated from arrival time as long as no F-Sync demodulation for this pilots are 
successful.
Transmit time has now GPS accuracy. To enable the GPS time based offset estimation method PPS synchronisation has to be used
for the receiver and SPPSSettings::iDelayOfPPSFallingEdgeIn100ns is in a valid range and PPS pulses are fed in the receiver.
The accuracy of the time line estimation directly depends on SPPSSettings::iDelayOfPPSFallingEdgeIn100ns.

</member>
        <member name="F:OFFSET_ESTIMATION_METHOD_3">
At least one F-Sync demodulation was successful but GPS PPS is not available or not used for time line estimation. 
The PN offset values for pilot signals will be estimated from of the arrival time as long as no F-Sync demodulation 
for this pilots are successful. The transmit time was estimated by several received pilots using internal algorithms.
The scanner remains in this state if PPS synchronisation is not used for the receiver or if 
SPPSSettings::iDelayOfPPSFallingEdgeIn100ns is not in a valid range or if no PPS pulses are fed in the receiver. 

</member>
        <member name="F:OFFSET_ESTIMATION_METHOD_1">
No F-Sync demodulation for any BTS was not yet successfully finished, therefore all reported PN-offset values are set 
to wInvalidPNOffset. The transmit time is estimated by receive time by an internal algorithm. For a CDMA2000 channel 
the scanner is in this state only short time normally.

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.SMeasResult.STimeEstimationResult.etOffsetEstimationMethod">
      If the F-SYNC channel of any receiver pilot signal is not yet demodulated a time based PN-Offset estimation method is used 
      by the scanner. For this estimation the CDMA 2000 time line has to be synchronised with the internal receiver time. 
      The time based PN-Offset estimation needs at least one F-SYNC channel to be demodulated for both, the PPS synchronised 
      method and the CDMA2000 network synchronised method.

      The offset estimation method specifies how a time based PN offset measurement value was derived and how reliable the
      result is. 

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.SMeasResult.STimeEstimationResult">
Information for the time line estimation used for arrival times and time estimation of PN-Offset
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.SMeasResult.SDemodResult">
If a message could be demodulated then the pointer to the MsgResult for this measurement is valid (!= NULL)
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.SSyncChannelDemodulationResult.dwCountOfReceivedBitsWithError">
Bit error rate measured
Given as Count of received bits with error and count of all received bits
Can be invalid.

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.SMeasResult.SSyncChannelDemodulationResult">
Sync Channel Demodulation Result *
SyncChannelDemodulationResult:
The contents of the synchronization message are described in standard TIA-2000.5-D.
see spec C.S0005-D 3.7.2.3.2.26
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.ListOfFPichCirs">
Result list of F-PICH CIRs.

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.SFPichCir.ListOfPeaks">
Peak result list.

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.SFPichCir.SPeakInfo.psDopplerShiftInHz">
The doppler shift. If invalid, the pointer is NULL;

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.SFPichCir.SPeakInfo.sPeakPowerInDBm100">
This power includes short term reflections and may be different to the power
in the CIR graph at the same position.

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.SFPichCir.SPeakInfo.dwTimeDelayInCirSamples">
Signal of the peak has arrived the receiver dwTimeDelayInCirSamples/dwCirSamplingRateInHz seconds 
delayed from u64DeviceTimeInNs.

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.SFPichCir.SPeakInfo.pExtendedPNOffset">
The identifier for this measurement, NULL if not available.

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.SMeasResult.SFPichCir.SPeakInfo">
structure which contains results for separated peak values in the CIR
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.SFPichCir.sRSCPInDBm100">
Integral measured power for the F-PICH signal (composition of all peaks).

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.SFPichCir.sInbandPowerInDBm100">
Power in the RF band during the CIR measurement.

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.SFPichCir.psCodePowerInDBm100">
CIR power values in 0.01dBm in time distance dwCirResolutionInFemtoSeconds.
\@attribute[type="array" size="dwCountOfCodePowerValues" sizeismember="true" filterable="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.SFPichCir.dwCountOfCodePowerValues">
The length of the CIR depends on distance between minimum and maximum delayed signal components.

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.SFPichCir.pfFrameToaOffsetToPpsInSec">
      The offset of the radio frame arrival time from the time it was sent from the base station.
      It uses the even GPS PPS pulse and the PN Offset value to determine the time offset.
      The radio frame beginning is calculated using the maximum CIR peak.

      3 CDMA radio frames build up one CDMA super frame with 80 ms length, 
      therefore one radio frame has a length of 80/3 ms = 26.6666666 ms.

      To determine the frame delay as value within +/- half of the radio length (+/- 26.666666 ms / 2),
      you must add this half RF length value, apply a full RF length modulo calculation and then subtract 
      the half length value:
      double dFrameDelay_ms = ( (1000*dFrameToaOffsetToPpsInSec  + 5 ms) modulo 10 ms ) - 5 ms

      In addition, it will take about 100 s from start of measurement, before the first results are provided.

      @note
      This feature requires a GPS antenna to be connected to the receiver.

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.SFPichCir.dwTimeDelayInCirSamples">
The first CIR signal psCodePowerInDBm100[0] has arrived the receiver
      dwTimeDelayInCirSamples/dwCirSamplingRateInHz seconds delayed from u64DeviceTimeInNs
      this value can be used to display the time delay between different CIRs.

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.SMeasResult.SFPichCir">
For most code power measurements and for F-PICH CIR measurements not only the absolute code power value (in 0.01dBm) is
reported but in addition the absolute total inband power value (InbandPower) belonging to the code power measurement is reported.
This makes it possible to calculate the Ec/Io for the measured code power by subtracting the InbandPower which belongs to the
code power.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.pdTsmuMeasTimeInSec">
Tsmu Meas Time
Exact time when the CIR measurement was taken. This can be used to analyze the fading situation.

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.psAverageInbandPowerInDBm100">
If a CIR measurement had no success (e.g. there is no CDMA2000 signal on air) then we get at least the received power of the
specified channel.
The pointer to this power value is valid (!= NULL) if a power measurement was performed.

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.sInvalidPowerInDBm100">
The power values of the CIR are given in 0.01dB resolution as 16 bit signed integer values in the range of (-327.67..327.67dBm).
Some power values of a CIR may be below the noise limit or have not been measured. In this case the integer gets the invalid power value
0x8000 = -32768 = -2^15 = -327.68dBm.

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.dwCirSamplingRateInHz">
Sometimes it is more convenient to operate with the reciprocal of the CIR resolution. This is the CIR sampling twice the chip rate.

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.dwCirResolutionInFemtoSeconds">
The CIR is given as a discrete power delay spectrum. The resolution (time distance of adjacent power values) is half the chip distance.
This value is given as an integer constant in femto seconds (10^-15 sec). It is 10^15/(2 * 1228800) = 406901042.

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.u64DeviceTimeInNs">
If available, the device time in ns is reported, otherwise NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.dwPcTimeStampInMs">
   The start time of the RF measurement which was used to produce the result.

   The dwPcTimeStampInMs is a conversion of the device time to the PC system time obtained with the 
   GetTickCount() function.
   The adjustment of possible time drift between internal device time and GetTickCount() as well as the resolution 
   of GetTickCount() causes a conversion error of a few milliseconds.
   dwPcTimeStampInMs may be used to synchronize PN-Scanner results with other measurement data in the system 
   or to determine the age of the PN-Scanner result = GetTickCount() - dwPcTimeStampInMs

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.dwChannelIndex">
   Channel index to which the measurement belongs.

   Each result is for only one of the selected RF channels. The channel index counts from 0 and corresponds to the
   array index in SChannelSettings::pdTableOfFrequencyInMHz.

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.SExtendedPNOffset.bOffsetSourceIsTimeEstimation">
The PN-Offset was found by a time estimation. The circumstances
(reliability etc.) of the time estimation are described in STimeEstimationResult. Only this
or bOffsetSourceIsSyncChannelDemodulation is set.

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SMeasResult.SExtendedPNOffset.bOffsetSourceIsSyncChannelDemodulation">
Source of the PN-Offset was a demodulation of the sync channel
of this base station (even if it was long before we did this measurement). So the PN
Offset value is correct.

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.SMeasResult.SExtendedPNOffset">
   The SExtendedPNOffset structure identifies a basestation in the system and provides PN-Offset measurement results for
   this basestation. 

   Measurement results with equal values {channel, ID} are very likely from the same physical BTS. As long as the arrival time of 
   a measured pilot signal fits the 80/3 ms frame pattern of a previously measured pilot signal the ID of the previously measured
   signal is reused for this measured signal. If two pilot signals transmitted from the same BTS have been measured at different 
   locations a new ID value is used for the recent signal if the previous pilot signal measurement was taken long ago or due to 
   strong reflections a fit of the frame timing is not assumed.

   In contrast to UMTS SC the PN-Offset in the measurement results is not used to indicate that results belong to
   the same BTS, as the PN-Offset is time-estimated or demodulated. E.g. two results for the same channel {ID = 156,
   PN-Offset = 30 (time estimated)} and {ID = 156, PN-Offset = 32 (demodulated)} belong to the same BTS. In this case
   the PN-Offset time estimation was wrong and may be corrected in a post process using this ID.
   \@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.SMeasResult">
This structure holds a measurement result from the result buffer. Please refer to the manual for a detailed discussion of
how to interpret the results.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.SSettings">
By means of the functions: SetConfiguration() internal settings of the PN-Scanner may be changed and with the functions
SelectReceiver(), SetTimebaseSynchronisationMode() of CViComBasicInterfaceData change basic settings.
Except of frequency settings all other settings have default values.

This structure bundles these settings and will be returned as result from the GetSettings() method.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SEvdoControlSettings.dwShortSyncRangeInChips">
This is the range the short sync will use to calculate the timing estimation when synchronizing
with EVDO channels. During such a sync phase, synchronization will be performed around the expected
point in time with the specified radius. 
There are significant processing thresholds all 160 chips (39km). We recommend 160 chips (39km) 
for downtown areas and 320 chips (78km) for urban areas. 

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SEvdoControlSettings.bStopCdma2000AfterSync">
If this is set to true, then the CDMA 2000 demodulation is stopped after the
first complete demodulation of a sync channel. That helps saving time and it is not
required. Once a synchronization is available, the time estimation can be performed.

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SEvdoControlSettings.dwMeasRatePer1000Sec">
Measurement rate for EVDO measurements. 
All channels together will be measured with this rate, i.e. one channel will be measured with an average
of ChannelCount/dwMeasRatePer1000Sec measurements per 1000 sec. 

The valid ranges are defined in the SMeasurementRate struct.

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.SEvdoControlSettings">
As an additional option, the CDMA 2000 interface can measure and demodulate EVDO channels as well. How this
is done can be controlled by the parameters made available in this structure.

Which EVDO channels shall be measured is specified as part of the SFrequencySetting structure vector
that is contained in the SChannelSettings structure.

@note
   To use EVDO scanning without scanning any CDMA channel, you must at least activate BCH Demodulation for EVDO_SYNC message.


\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SDemodulationSettings.dwFrontEndSelectionMask">
Receiver front end to be used by the demodulator for this channel. 
If no demodulation shall be provided, this shall be set to 0.
Demodulation tasks are not allowed to contain multiple FE's.

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SDemodulationSettings.lEcToIoThresholdInDB100_for_EVDO">
Threshold for EVDO demodulation trials in 0.01dB.
For default value and range see GetDemodThresholdLimits().

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SDemodulationSettings.lEcToIoThresholdInDB100_for_CDMA">
Threshold for CDMA demodulation trials in 0.01dB.
For default value and range see GetDemodThresholdLimits().

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.SDemodulationSettings">
This structure is used to configure the BCH demodulation process.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SDemodRequests.pDemodRequests">
\@attribute[type="array" size="dwCountOfRequests" sizeismember="true"]

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.SDemodRequests.SDemodRequest">
   There must be one instance of this structure for each BCH demodulation request,
   therefore different message ids can be measured on different channels.

   Example for start measurement:
            On the first channel the system parameters and the channel list messages shall be decoded, on the the 
            second channel the neighbor list additionally. For the channel with index 1,
            the channel list shall be decoded repeatedly every 10 seconds (100*100 ms) and the neighborlist shall be decoded on demand.
            This requires five structures containing the following parameter sets:
   @code
            {0, { Pdu::SYS_PARAMS, C2K_CH_TYPE_ALL }, ONCE, 0, 0},
            {0, { Pdu::CHAN_LIST, C2K_CH_TYPE_ALL }, ONCE, 0, 0},
            {1, { Pdu::SYS_PARAMS, C2K_CH_TYPE_ALL }, ONCE, 0, 0},
            {1, { Pdu::CHAN_LIST, C2K_CH_TYPE_ALL }, REPETITION, 100, 0},
            {1, { Pdu::NEIGHBOR_LIST, C2K_CH_TYPE_ALL }, ON_CMD, 0, 0},
            {2, { Pdu::SYNC, C2K_CH_TYPE_ALL }, ONCE, 0, 0},
   @endcode
   Example during measurement:
            On channel 0 the system parameter message demodulation shall be completely reset for the BTS with the ID 260
            and on the the second channel the neighbor list demodulation shall be decoded for the BTS identified by ID 116 with 
            a timeout for the request of 1 sec (10*100ms):
   @code
            {0, { Pdu::SYS_PARAMS, C2K_CH_TYPE_ALL }, BTS_RESET, 0, 260},
            {1, { Pdu::NEIGHBOR_LIST, C2K_CH_TYPE_ALL }, BTS, 10, 116}
   @endcode
   @note
   You are responsible to manage the memory when you use SetDemodulationSettings().
   All parameters which are not necessary for a certain request shall be set to 0.

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.SDemodRequests">
This structure is used to configure message demodulation requests.
It is used in start measurement requests and it is used to issue BCH demodulation requests during measurement,
e.g. demodulation is requested on demand or to reset previous intermediate results of demodulation.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.SPduSpec">
This structure can be used to define a message type related filter for channels and to specify details
on demodulated messages. So it is used as in- and output structure. 

@note
    When this is used as input parameter to specify the demodulation requests, then the ChannelType
    information is not evaluated inside the ViCom. Settings made that are ignored completely.

When a message has been demodulated successfully, this structure specifies the demodulation details.
The channel information then shows from what channel the message has been demodulated.
\@attribute[type="serializable"]

</member>
        <member name="F:BTS_OLD_FORCE">
Equal to BTS_FORCE but previously measured messages may be used for the result.
This can be requested only during a running measurement.


Equal to BTS_FORCE but previously measured messages may be used for the result.
This can be requested only during a running measurement.


Equal to BTS_FORCE but previously measured messages may be used for the result.
This can be requested only during a running measurement.

</member>
        <member name="F:BTS_OLD">
Equal to BTS but previously measured messages may be used for the result.
This can be requested only during a running measurement.


Equal to BTS but previously measured messages may be used for the result.
This can be requested only during a running measurement.


Equal to BTS but previously measured messages may be used for the result.
This can be requested only during a running measurement.

</member>
        <member name="F:BTS_RESET">
All demodulation results for a special BTS will be deleted and
the demodulation for this BTS starts as specified in SDemodulationSettings::sStartMeasurementRequests.
This can be requested only during a running measurement.


All demodulation results for a special BTS will be deleted and
the demodulation for this BTS starts as specified in SDemodulationSettings::sStartMeasurementRequests.
This can be requested only during a running measurement.


All demodulation results for a special BTS will be deleted and
the demodulation for this BTS starts as specified in SDemodulationSettings::sStartMeasurementRequests.
This can be requested only during a running measurement.

</member>
        <member name="F:BTS_FORCE">
Equal to BTS but the limitation in receiver resource usage will be ignored and the demodulation will be
be done until the PDU has been demodulated or timeout occurred.


Equal to BTS but the limitation in receiver resource usage will be ignored and the demodulation will be
be done until the PDU has been demodulated or timeout occurred.


Equal to BTS but the limitation in receiver resource usage will be ignored and the demodulation will be
be done until the PDU has been demodulated or timeout occurred.

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.DemodMode">
This enumeration defines modes for the demodulation.
Use this in the SDemodRequest structure to specify when the demodulation 
of this PDU shall be done.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.EvdoProtocol">
Detail information about the EVDO Protocol ID

@see PduSpec for further details
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.ChannelType">
Detail information on what kind of channel was used to demodulate a message, or which 
shall be used to demodulate one. This depends on whether this is used in the measurement
setup or in the result structures.

@see PduSpec for further details
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.Pdu">
Here you can find a list of messages that can be demodulated by the CDMA 2000 scanner. The values in this enumeration
can be used as in- and output parameters to specify which kind of message shall or has been demodulated. In many cases,
this is combined with a channel filter specifying on which channel the message occurred.
   
@see etChannelType and PduSpec for the combined usage
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.SMaxVelocity">
Maximum speed of the test vehicle to adjust fading channel limitation in the measurement algorithms.

To calculate a value from miles per hour to kilometer per hour, use the formula shown below:
v[km/h] = 0.621371192237334 * v[m/h];
\@attribute[type="serializable"]

</member>
        <member name="F:FAST">
Usage of fast demodulation if new pilots have been detected. This is the preferred mode, since it
combines a high accuracy and a processing saving detection method.

</member>
        <member name="F:ALL">
Sync channel has to be demodulated for each new pilot (if the PN-Scanner has found a new pilot). This
is a very time consuming tasks, since the software constantly has to perform a demodulation for new pilots.

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.SyncChannelDemodulationMode">
Sync channel demodulation mode settings
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.SPPSSettings">
PPS Pulse
The PPS (pulse per second) signal from an external GPS receiver fed to the PULSE IN connector at the rear panel of
the device is used for synchronization. This signal provides maximum accuracy.

If the iDelayOfPPSFallingEdgeIn100ns is valid and PPS synchronisation is used for the receiver than we use the PPS for 
time synchronization. See also comments to STimeEstimationResult::lMeasuredPPSDelayInNs to find the correct value.
If the iDelayOfPPSFallingEdgeIn100ns is invalid, than the PPS is not used for time synchronization even if a PPS is available.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SChannelSettings.pTableOfFrequencySetting">
Pointer to an array containing the frequencies of the selected channels.
The number of members in the array is defined by dwCount (above).

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SChannelSettings.dwCount">
Number of frequency configurations that shall be used from the pTableOfFrequencySetting to perform the measurement tasks.
For value range see GetChannelCountLimits().
*
</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SChannelSettings.dwMeasRatePer1000Sec">
The desired measurement rate value. For default value and range see GetMeasRateLimits().

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SChannelSettings.dwFrontEndSelectionMask">
Receiver front end to be used by the scanner for this channel.
Scanner tasks are not allowed to contain multiple FE's.

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.SChannelSettings">
SChannelSettings contains the count of channels or frequencies and the table of frequencies in MHz.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SFrequencySetting.bIsEvdoFrequency">
If this shall be demodulated as EVDO channel, then this has to be set to true. 

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SFrequencySetting.bTableOfPNOffsetArbitraryLimitation">
512 TRUE/FALSE values. TRUE is if the Offset is used in the network, FALSE if not.
This limitation is used for the offset estimation by arrival time. It is not used for demodulation.

</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SFrequencySetting.dCenterFrequencyInHz">
Center frequency of the channel 
</member>
        <member name="F:RohdeSchwarz.ViCom.CDMA.SFrequencySetting.dwFixCountOfPNOffsetArbitraryLimits">
Maximum number of PN Offset Arbitrary Limits per frequency*
</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.SFrequencySetting">
This defines the frequency in Hz and a table, where each single PN offset can be specified
to be measure or not. If this is an EVDO channel is also set here.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.SChannelState">
Struct containing the channel measurement settings that can be modified during a running measurement
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.CDMA.etViComInterfaceVersion">
Data containers used for ViCom LTE interface. Contains measurement configuration and result structures.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.GetType">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.IOT.CViComIotInterfaceDataProcessor)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.NR.CViComNrInterfaceDataProcessor)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.LTE.CViComLteInterfaceDataProcessor)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ResultDataListener to remove it from the list of objects that shall get notification about new measurement data.
RegisterResultDataListener
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.listenerConverterIOT">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.IOT.CViComIotInterfaceDataProcessor)">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.listenerConverterNR">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.NR.CViComNrInterfaceDataProcessor)">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.listenerConverterLTE">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.LTE.CViComLteInterfaceDataProcessor)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
For FastACD, there is more than a single ResultDataListener. FastACD comes with the default ResultDataListener to process a FastACD result. Depending on the ACD result, it can potentially have additional results specific to the technology the ACD result is associated with. When technology specific results are needed with FastACD, the other ResultDataListener must be used.
@note
To avoid crashes, it is important to call UnregisterDataListener prior to deleting the interface.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.GetNrSettingsFrom(System.Double)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.GetIotSettingsFrom(System.Double)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.GetLteSettingsFrom(System.Double)">
            <summary>
Returns information that can be used to configure a technology specific scanning interface. Functions may be called during measurement or after a measurement.
</summary>
            <param name="dFrequencyInHz">
The frequency from a result from FastACD. Used to determine which SFrequencySetting to return.
</param>
            <return>
SFrequencySetting based on frequency and technology provided. A nullptr is returned if the specified frequency has not been detected or if the technology specific information required to fill in SFrequencySetting has not been received yet.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.ResetConfiguration">
            <summary>
Clears configured technologies and configured bands.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.RemoveBand(RohdeSchwarz.ViCom.Net.Technology.Type,System.UInt32)">
            <summary>
Removes a band from the measurement
</summary>
            <param name="technology">
The technology that the band is associated with.
</param>
            <param name="band">
The band used for a measurement. Can either be a custom frequency band or a technology specific frequency band.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.AddCustomFrequencyBand(RohdeSchwarz.ViCom.Net.Technology.Type,System.Double,System.Double,System.UInt32)">
            <summary>
This function allows one to define their own frequency bands by specifying both a start and stop frequency. If a non zero band is provided, that band information is configured with the new frequencies provided.
@note
Refer to notes for AddBand regarding GSM and CDMA technologies.
</summary>
            <param name="technology">
The technology in which this new frequency range will be applied to
</param>
            <param name="startFrequencyInHz">
The start frequency of the range in Hz
</param>
            <param name="stopFrequencyInHz">
The stop frequency of the range in Hz
</param>
            <param name="band">
When 0, a band identifier will be generated by ViCom. When non zero, the custom frequency band will be assigned to the band specified.
</param>
            <return>
A generated band identifier to associate with the custom frequency band.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.AddCustomFrequencyBand(RohdeSchwarz.ViCom.Net.Technology.Type,System.Double,System.Double)">
            <summary>
This function allows one to define their own frequency bands by specifying both a start and stop frequency. If a non zero band is provided, that band information is configured with the new frequencies provided.
@note
Refer to notes for AddBand regarding GSM and CDMA technologies.
</summary>
            <param name="technology">
The technology in which this new frequency range will be applied to
</param>
            <param name="startFrequencyInHz">
The start frequency of the range in Hz
</param>
            <param name="stopFrequencyInHz">
The stop frequency of the range in Hz
</param>
            <param name="band">
When 0, a band identifier will be generated by ViCom. When non zero, the custom frequency band will be assigned to the band specified.
</param>
            <return>
A generated band identifier to associate with the custom frequency band.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.AddBand(RohdeSchwarz.ViCom.Net.Technology.Type,System.UInt32)">
            <summary>
Add a technology specific frequency band to ViCom.
@note
This function handles technology specific frequency bands by supplying a band number. Refer to AddCustomFrequencyBand() to create custom frequency bands where start and stop frequency values are used.
&lt;simplesect kind="par"&gt;
Setting the technology value to Technology::CDMA implies CDMA2000, which includes 1xRTT, 1X Advanced, and 1xEV-DO. FastACD will search for both CDMA and EVDO channels in the band(s) requested; however, CDMA and EVDO channel detections will be reported to ViCom as separate results.
&lt;simplesect kind="par"&gt;
When the technology is set to Technology::GSM, use the table below to set the band number as there is no standard numerical value assigned to the bands in the 3GPP specification for GSM. The values follow the Roman numerals as shown in section &lt;bold&gt;2 Frequency bands and channel arrangement&lt;/bold&gt; of the specification. Refer to TS 45.005 version 15.1.0 Release 15 for further information. GSM bands using dynamic ARFCNs are not supported as indicated in the band list below.
GSM 380      1    (Unsupported)
GSM 410      2    (Unsupported)
GSM 450      3
GSM 480      4
GSM 710      5    (Unsupported)
GSM 750      6    (Unsupported)
GSM 810      7    (Unsupported)
GSM 850      8
P-GSM 900    9
E-GSM 900   10
R-GSM 900   11
DCS 1800    13
PCS 1900    14
ER-GSM 900  15
</summary>
            <param name="technology">
An indicator used to assign the band to a specific technology, this avoids overlap with with technologies that have similar bands.
</param>
            <param name="band">
A band number associated with the technology specified.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.SelectFrontEnd(System.UInt32)">
            <summary>
Allows manual selection of the front end. Used when more than one front-end is connected. If a front end is not specified, will default to using SRFPort::RF_1 also known as front end one.
When using AFE, this will indicate which frontends are allowed to be used by AFE. All other frontends available will be ignored by AFE. With AFE, if not specified AFE will attempt to use all all available front ends of a receiver for the measurement.
Can be used as a bit mask, to select multiple front ends with AFE.
</summary>
            <param name="frontend">
Frontend that should be used. Filled using SRFPort structure.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.GetBasicInterface">
            <summary>
The basic interface is a part of any application specific ViCom interface. It is used for different TSM applications. The purpose is to control basic TSM functions, which are not specific for a certain measurement. See CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.#ctor(RohdeSchwarz.ViCom.FastACD.ViComFastACDInterface*)">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.m_converter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.m_nativeIf">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterface">
            <summary>
This class can be used to automatically detect channels without knowing the corresponding radio frequencies.
Note: All parameters are set by default. Functions only need to be called for minor tweaking!
Note: Front end selection is not available for FastACD at this moment. Front end selection will be added with the next release. When using multiple receivers, FE1 will automatically be assigned.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.DataConverterViComFastACDInterfaceData.Convert2M(RohdeSchwarz.ViCom.Technology.Type)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.DataConverterViComFastACDInterfaceData.Convert2M(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.DataConverterViComFastACDInterfaceData.Convert2M(RohdeSchwarz.ViCom.IOT.SMeasResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.DataConverterViComFastACDInterfaceData.Convert2M(RohdeSchwarz.ViCom.NR.SMeasResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.DataConverterViComFastACDInterfaceData.Convert2M(RohdeSchwarz.ViCom.LTE.SMeasResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.DataConverterViComFastACDInterfaceData.Convert2M(RohdeSchwarz.ViCom.FastACD.SMeasResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.DataConverterViComFastACDInterfaceData.Convert2M(RohdeSchwarz.ViCom.NR.SFrequencySetting*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.DataConverterViComFastACDInterfaceData.Convert2M(RohdeSchwarz.ViCom.IOT.SFrequencySetting*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.DataConverterViComFastACDInterfaceData.Convert2M(RohdeSchwarz.ViCom.LTE.SFrequencySetting*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.DataConverterViComFastACDInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.Net.Technology.Type)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.DataConverterViComFastACDInterfaceData.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.DataConverterViComFastACDInterfaceData.Instance">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.DataConverterViComFastACDInterfaceData.s_instance">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.FastACD.DataConverterViComFastACDInterfaceData">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.IViComFastACDInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.IOT.CViComIotInterfaceDataProcessor)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.IViComFastACDInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.NR.CViComNrInterfaceDataProcessor)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.IViComFastACDInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.LTE.CViComLteInterfaceDataProcessor)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.IViComFastACDInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ResultDataListener to remove it from the list of objects that shall get notification about new measurement data.
RegisterResultDataListener
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.IViComFastACDInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.IOT.CViComIotInterfaceDataProcessor)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.IViComFastACDInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.NR.CViComNrInterfaceDataProcessor)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.IViComFastACDInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.LTE.CViComLteInterfaceDataProcessor)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.IViComFastACDInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
For FastACD, there is more than a single ResultDataListener. FastACD comes with the default ResultDataListener to process a FastACD result. Depending on the ACD result, it can potentially have additional results specific to the technology the ACD result is associated with. When technology specific results are needed with FastACD, the other ResultDataListener must be used.
@note
To avoid crashes, it is important to call UnregisterDataListener prior to deleting the interface.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.IViComFastACDInterface.GetNrSettingsFrom(System.Double)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.IViComFastACDInterface.GetIotSettingsFrom(System.Double)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.IViComFastACDInterface.GetLteSettingsFrom(System.Double)">
            <summary>
Returns information that can be used to configure a technology specific scanning interface. Functions may be called during measurement or after a measurement.
</summary>
            <param name="dFrequencyInHz">
The frequency from a result from FastACD. Used to determine which SFrequencySetting to return.
</param>
            <return>
SFrequencySetting based on frequency and technology provided. A nullptr is returned if the specified frequency has not been detected or if the technology specific information required to fill in SFrequencySetting has not been received yet.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.IViComFastACDInterface.ResetConfiguration">
            <summary>
Clears configured technologies and configured bands.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.IViComFastACDInterface.RemoveBand(RohdeSchwarz.ViCom.Net.Technology.Type,System.UInt32)">
            <summary>
Removes a band from the measurement
</summary>
            <param name="technology">
The technology that the band is associated with.
</param>
            <param name="band">
The band used for a measurement. Can either be a custom frequency band or a technology specific frequency band.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.IViComFastACDInterface.AddCustomFrequencyBand(RohdeSchwarz.ViCom.Net.Technology.Type,System.Double,System.Double,System.UInt32)">
            <summary>
This function allows one to define their own frequency bands by specifying both a start and stop frequency. If a non zero band is provided, that band information is configured with the new frequencies provided.
@note
Refer to notes for AddBand regarding GSM and CDMA technologies.
</summary>
            <param name="technology">
The technology in which this new frequency range will be applied to
</param>
            <param name="startFrequencyInHz">
The start frequency of the range in Hz
</param>
            <param name="stopFrequencyInHz">
The stop frequency of the range in Hz
</param>
            <param name="band">
When 0, a band identifier will be generated by ViCom. When non zero, the custom frequency band will be assigned to the band specified.
</param>
            <return>
A generated band identifier to associate with the custom frequency band.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.IViComFastACDInterface.AddCustomFrequencyBand(RohdeSchwarz.ViCom.Net.Technology.Type,System.Double,System.Double)">
            <summary>
This function allows one to define their own frequency bands by specifying both a start and stop frequency. If a non zero band is provided, that band information is configured with the new frequencies provided.
@note
Refer to notes for AddBand regarding GSM and CDMA technologies.
</summary>
            <param name="technology">
The technology in which this new frequency range will be applied to
</param>
            <param name="startFrequencyInHz">
The start frequency of the range in Hz
</param>
            <param name="stopFrequencyInHz">
The stop frequency of the range in Hz
</param>
            <param name="band">
When 0, a band identifier will be generated by ViCom. When non zero, the custom frequency band will be assigned to the band specified.
</param>
            <return>
A generated band identifier to associate with the custom frequency band.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.IViComFastACDInterface.AddBand(RohdeSchwarz.ViCom.Net.Technology.Type,System.UInt32)">
            <summary>
Add a technology specific frequency band to ViCom.
@note
This function handles technology specific frequency bands by supplying a band number. Refer to AddCustomFrequencyBand() to create custom frequency bands where start and stop frequency values are used.
&lt;simplesect kind="par"&gt;
Setting the technology value to Technology::CDMA implies CDMA2000, which includes 1xRTT, 1X Advanced, and 1xEV-DO. FastACD will search for both CDMA and EVDO channels in the band(s) requested; however, CDMA and EVDO channel detections will be reported to ViCom as separate results.
&lt;simplesect kind="par"&gt;
When the technology is set to Technology::GSM, use the table below to set the band number as there is no standard numerical value assigned to the bands in the 3GPP specification for GSM. The values follow the Roman numerals as shown in section &lt;bold&gt;2 Frequency bands and channel arrangement&lt;/bold&gt; of the specification. Refer to TS 45.005 version 15.1.0 Release 15 for further information. GSM bands using dynamic ARFCNs are not supported as indicated in the band list below.
GSM 380      1    (Unsupported)
GSM 410      2    (Unsupported)
GSM 450      3
GSM 480      4
GSM 710      5    (Unsupported)
GSM 750      6    (Unsupported)
GSM 810      7    (Unsupported)
GSM 850      8
P-GSM 900    9
E-GSM 900   10
R-GSM 900   11
DCS 1800    13
PCS 1900    14
ER-GSM 900  15
</summary>
            <param name="technology">
An indicator used to assign the band to a specific technology, this avoids overlap with with technologies that have similar bands.
</param>
            <param name="band">
A band number associated with the technology specified.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.IViComFastACDInterface.SelectFrontEnd(System.UInt32)">
            <summary>
Allows manual selection of the front end. Used when more than one front-end is connected. If a front end is not specified, will default to using SRFPort::RF_1 also known as front end one.
When using AFE, this will indicate which frontends are allowed to be used by AFE. All other frontends available will be ignored by AFE. With AFE, if not specified AFE will attempt to use all all available front ends of a receiver for the measurement.
Can be used as a bit mask, to select multiple front ends with AFE.
</summary>
            <param name="frontend">
Frontend that should be used. Filled using SRFPort structure.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.IViComFastACDInterface.GetBasicInterface">
            <summary>
The basic interface is a part of any application specific ViCom interface. It is used for different TSM applications. The purpose is to control basic TSM functions, which are not specific for a certain measurement. See CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.FastACD.IViComFastACDInterface">
            <summary>
This class can be used to automatically detect channels without knowing the corresponding radio frequencies.
Note: All parameters are set by default. Functions only need to be called for minor tweaking!
Note: Front end selection is not available for FastACD at this moment. Front end selection will be added with the next release. When using multiple receivers, FE1 will automatically be assigned.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterfaceDataProcessor.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.FastACD.ViComFastACDInterfaceDataProcessor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.CViComNrInterface.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.CViComNrInterface.GetType">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.CViComNrInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.NR.CViComNrInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that receive notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.CViComNrInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.NR.CViComNrInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available.
@note
It is important to Unregister the listener again once it is getting deleted, to avoid crashes.
@note
Both possibilities to retrieve results are to be used exclusively. When using ResultDataListener, it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComNrInterface::GetResult() and vice versa.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. An error will be indicated if the listener has already been registered to the interface.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.CViComNrInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.Net.NR.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst,System.UInt32)">
            <summary>
Issue a request to the Layer 3 Decoder to decode the PDU contained by rSL3DecoderRequest. If the data has been decoded successfully within the time given by dwTimeOutInMs, the method creates the SL3DecoderResult and the buffer on the heap, fills in the Layer 3 Decoder result and returns a pointer to it.
</summary>
            <param name="rSL3DecoderRequest">
Contains the data that was the result of an IoT measurement and holds the PDU data that shall be decoded.
</param>
            <param name="dwTimeOutInMs">
The time in milliseconds that the function should wait before returning an error, if the result buffer is empty.
</param>
            <return>
One measurement result on the heap, if the function succeeded. Otherwise NULL. Attention: The returned pointer is only valid until this function is called again.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.CViComNrInterface.GetSettings">
            <summary>
By means of this function you can retrieve the PN-Scanner settings which apply at the moment for measurements to be started or during running measurements.
@note
The result, like all other results too, is only for reading. See SetConfiguration interface function to make changes.
</summary>
            <return>
pointer to a structure holding the current device settings. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.CViComNrInterface.IssueDemodRequests(RohdeSchwarz.ViCom.Net.NR.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary>
Use this function to issue commands (PDU requests, reset commands) for the BCH demodulator during measurement.
PDUs may be acquired for certain eNodeBs. PDU demodulation for eNodeBs or for channels may be reset.
</summary>
            <param name="rDemodRequests">
When the function is called, this pointer contains the request parameters. For details see SDemodRequests.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.CViComNrInterface.GetChannelState(System.UInt32)">
            <summary>
GetChannelState returns the current status of the configurable settings from the channel.
</summary>
            <param name="dwChannelIndex">
Specifies the 0-based channel index to be queried.
</param>
            <return>
Returns a SChannelState object which contains the current state for the channel. The items in SChannelState can be modified during a running measurement using the ModifyChannel method.
SChannelState and ModifyChannel.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.CViComNrInterface.ModifyChannel(RohdeSchwarz.ViCom.Net.NR.SChannelState!System.Runtime.CompilerServices.IsConst)">
            <summary>
ModifyChannel is used to modify configurable channel settings during a running measurement.
SChannelState for items that can be modified.
</summary>
            <param name="sChannelState">
sChannelState contains the modified settings to be changed in the channel.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.CViComNrInterface.AddChannel(System.Double,RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.FrameStructureType.Type,RohdeSchwarz.ViCom.Net.NR.SSBPattern.Type)">
            <summary>
AddChannel is used to create additional channels during a running measurement. The measurement settings from channel index 0, as configured by SetConfiguration(), are used for the new channel.
@note
This method cannot be called in the idle state (IsMeasurementStarted() must return TRUE)
@note
Each channel combination can only be added once. Attempting to add a channel combination multiple times will return the index that is already present.
</summary>
            <param name="dChannelFrequencyInHz">
Center frequency in Hertz for the channel.
</param>
            <param name="frameStructure">
Frame structure for the channel (TDD/FDD).
</param>
            <param name="pattern">
Synchronisation Signal (SS) / Primary Broadcast Channel (PBCH) pattern.
</param>
            <return>
If success, the 0-based channel index for new channel is returned. If failure, 0xFFFFFFFF is returned indicating an invalid channel.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.CViComNrInterface.SetTgSpectrumConfiguration(RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.SpectrumSettings!System.Runtime.CompilerServices.IsConst)">
            <summary>
SetTgSpectrumConfiguration is used to update the time gated spectrum settings during an active measurement.
</summary>
            <param name="spectrumSettings">
Contains the definition which spectrum settings shall be applied. This is only allowed for measurements with active time gated spectrum. Not supported yet!
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.CViComNrInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.NR.SChannelSettings!System.Runtime.CompilerServices.IsConst,RohdeSchwarz.ViCom.Net.NR.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary>
SetConfiguration is used to set internal settings of the PN-Scanner. The functions SelectReceiver() of CViComBasicInterface change basic settings. Except for frequency settings all other settings have default values.
</summary>
            <param name="rChannelSettings">
Contains the definition which frequencies shall be measured. Refer to SChannelSettings for a more detailed description on those settings.
</param>
            <param name="rDemodulationSettings">
Contains the definition which PDUs of BCH shall be measured. Refer to SDemodulationSettings for a more detailed description on those settings.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.CViComNrInterface.GetMeasRateLimits">
            <summary>
Limits for Parameter SFrequencySettings::dwMeasRatePer1000sec.
@note
The resulting meas rate limits are specified for the MeasurementMode::HIGH_SPEED setting. The maximum rating for MeasurementMode::HIGH_SENSITIVITY is equal to the returned default value of the SRange container object.
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.CViComNrInterface.GetDemodThresholdLimits">
            <summary>
Limits for Parameter SDemodulationSettings::sSINRThresholdDB100
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.CViComNrInterface.GetChannelCountLimits">
            <summary>
Limits for Parameter SChannelSettings::dwCount
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.CViComNrInterface.GetBasicInterface">
            <summary>
The basic interface is a part of any application specific ViCom interface. It is used for different TSME applications. The purpose is to control basic TSME functions, which are not specific for a certain measurement. See CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.CViComNrInterface.#ctor(RohdeSchwarz.ViCom.NR.CViComNrInterface*)">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.CViComNrInterface.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.CViComNrInterface.m_converter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.CViComNrInterface.m_nativeIf">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.CViComNrInterface.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.CViComNrInterface">
            <summary>
NR measurement module for ViCom. Offers the configuration and result receiving methods for all NR related measurement tasks.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.Convert2M(RohdeSchwarz.ViCom.Technology.Type)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.Convert2M(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.Convert2M(RohdeSchwarz.ViCom.NR.SMeasResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.Convert2M(RohdeSchwarz.ViCom.NR.SL3DecoderResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.Convert2M(RohdeSchwarz.ViCom.NR.SSettings!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.Convert2M(RohdeSchwarz.ViCom.NR.SChannelState)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.Convert2M(RohdeSchwarz.ViCom.SRange&lt;System.Int16&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.Convert2M(RohdeSchwarz.ViCom.SRange&lt;System.UInt32&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.CleanUp(RohdeSchwarz.ViCom.NR.SL3DecoderRequest*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.NR.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.NR.SL3DecoderRequest*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.NR.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.CleanUp(RohdeSchwarz.ViCom.NR.SDemodRequests*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.NR.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.NR.SDemodRequests*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.NR.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.CleanUp(RohdeSchwarz.ViCom.NR.SChannelState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.NR.SChannelState!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.NR.SChannelState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.NR.SChannelState!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.Net.NR.SSBPattern.Type)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.FrameStructureType.Type)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.CleanUp(RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.SpectrumSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.SpectrumSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.SpectrumSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.SpectrumSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.CleanUp(RohdeSchwarz.ViCom.NR.SDemodulationSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.NR.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.NR.SDemodulationSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.NR.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.CleanUp(RohdeSchwarz.ViCom.NR.SChannelSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.NR.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.NR.SChannelSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.NR.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.Instance">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData.s_instance">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.DataConverterCViComNrInterfaceData">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.ICViComNrInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.NR.CViComNrInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that receive notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.ICViComNrInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.NR.CViComNrInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available.
@note
It is important to Unregister the listener again once it is getting deleted, to avoid crashes.
@note
Both possibilities to retrieve results are to be used exclusively. When using ResultDataListener, it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComNrInterface::GetResult() and vice versa.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. An error will be indicated if the listener has already been registered to the interface.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.ICViComNrInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.Net.NR.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst,System.UInt32)">
            <summary>
Issue a request to the Layer 3 Decoder to decode the PDU contained by rSL3DecoderRequest. If the data has been decoded successfully within the time given by dwTimeOutInMs, the method creates the SL3DecoderResult and the buffer on the heap, fills in the Layer 3 Decoder result and returns a pointer to it.
</summary>
            <param name="rSL3DecoderRequest">
Contains the data that was the result of an IoT measurement and holds the PDU data that shall be decoded.
</param>
            <param name="dwTimeOutInMs">
The time in milliseconds that the function should wait before returning an error, if the result buffer is empty.
</param>
            <return>
One measurement result on the heap, if the function succeeded. Otherwise NULL. Attention: The returned pointer is only valid until this function is called again.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.ICViComNrInterface.GetSettings">
            <summary>
By means of this function you can retrieve the PN-Scanner settings which apply at the moment for measurements to be started or during running measurements.
@note
The result, like all other results too, is only for reading. See SetConfiguration interface function to make changes.
</summary>
            <return>
pointer to a structure holding the current device settings. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.ICViComNrInterface.IssueDemodRequests(RohdeSchwarz.ViCom.Net.NR.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary>
Use this function to issue commands (PDU requests, reset commands) for the BCH demodulator during measurement.
PDUs may be acquired for certain eNodeBs. PDU demodulation for eNodeBs or for channels may be reset.
</summary>
            <param name="rDemodRequests">
When the function is called, this pointer contains the request parameters. For details see SDemodRequests.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.ICViComNrInterface.GetChannelState(System.UInt32)">
            <summary>
GetChannelState returns the current status of the configurable settings from the channel.
</summary>
            <param name="dwChannelIndex">
Specifies the 0-based channel index to be queried.
</param>
            <return>
Returns a SChannelState object which contains the current state for the channel. The items in SChannelState can be modified during a running measurement using the ModifyChannel method.
SChannelState and ModifyChannel.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.ICViComNrInterface.ModifyChannel(RohdeSchwarz.ViCom.Net.NR.SChannelState!System.Runtime.CompilerServices.IsConst)">
            <summary>
ModifyChannel is used to modify configurable channel settings during a running measurement.
SChannelState for items that can be modified.
</summary>
            <param name="sChannelState">
sChannelState contains the modified settings to be changed in the channel.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.ICViComNrInterface.AddChannel(System.Double,RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.FrameStructureType.Type,RohdeSchwarz.ViCom.Net.NR.SSBPattern.Type)">
            <summary>
AddChannel is used to create additional channels during a running measurement. The measurement settings from channel index 0, as configured by SetConfiguration(), are used for the new channel.
@note
This method cannot be called in the idle state (IsMeasurementStarted() must return TRUE)
@note
Each channel combination can only be added once. Attempting to add a channel combination multiple times will return the index that is already present.
</summary>
            <param name="dChannelFrequencyInHz">
Center frequency in Hertz for the channel.
</param>
            <param name="frameStructure">
Frame structure for the channel (TDD/FDD).
</param>
            <param name="pattern">
Synchronisation Signal (SS) / Primary Broadcast Channel (PBCH) pattern.
</param>
            <return>
If success, the 0-based channel index for new channel is returned. If failure, 0xFFFFFFFF is returned indicating an invalid channel.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.ICViComNrInterface.SetTgSpectrumConfiguration(RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.SpectrumSettings!System.Runtime.CompilerServices.IsConst)">
            <summary>
SetTgSpectrumConfiguration is used to update the time gated spectrum settings during an active measurement.
</summary>
            <param name="spectrumSettings">
Contains the definition which spectrum settings shall be applied. This is only allowed for measurements with active time gated spectrum. Not supported yet!
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.ICViComNrInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.NR.SChannelSettings!System.Runtime.CompilerServices.IsConst,RohdeSchwarz.ViCom.Net.NR.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary>
SetConfiguration is used to set internal settings of the PN-Scanner. The functions SelectReceiver() of CViComBasicInterface change basic settings. Except for frequency settings all other settings have default values.
</summary>
            <param name="rChannelSettings">
Contains the definition which frequencies shall be measured. Refer to SChannelSettings for a more detailed description on those settings.
</param>
            <param name="rDemodulationSettings">
Contains the definition which PDUs of BCH shall be measured. Refer to SDemodulationSettings for a more detailed description on those settings.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.ICViComNrInterface.GetMeasRateLimits">
            <summary>
Limits for Parameter SFrequencySettings::dwMeasRatePer1000sec.
@note
The resulting meas rate limits are specified for the MeasurementMode::HIGH_SPEED setting. The maximum rating for MeasurementMode::HIGH_SENSITIVITY is equal to the returned default value of the SRange container object.
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.ICViComNrInterface.GetDemodThresholdLimits">
            <summary>
Limits for Parameter SDemodulationSettings::sSINRThresholdDB100
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.ICViComNrInterface.GetChannelCountLimits">
            <summary>
Limits for Parameter SChannelSettings::dwCount
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.ICViComNrInterface.GetBasicInterface">
            <summary>
The basic interface is a part of any application specific ViCom interface. It is used for different TSME applications. The purpose is to control basic TSME functions, which are not specific for a certain measurement. See CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.ICViComNrInterface">
            <summary>
NR measurement module for ViCom. Offers the configuration and result receiving methods for all NR related measurement tasks.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.CViComNrInterfaceDataProcessor.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.CViComNrInterfaceDataProcessor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SL3DecoderResult.pcPduText">
            <summary>
Pointer to a buffer containing the decoded PDU text, as zero terminated ASCII string.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SL3DecoderResult.dwStringLength">
            <summary>
Number of decoding result text bytes in the buffer (incl. terminating '\0').
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SL3DecoderResult.ePDU">
            <summary>
PDU contained.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SL3DecoderResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SL3DecoderResult">
            <summary>
Result from the Layer 3 Decoder.
The string returned via this structure is formatted using the ASN.1 notation of the standard (3GPP TS 36.331). It contains one completely decoded PDU terminated by CR+LF. Data subsets (i.e. Information Elements) within the string are headed by "CR+LF+{", indented via spaces and terminated by "}+CR+LF".
In addition to the standard, some Information Elements are added twice (see example cellIdentity below):
-Formatted exactly according to the standard.
-Formatted with unit or format description between square brackets ("[" "]") and representing a reasonable value.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SL3DecoderRequest.pbBitStream">
            <summary>
Pointer to a buffer containing the PDU bits. The first bit is stored in bit 7 of pbBitStream[0]. If dwBitCount is not a multiple of 8, there are remaining bits, which shall be ignored.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SL3DecoderRequest.dwBitCount">
            <summary>
Number of bits for this PDU.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SL3DecoderRequest.ePDU">
            <summary>
PDU contained.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SL3DecoderRequest.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SL3DecoderRequest">
            <summary>
Request data container for the Layer 3 Decoder. Is used to decode a demodulation result into a human-readable structure.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.pDemodResult">
            <summary>
Pointer to demodulation result. If nullptr, no demodulation result is present.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.ListMeasurementRates">
            <summary>
List of measurement rates rates and other values in relation to the measurement rate for one or more time intervals of measurement rate calculation. The measurement rate is the ratio of all measurements of the same type of measurement at the time the measurement signals have been picked from the air. So the time of arrival at the host application is not used. And equal measurements at different RF channels are put together.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.pTimeGatedSpectrum">
            <summary>
Time gated spectrum result if not nullptr.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.ListOfSignals">
            <summary>
The actual set of signals associated with the current channel specified by the dwChannelIndex member.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.pfAvgInbandPowerInDBm">
            <summary>
The total average received power on this channel if not nullptr.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.dwPcTimeStampInMs">
            <summary>
PC local time when the signal was measured (or was started to being measured) on the device.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.dwChannelIndex">
            <summary>
The channel to which all the data relates is specified using this index. The index refers to the position in the SChannelSettings::pTableOfFrequencySetting array.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.SDemodResult.enOperationMode">
            <summary>
Determines if SSB is standalone or non-standalone mode. Only valid for PDU::MIB or PDU::SIB1.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.SDemodResult.pbKSsb">
            <summary>
Frequency domain offset between SSB and the overall resource block grid in number of subcarriers if pbKSsb is not nullptr. For L_max=64 the value range is {0,1,..,15}, otherwise the value range is {0,1,..,31} (see TS 38.211, V15.4.0, Section 7.4.3.1).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.SDemodResult.bSsbIndex">
            <summary>
SSB index of the beam the SS/PBCH block belongs to.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.SDemodResult.wPhysicalCellId">
            <summary>
The physical Cell ID, which can take one from the values defined by [0;1007].
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.SDemodResult.pbBitStream">
            <summary>
Pointer to (dwBitCount + 7) / 8 bytes which contain the PDU bits. The first bit is stored in the bit 7 of pbBitStream[0]. If dwBitCount is not a multiple of 8, the trailing bits in the last byte pbBitStream[(dwBitCount + 7) / 8 - 1] shall be ignored.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.SDemodResult.dwBitCount">
            <summary>
Number of bits the PDU consists of.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.SDemodResult.ePDU">
            <summary>
PDU that has been demodulated
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.SDemodResult.dwStopTimeInMs">
            <summary>
This is the last time in ms of signals used for this message. All IQ signals used to produce this demodulation result are in between dwStartTimeInMs and dwStopTimeInMs.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.SDemodResult.dwStartTimeInMs">
            <summary>
This is the first time in ms of signals used for this message.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.SDemodResult.dwFirstBtsId">
            <summary>
The demodulator fills this parameter with the BTS ID the scanner assigned to this BTS first. If later on, the scanner uses a different BTS ID, but after demodulation it is detected that it is the same eNodeB, the demodulator fills this value with the first BTS ID the scanner used. Example: The scanner has measured a eNodeB with ID = 10 and the demodulator has demodulated it successfully. 20 minutes later the scanner found signals of a eNodeB with ID = 55. After demodulating, the demodulator finds out (by comparing unique BTS information from decoding), that it is the same gNodeB as the one with ID = 10. In this case, dwFirstBtsId will be set to 10.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.SDemodResult.dwBtsId">
            <summary>
Unique BTS ID provided by the scanner as SSignals::Beam::dwScannerBtsIdent. Each time the scanner is not sure whether the signal it could demodulate belongs to an already known gNodeB, it sets a new identifier here. I.e. the same eNodeB could have multiple dwBtsIds, but each dwBtsId relates always to a single cell.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.SDemodResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.SDemodResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.SDemodResult.OperationMode.UNDEFINED">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.SDemodResult.OperationMode.STANDALONE">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.SDemodResult.OperationMode.NONSTANDALONE">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.SDemodResult.OperationMode">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.SDemodResult">
            <summary>
BCH demodulator results
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.STimeGatedSpectrumResult.ListOfSpectrumBins">
            <summary>
Measured time gated spectrum consisting of a list of sepctrum bins.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.STimeGatedSpectrumResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.STimeGatedSpectrumResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.STimeGatedSpectrumResult.SSpectrumBin.fPowerInDBm">
            <summary>
Power level in dBm. If not valid set to FLT_MAX.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.STimeGatedSpectrumResult.SSpectrumBin.dFrequencyInHz">
            <summary>
Frequency in Hz.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.STimeGatedSpectrumResult.SSpectrumBin.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.STimeGatedSpectrumResult.SSpectrumBin.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.STimeGatedSpectrumResult.SSpectrumBin">
            <summary>
Container for spectrum bins.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.STimeGatedSpectrumResult">
            <summary>
Container for a time gated spectrum measurement result.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.ListOfBeams">
            <summary>
The actual set of signals associated with the current channel and Physical Cell Id, specified by the dwChannelIndex member and wPhysicalCellId.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.enSSBPattern">
            <summary>
Detected subcarrier spacing used by the GNodeB
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.wPhysicalCellId">
            <summary>
Physical Cell ID 0 - 1007.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.pTae">
            <summary>
Time alingment error (TAE) information.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.pCir">
            <summary>
This is nullptr if no CIR information is available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.ListOfSsb">
            <summary>
Measurement results based on primary (PSS) and secondary sync (SSS), PBCH and DM-RS signals.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.ListOfSssPbch">
            <summary>
Measurement results based on secondary sync (SSS) and PBCH signals.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.ListOfDmRs">
            <summary>
Measurement results based on demodulation reference signals (DM-RS).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.ListOfPbch">
            <summary>
Measurement results based on PBCH signals if pPbch.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.ListOfSSync">
            <summary>
Measurement results based on secondary synchronization signals (SSS).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.ListOfPSync">
            <summary>
Measurement results based on primary synchronization signals (PSS).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.fSsbRssiInDBm">
            <summary>
Average power of all resource elements carrying OFDM signals, interference and noise within all SSBlocks used for carrying out the measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.wSsbIndexMod8">
            <summary>
SSB index Modulo 8 (3 LSBs) of the beam the SS/PBCH belongs to. Is not necessarily available and may be set to SDefs::INVALID_WORD_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.wSsbIndex">
            <summary>
SSB index (6 bit) of the beam the SS/PBCH block belongs to. According to 3GPP only up to 8 beams are specified for FR1, in this case wSsbIndex and wSsbIndexMod8 are the same. Is not necessarily available and may be set to SDefs::INVALID_WORD_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.dwScannerBtsIdent">
            <summary>
Internal ID assigned from the scanner to the SS/PBCH block of a specific gNodeB. Different SS/PBCH blocks will become different IDs assigned to them, but if the scanner cannot identify a block, it also might assign different IDs to the block. So two dwScannerBtsIdent values belong tho the same gNodeB in the case that only the 6 LSBs are different. For separating different SS/PBCH blocks the lower 6 bits are used.
@note
This is unique only within one measurement. Do not use it when combining the results of different measurements
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.ListOfResults">
            <summary>
The actual set of time alingment error (TAE) measurements associated with the current beam.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.bArePreconditionsOk">
            <summary>
Indicates whether all necessary pre-conditions for TAE measurements are fullfilled.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.dwPreconditionStatusMask">
            <summary>
Indicates the status for the different pre-conditions for TAE measurements.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result.fAvgRelativeFreqErrorInPpm">
            <summary>
Frequency error in ppm between configured and measured SSB frequency. If not valid set to FLT_MAX.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result.fAvgRelativeTimeDriftInPpm">
            <summary>
Time drift of the measured BTS in ppm. Requires dwCountOfUsedSSB &gt; 100. If not valid set to FLT_MAX.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result.fSigmaSsbFrequencyInHz">
            <summary>
Standard deviation of the measured center frequency, e.g. SS/PBCH block frequency position of RE=#0 (subcarrier #0) of RB#10 in Hz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result.dAvgSsbFrequencyInHz">
            <summary>
Measured center frequency, e.g. SS/PBCH block frequency position of RE=#0 (subcarrier #0) of RB#10 in Hz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result.fSigmaUtcTimeOffsetInNs">
            <summary>
Standard deviation of the averaged offset to the UTC transmit time in ns.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result.dAvgUtcTimeOffsetInNs">
            <summary>
Time offset to UTC transmit time, averaged over dwCountOfUsedSSB and dwCountOfUsedFrames.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result.fUtcTimeOffsetInS">
            <summary>
Frame transmit time offset to last UTC full second.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result.fUtcFrameTimeInS">
            <summary>
The UTC transmit time, full second, of the most recent SSB.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result.fRefTimeErrorInNs">
            <summary>
Estimated reference time error delivered from internal or external GNSS receiver. This is an average value during the reception period.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result.dwSfn">
            <summary>
System frame number of the most recent used SSB.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result.dwCountOfUsedFrames">
            <summary>
Number of radio frames transmitted from the first used SSB to the most recent used SSB.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result.dwCountOfUsedSSB">
            <summary>
Number of used SSB for TAE statistics.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result.eMode">
            <summary>
Used TAE measurement mode.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result.Mode.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result.Mode.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result.Mode.Type.ALL">
            <summary>
TAE measurement statistics from the first to last measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result.Mode.Type.LAST_MINUTE">
            <summary>
TAE measurement statistics for the last minute.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result.Mode.Type.RECENT">
            <summary>
Most recent available TAE measurement statistics.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result.Mode.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result.Mode">
            <summary>
Definition of TAE measurement modes.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.Result">
            <summary>
Container for TAE results.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.PreCondition.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.PreCondition.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.PreCondition.Type.DELAY_SPREAD">
            <summary>
Delay spread within acceptable levels.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.PreCondition.Type.CINR">
            <summary>
CINR requirement met.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.PreCondition.Type.NOT_MOVING">
            <summary>
Receiver is not moving.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.PreCondition.Type.UTC_SYNC">
            <summary>
UTC time synchronisation stable.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.PreCondition.Type.PPS_ACCURACY">
            <summary>
Required PPS signal accuracy reached.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.PreCondition.Type.PPS_AVAILABLE">
            <summary>
PPS signal is available.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.PreCondition.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae.PreCondition">
            <summary>
Definition of TAE pre-conditions.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Tae">
            <summary>
Container for time alingment error (TAE) information.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.dFrameArrivalOffsetToBlockInS">
            <summary>
Time difference between Radio Frame Time of Arrival (TOA) and u64DeviceTimeInNs. The time, when the maximum CIR peak has been received, is used as Radio Frame Time of Arrival. This feature does not require a GPS antenna to be connected to the receiver. If not valid set to DBL_MAX.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.dFrameToaOffsetToPpsInSec">
            <summary>
Time difference between Radio Frame Time of Arrival (TOA) and the latest PPS pulse received. The time, when the maximum CIR peak has been received, is used as Radio Frame Time of Arrival. This feature requires a GPS antenna to be connected to the receiver. If not valid set to DBL_MAX.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.ListOfPeaks">
            <summary>
List of CIR peaks found in the signal.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.pPowerDelayProfile">
            <summary>
Optional power profile measurement further detailing the CIR measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.u64DeviceTimeInNs">
            <summary>
Time when the first CIR sample has been measured, related to the device internal clock.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.dwPcTimeStampInMs">
            <summary>
Calculated time of the first CIR sample based on start of the operating system (GetTickCount()).
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.SPeak.fDelayInSec">
            <summary>
Delay in seconds related to the first sample. This normally provides a higher resolution than the sampling time from the power delay measurement results (see above).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.SPeak.fPeakPowerInDBm">
            <summary>
The actual power of the impulse peak.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.SPeak.fInbandPowerInDBm">
            <summary>
Inband power of the signal from which the CIR was extracted.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.SPeak.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.SPeak.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.SPeak">
            <summary>
Contains information about the single peaks in the Channel Impulse Response.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.SPowerDelayProfile.PowerDelayProfileValues">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.SPowerDelayProfile.fSamplingTimeInSec">
            <summary>
Sampling time for a CIR measurement. This is also the time between two CIR measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.SPowerDelayProfile.fNoiseFloorInDBm">
            <summary>
Estimated noise level. Power values which are in the vicinity of this value can be considered to be caused or influenced by noise.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.SPowerDelayProfile.fAggregatePowerInDBm">
            <summary>
Total received power over the complete signal.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.SPowerDelayProfile.fInbandPowerInDBm">
            <summary>
Inband power measured during the CIR measurement (which is a subset of the overall signal)
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.SPowerDelayProfile.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.SPowerDelayProfile.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.SPowerDelayProfile.SPowerDelayProfileValues.psValuesInDBm100">
            <summary>
array that holds dwCountOfValues elements, each specifying a power delay value in 100th dBm (e.g. a value of -6719 is to be read as -67.19 dBm). Can be SDefs::INVALID_SHORT_VALUE when a value could not be measured
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.SPowerDelayProfile.SPowerDelayProfileValues.dwCountOfValues">
            <summary>
number of elements available in the psValuesInDBm100 array
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.SPowerDelayProfile.SPowerDelayProfileValues.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.SPowerDelayProfile.SPowerDelayProfileValues.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.SPowerDelayProfile.SPowerDelayProfileValues">
            <summary>
A (possibly empty) set of power delay values. This list contains the CIR power values, where each power value has been measured fSamplingTimeInSec seconds after the previous one. The first sample in here has been measured at u64DeviceTimeInNs resp. dwPcTimeStampInMs.
The list may contain invalid values, which denote that at that specific time there was no CIR measurement possible.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir.SPowerDelayProfile">
            <summary>
Structure containing the actual CIR measurement results combined with delay information.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SCir">
            <summary>
Data container that holds information about the channel impulse responses measured in this cycle. The CIR consists of an optional power delay profile, and a list of peaks.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Ssb.fSsbSinrInDB">
            <summary>
Primary and secondary synchronization signal, PBCH and DM-RS reference signal received power (xSS-PBCH-RSRP), is defined as the linear average over the power contributions (in [W]) of the resource elements that primary, secondary sync signals, PBCH and demodulation reference signals configured for RSRP measurements within the considered PBCH bandwidth (max. 20 MHz).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Ssb.fSsbRsrqInDB">
            <summary>
Primary and secondary synchronization signal, PBCH and DM-RS reference signal received quality (xSS-PBCH-RSRP) is defined as the ratio of NPBCH-RSRP / NR carrier RSSI, where N is the number of resource blocks in the NR carrier RSSI measurement bandwidth. The measurements in the numerator and denominator shall be made over the same set of resource blocks. If not valid set to FLT_MAX.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Ssb.fSsbRsrpInDBm">
            <summary>
Primary and secondary synchronization signal, PBCH and DM-RS reference signal received power (xSS-PBCH-RSRP), is defined as the linear average over the power contributions (in [W]) of the resource elements that primary, secondary sync signals, PBCH and demodulation reference signals configured for RSRP measurements within the considered PBCH bandwidth (max. 20 MHz).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Ssb.dDeviceTimeInS">
            <summary>
Timestamp of the SS/PBCH block used for Primary and secondary synchronization signal, PBCH and DM-RS reference signal (xSS-PBCH-RSRP) measurements.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Ssb.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Ssb.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Ssb">
            <summary>
Container for measurements based on the complete SSB consisting of primary (PSS) and secondary sync (SSS), PBCH and DM-RS signals.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SssPbch.fSssPbchSinrInDB">
            <summary>
Secondary synchronization signal and PBCH signal-to-noise and interference ratio (SSS-PBCH SINR), is defined as the linear average over the power contribution (in [W]) of the resource elements carrying secondary synchronization signals, PBCH and demodulation reference signals (configured for RSRP measurements within the considered PBCH bandwidth, max. 20 MHz) divided by the linear average of the noise and interference power contribution (in [W]) over the resource elements carryingsecondary synchronization, PBCH and demodulation reference signals. Primary synchronization signals are excluded.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SssPbch.fSssPbchRsrqInDB">
            <summary>
Secondary synchronization signal and PBCH reference signal received quality (SSS-PBCH-RSRQ) is defined as the ratio of NPBCH-RSRP / NR carrier RSSI, where N is the number of resource blocks in the NR carrier RSSI measurement bandwidth. The measurements in the numerator and denominator shall be made over the same set of resource blocks. If not valid set to FLT_MAX.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SssPbch.fSssPbchRsrpInDBm">
            <summary>
Secondary synchronization signal and PBCH reference signal received power (SSS-PBCH-RSRP), is defined as the linear average over the power contributions (in [W]) of the resource elements that secondary sync signals, PBCH and demodulation reference signals configured for RSRP measurements within the considered PBCH bandwidth (max. 20 MHz). Primary sync signals are excluded.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SssPbch.dDeviceTimeInS">
            <summary>
Timestamp of the SS/PBCH block used for the secondary synchronization signal and PBCH reference signal (SSS-PBCH) measurements.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SssPbch.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SssPbch.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SssPbch">
            <summary>
Container for measurements based on secondary sync (SSS) and PBCH signals.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.DmRs.fDmRsSinrInDB">
            <summary>
Demodulation reference signal-to-noise and interference ratio, is defined as the linear average over the power contribution (in [W]) of the resource elements carryingdemodulation reference signals (configured for RSRP measurements within the considered PBCH bandwidth, max. 20 MHz) divided by the linear average of the noise and interference power contribution (in [W]) over the resource elements carrying demodulation reference signals.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.DmRs.fDmRsRsrqInDB">
            <summary>
Demodulation reference signal received quality (PBCH-DMRS-RSRQ) is defined as the ratio of NPBCH-RSRP / NR carrier RSSI, where N is the number of resource blocks in the NR carrier RSSI measurement bandwidth. The measurements in the numerator and denominator shall be made over the same set of resource blocks. If not valid set to FLT_MAX.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.DmRs.fDmRsRsrpInDBm">
            <summary>
Demodulation reference signal received power (PBCH-DMRS-RSRP), is defined as the linear average over the power contributions (in [W]) of the resource elements that carry demodulation reference signals within the PBCH configured for RSRP measurements within the considered PBCH bandwidth (max. 20 MHz).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.DmRs.dDeviceTimeInS">
            <summary>
Timestamp of the SS/PBCH block used for demodulation reference signal (DM-RS) measurements.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.DmRs.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.DmRs.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.DmRs">
            <summary>
Container for measurements based on demodulation reference signals (DM-RS).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Pbch.pMib">
            <summary>
Measurement results for MIB based on PBCH signals if pMib is not nullptr.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Pbch.fPbchSinrInDB">
            <summary>
PBCH SINR signal-to-noise and interference ratio, is defined as the linear average over the power contribution (in [W]) of the resource elements carryingPBCH signals (configured for RSRP measurements within the considered PBCH bandwidth) divided by the linear average of the noise and interference power contribution (in [W]) over the resource elements carryingPBCH reference signals. DM-RS excluded.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Pbch.fPbchRsrqInDB">
            <summary>
PBCH reference signal received quality (PBCH-RSRQ) is defined as the ratio of NPBCH-RSRP / NR carrier RSSI, where N is the number of resource blocks in the NR carrier RSSI measurement bandwidth. The measurements in the numerator and denominator shall be made over the same set of resource blocks. If not valid set to FLT_MAX.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Pbch.fPbchRsrpInDBm">
            <summary>
PBCH reference signal received power (PBCH-RSRP), is defined as the linear average over the power contributions (in [W]) of the resource elements that carry PBCH signals configured for RSRP measurements within the considered PBCH bandwidth (max. 20 MHz). DM-RS excluded.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Pbch.dDeviceTimeInS">
            <summary>
Timestamp of the SS/PBCH block used for PBCH measurements.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Pbch.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Pbch.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Pbch.Mib.bIntraFreqReselection">
            <summary>
ENUMERATED{allowed, notAllowed}.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Pbch.Mib.bCellBarred">
            <summary>
ENUMERATED{bared, notBarred}.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Pbch.Mib.bPdcchConfigSib1">
            <summary>
INTEGER(0...255)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Pbch.Mib.bDmrsTypeAPosition">
            <summary>
ENUMERATED{pos2, pos3}.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Pbch.Mib.bSsbSubcarrierOffset">
            <summary>
INTEGER(0...15)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Pbch.Mib.bSubCarrierSpacingCommon">
            <summary>
ENUMERATED{scs15or60, scs30or120}.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Pbch.Mib.bSystemFrameNumber">
            <summary>
BIT STRING( SIZE(6) )
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Pbch.Mib.dwRawPbchBits">
            <summary>
32 bits of PBCH payload. MSB (0x8000000) is Bit 0 of PBCH payload, LSB (0x00000001) is bit 31 of PBCH payload. In case Bit 0 (choice bit) is not set, Bit 1 to 23 contain the MIB.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Pbch.Mib.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Pbch.Mib.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Pbch.Mib">
            <summary>
Container for MIB measurements based on PBCH signals, see 3GPP TS 38.331. The raw PBCH bits are only measured once per SS/PBCH block.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.Pbch">
            <summary>
Container for measurements based on PBCH signals.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SSync.fSssEvmInDB">
            <summary>
Secondary synchronization signal error vector magnitude (SSS-EVM) in [dB]. If not valid set to FLT_MAX.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SSync.fSssSinrInDB">
            <summary>
Secondary synchronization signal-to-noise and interference ratio (SSS-SINR), is defined as the linear average over the power contribution (in [W]) of the resource elements carrying secondary synchronization signals divided by the linear average of the noise and interference power contribution (in [W]) over the resource elements carrying secondary synchronization signals within the same frequency bandwidth.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SSync.fSssRsrqInDB">
            <summary>
Secondary synchronization signal reference signal received quality (SSS-RSRQ) is defined as the ratio of NSS-RSRP / NR carrier RSSI, where N is the number of resource blocks in the NR carrier RSSI measurement bandwidth. The measurements in the numerator and denominator shall be made over the same set of resource blocks. If not valid set to FLT_MAX.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SSync.fSssRsrpInDBm">
            <summary>
Secondary synchronization signal reference signal received power (SSS-RSRP) is defined as the linear average over the power contributions (in [W]) of the resource elements that carry secondary synchronization signals (SSS).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SSync.dDeviceTimeInS">
            <summary>
Timestamp of the SS/PBCH block used for the secondary synchronization signal (SSS) measurements.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SSync.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SSync.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.SSync">
            <summary>
Container for measurements based on secondary synchronization signals (SSS).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.PSync.fPssSinrInDB">
            <summary>
Primary synchronization Signal-to-noise and interference ratio (PSS-SINR), is defined as the linear average over the power contribution (in [W]) of the resource elements carrying primary synchronization signals divided by the linear average of the noise and interference power contribution (in [W]) over the resource elements carrying primary synchronization signals within the same frequency bandwidth.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.PSync.fPssRsrqInDB">
            <summary>
Primary synchronization signal reference signal received quality (PSS-RSRQ) is defined as the ratio of NSS-RSRP / NR carrier RSSI, where N is the number of resource blocks in the NR carrier RSSI measurement bandwidth. The measurements in the numerator and denominator shall be made over the same set of resource blocks. If not valid set to FLT_MAX.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.PSync.fPssRsrpInDBm">
            <summary>
Primary synchronization signal reference signal received power (PSS-RSRP) is defined as the linear average over the power contributions (in [W]) of the resource elements that carry primary synchronization signals (PSS).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.PSync.dDeviceTimeInS">
            <summary>
Timestamp of the SS/PBCH block used for the primary synchronization signal (PSS) measurements.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.PSync.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.PSync.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam.PSync">
            <summary>
Container for measurements based on primary synchronization signals (PSS).
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals.Beam">
            <summary>
Actual measurements per beam.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult.Signals">
            <summary>
Actual measurement values for a single server.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SMeasResult">
            <summary>
The NR measurement result for a single channel returned by CViComNrInterface::GetResult().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SSettings.DemodulationSettings">
            <summary>
Configuration of the BCH demodulation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SSettings.ChannelSettings">
            <summary>
The set of frequencies that shall be measured.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SSettings.dwReceiverIndex">
            <summary>
Index to SConnectedReceiverTable::Receiver of the currently selected receiver.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SSettings">
            <summary>
This structure holds all the measurement setup that is configured in the ViCom Nr scanner module. It is a result of the CViComNrInterface::GetSettings() method.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SDemodulationSettings.sStartMeasurementRequests">
            <summary>
The requests for the general start measurement command.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SDemodulationSettings.dwFrontEndSelectionMask">
            <summary>
Receiver front end to be used by the demodulator for this channel. If no demodulation shall be provided, this shall be set to 0.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SDemodulationSettings.sSINRThresholdDB100">
            <summary>
SINR threshold for demodulation, given in 1/100 dB. For SINR All resource elements of the SS/PBCH block excluding the PSS symbol, so SSS, DM-RS and PBCH RE's in the measured bandwidth are included. For default value and range see GetDemodThresholdLimits().
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SDemodulationSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SDemodulationSettings">
            <summary>
This structure is used to configure the BCH demodulation process.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SDemodRequests.pDemodRequests">
            <summary>
Pointer to an array of demodulation requests. Must be nullptr, if no demodulation shall be done.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SDemodRequests.dwCountOfRequests">
            <summary>
Number of demodulation requests. Must be 0, if no demodulation shall be done.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SDemodRequests.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SDemodRequests.SDemodRequest.dwBtsId">
            <summary>
Unique BTS ID provided by the scanner as SSignals::dwScannerBtsIdent. This ID is used by the BCHDemodulator to demodulate a specific BTS, when the bDemodulationMode is set to ON_CMD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SDemodRequests.SDemodRequest.wRepetitionTimeOutInMs">
            <summary>
Repetition time out in ms (only used if bDemodulationMode == REPETITION).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SDemodRequests.SDemodRequest.eDemodulationMode">
            <summary>
The mode used for BCH demodulation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SDemodRequests.SDemodRequest.ePDU">
            <summary>
The PDU to be demodulated.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SDemodRequests.SDemodRequest.dwChannelIndex">
            <summary>
Index of the frequency in SChannelSettings::pTableOfFrequencySetting.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SDemodRequests.SDemodRequest.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SDemodRequests.SDemodRequest">
            <summary>
There must be one instance of this structure for each BCH demodulation request, therefore different PDUs can be measured on different channels.
Example for start measurement: On the first channel SIBs 3 and 4 shall be decoded, on the the second channel SIBs 3, 5 and 7 shall be decoded. SIB 5 shall be decoded repeatedly every 10 seconds (10000 ms) and SIB 7 shall be decoded on demand. This requires five structures containing the following parameter sets: (0,&lt;sp&gt;&lt;/sp&gt;SIB3,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(0,&lt;sp&gt;&lt;/sp&gt;SIB4,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(1,&lt;sp&gt;&lt;/sp&gt;SIB3,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(1,&lt;sp&gt;&lt;/sp&gt;SIB5,&lt;sp&gt;&lt;/sp&gt;REPETITION,&lt;sp&gt;&lt;/sp&gt;10000,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(1,&lt;sp&gt;&lt;/sp&gt;SIB7,&lt;sp&gt;&lt;/sp&gt;ON_CMD,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0) Example during measurement: On channel 0 PDU demodulation shall be completely reset for the BTS identified by ID 3 and on the the second channel SIB 7 shall be decoded for the BTS identified by ID 4 SC 5 with a timeout for the request of 1 sec (1000ms): (0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;CHANNEL_RESET,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;3,&lt;sp&gt;&lt;/sp&gt;5)(1,&lt;sp&gt;&lt;/sp&gt;PDU_FOR_SIB7,&lt;sp&gt;&lt;/sp&gt;ON_CMD,&lt;sp&gt;&lt;/sp&gt;1000,&lt;sp&gt;&lt;/sp&gt;4,&lt;sp&gt;&lt;/sp&gt;5)@note
You are responsible to manage memory, when you use SetDemodulationSettings(). All parameters which are not necessary for a certain request shall be set to 0.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SDemodRequests">
            <summary>
This structure is used to configure PDU requests. It is used in start measurement requests and it is used to issue BCH demodulation requests during measurement, e.g. SIB requests on demand or to reset SIB demodulation.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.DemodMode.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.DemodMode.Type.CHANNEL_RESET">
            <summary>
Delete all demodulation results for all BTS at the specified channel. Restart demodulation for this channel as specified in the command. This can be requested only during a running measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.DemodMode.Type.REPETITION_PER_BEAM">
            <summary>
After each successful demodulation a new one will be started automatically after the repetition time specified in wRepetitionTimeOutInMs. Results are provided for each SSB index / beam. Only to be used in start measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.DemodMode.Type.ONCE_PER_BEAM">
            <summary>
Demodulate the PDU for each BTS at the specified channel once for each SSB index / beam. Only to be used in start measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.DemodMode.Type.BTS">
            <summary>
The demodulation is only for a special BTS. This can be requested only during a running measurement and when the PDU was also requested in the start measurement frame. If wRepetitionTimeOutInMs is different from 0 then the demodulation is only tried during the given time.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.DemodMode.Type.REPETITION">
            <summary>
After each successful demodulation a new one will be started automatically after the repetition time specified in wRepetitionTimeOutInMs. Results are provided for the strongest SS/PBCH block only. Only to be used in start measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.DemodMode.Type.ON_CMD">
            <summary>
The PDU is only demodulated if an extra command for demodulation requests the demodulation.
If this is used, then no PDU is decoded until it is explicitly requested. The method IssueDemodRequests can be used for that purpose.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.DemodMode.Type.ONCE">
            <summary>
Demodulate the PDU for each BTS at the specified channel only once. Results are provided for the strongest SS/PBCH block only. Only to be used in start measurement.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.DemodMode.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.DemodMode">
            <summary>
This enumeration defines modes for the BCH demodulation. Use this in the SDemodRequests structure to specify when the demodulation of this PDU shall be done.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.Pdu.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.UNKNOWN">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SI">
            <summary>
SI is PDU 51. Do not request, SIBPOS requests will be reported as SI-messages.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SIBPOS">
            <summary>
SIBPOS is PDU 39.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SIB21">
            <summary>
SIB 21 is PDU 41.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SIB20">
            <summary>
SIB 20 is PDU 40.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SIB19">
            <summary>
SIB 19 is PDU 69.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SIB18">
            <summary>
SIB 18 is PDU 38.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SIB17">
            <summary>
SIB 17 is PDU 37.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SIB16">
            <summary>
SIB 16 is PDU 36.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SIB15">
            <summary>
SIB 15 is PDU 35.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SIB14">
            <summary>
SIB 14 is PDU 34.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SIB13">
            <summary>
SIB 13 is PDU 33.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SIB12">
            <summary>
SIB 12 is PDU 32.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SIB11">
            <summary>
SIB 11 is PDU 31.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SIB10">
            <summary>
SIB 10 is PDU 30.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SIB9">
            <summary>
SIB 9 is PDU 29.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SIB8">
            <summary>
SIB 8 is PDU 28.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SIB7">
            <summary>
SIB 7 is PDU 27.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SIB6">
            <summary>
SIB 6 is PDU 26.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SIB5">
            <summary>
SIB 5 is PDU 25.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SIB4">
            <summary>
SIB 4 is PDU 24.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SIB3">
            <summary>
SIB 3 is PDU 23.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SIB2">
            <summary>
SIB 2 is PDU 22.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.SIB1">
            <summary>
SIB 1 is PDU 21.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.MIB">
            <summary>
MIB is PDU 20.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.Pdu.Type.UNDEFINED">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.Pdu.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.Pdu">
            <summary>
This enumeration defines IDs for the NR Layer 3 PDUs. Use this in the SDemodRequest structure to specify which PDUs shall be decoded.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.TgSettings">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.TaeSettings">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.RsCinrChannelModel">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.pTableOfFrequencySetting">
            <summary>
This array of structures can be filled with single frequency configurations. Only dwCount entries from this table will be used.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.dwCount">
            <summary>
Number of frequency configurations that shall be used from the pTableOfFrequencySetting to perform the measurement tasks. For value range see GetChannelCountLimits().
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.spectrumSettings">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUlDlPattern2">
            <summary>
Up- and Downlink configuration for pattern 2. Ignored when bUseConfigFromSib1 is set to true.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUlDlPattern1">
            <summary>
Up- and Downlink configuration for pattern 1. Ignored when bUseConfigFromSib1 is set to true.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.dwThresholdInPct">
            <summary>
Level threshold in percent.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.dwTimingAdvanceInTc">
            <summary>
Timing advance in Tc for shifting the uplink section, with Tc = 1/(4096  480kHz) ~ 509ns, see 3GPP TS 38.211.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.dwGuardTimeInUs">
            <summary>
Guard time in micro seconds.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.fRateInHz">
            <summary>
Rate of time gated spectrum measurement updates in Hertz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.bUseConfigFromSib1">
            <summary>
If set to true, any configuration provided in the Pattern1Config and Pattern2Config parameters are ignored. Up- and downlink configuration options are taken from SIB1. TG measurements can not start before SIB1 has been decoded. Not supported yet!
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.bIsEnabled">
            <summary>
If set to true time gated spectrum measurements are performed on the first and only channel configured in pTableOfFrequencySetting.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.SpectrumSettings.eResolutionBandwidthInKHz">
            <summary>
The resolution bandwith used for the spectrum measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.SpectrumSettings.dwSpanInKHz">
            <summary>
Span of the spectrum measurement in Hertz, e.g. the spectral width of the measurement centered around the center frequency.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.SpectrumSettings.dCenterFrequencyInHz">
            <summary>
Center frequency of the spectrum measurement in Hertz.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.SpectrumSettings.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.SpectrumSettings.ResolutionBandwidth.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.SpectrumSettings.ResolutionBandwidth.Type.KHZ_1">
            <summary>
FFT with 8192 bins leads to 1.428 kHz resolution.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.SpectrumSettings.ResolutionBandwidth.Type.KHZ_3">
            <summary>
FFT with 4096 bins leads to 2.856 kHz resolution.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.SpectrumSettings.ResolutionBandwidth.Type.KHZ_6">
            <summary>
FFT with 2048 bins leads to 5.713 kHz resolution.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.SpectrumSettings.ResolutionBandwidth.Type.KHZ_11">
            <summary>
FFT with 1024 bins leads to 11.426 kHz resolution.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.SpectrumSettings.ResolutionBandwidth.Type.KHZ_23">
            <summary>
FFT with 512 bins leads to 22.852 kHz resolution.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.SpectrumSettings.ResolutionBandwidth.Type.KHZ_46">
            <summary>
FFT with 256 bins leads to 45.703 kHz resolution.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.SpectrumSettings.ResolutionBandwidth.Type.KHZ_91">
            <summary>
FFT with 128 bins leads to 91.406 kHz resolution.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.SpectrumSettings.ResolutionBandwidth.Type.KHZ_183">
            <summary>
FFT with 64 bins leads to 182.813 kHz resolution.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.SpectrumSettings.ResolutionBandwidth.Type.KHZ_357">
            <summary>
FFT with 32 bins leads to 365.625 kHz resolution.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.SpectrumSettings.ResolutionBandwidth.Type.KHZ_731">
            <summary>
FFT with 16 bins leads to 731.250 kHz resolution.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.SpectrumSettings.ResolutionBandwidth.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.SpectrumSettings.ResolutionBandwidth">
            <summary>
Definition of resolution bandwidths options for the spectrum measurement.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.SpectrumSettings">
            <summary>
Configuration options for sepctrum data provided by the time gated spectrum measurements (TG).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.dwNrOfUplinkSymbols">
            <summary>
Slot configuration, number of uplink symbols, see 3GPP TS 38.213 Â§11.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.dwNrOfUplinkSlots">
            <summary>
Slot configuration, number of uplink slots, see 3GPP TS 38.213 Â§11.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.dwNrOfDownlinkSymbols">
            <summary>
Slot configuration, number of downlink symbols, see 3GPP TS 38.213 Â§11.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.dwNrOfDownlinkSlots">
            <summary>
Slot configuration, number of downlink slots, see 3GPP TS 38.213 Â§11.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.eTransmissionPeriodicity">
            <summary>
Uplink downlink transmission periodicty, see 3GPP TS 38.213.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.isExtendedCyclicPrefix">
            <summary>
If set to true, all measurements are done for exteded cyclic prefix with a maximum of 12 symbols per slot instead of 14 without.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.isUplinkSection">
            <summary>
If set to true, it's a uplink section.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.isFlexibleSection">
            <summary>
If set to true, it's a flexible section.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.isDownlinkSection">
            <summary>
If set to true, it's a downlink section.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.isEnabled">
            <summary>
If set to true, this pattern configuration is used. Ignored when bUseConfigFromSib1 is set to true, e.g. active SIB1 configuration tracking.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.TransmissionPeriodicity.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.TransmissionPeriodicity.Type.MS_10">
            <summary>
10.0 ms DL-UL-transmission periodicity
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.TransmissionPeriodicity.Type.MS_5">
            <summary>
5.0 ms DL-UL-transmission periodicity
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.TransmissionPeriodicity.Type.MS_4">
            <summary>
4.0 ms DL-UL-transmission periodicity
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.TransmissionPeriodicity.Type.MS_3">
            <summary>
3.0 ms DL-UL-transmission periodicity
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.TransmissionPeriodicity.Type.MS_2P5">
            <summary>
2.5 ms DL-UL-transmission periodicity
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.TransmissionPeriodicity.Type.MS_2">
            <summary>
2.0 ms DL-UL-transmission periodicity
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.TransmissionPeriodicity.Type.MS_1P25">
            <summary>
1.25 ms DL-UL-transmission periodicity
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.TransmissionPeriodicity.Type.MS_1">
            <summary>
1.0 ms DL-UL-transmission periodicity
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.TransmissionPeriodicity.Type.MS_0P625">
            <summary>
0.625 ms DL-UL-transmission periodicity
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.TransmissionPeriodicity.Type.MS_0P5">
            <summary>
0.5 ms DL-UL-transmission periodicity
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.TransmissionPeriodicity.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.TransmissionPeriodicity">
            <summary>
Definition of uplink downlink transmission periodicty configurations, see 3GPP TS 38.213.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig">
            <summary>
Definition of the Up- and Downlink configuration options.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STgSettings">
            <summary>
Configuration options for time gated spectrum measurements (TG). For active TG measurements only one active channel is allowed in pTableOfFrequencySetting, its measurement rate has to be smaller or equal to 0.1 Hz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STaeSettings.wSsbIndex">
            <summary>
SSB index (6 bit) of the beam the SS/PBCH block belongs to. According to 3GPP only up to 8 beams are specified for FR1.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STaeSettings.wPhysicalCellId">
            <summary>
Physical Cell ID 0 - 1007.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STaeSettings.dwChannelIndex">
            <summary>
Index of the frequency in SChannelSettings::pTableOfFrequencySetting.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STaeSettings.dwAltitudeAboveSeaLevelInM">
            <summary>
Altitude of the receiver in meters above sea level (MSL) if not set to SDefs::INVALID_DWORD_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STaeSettings.fLosDistanceInM">
            <summary>
Line of sight distance to target BTS in meter.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STaeSettings.fRfCableLengthInM">
            <summary>
RF cable length in meter, velocity factor is assumed to be 0.66.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STaeSettings.fGpsCableLengthInM">
            <summary>
GPS cable length in meter, velocity factor is assumed to be 0.66.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STaeSettings.bIsEnabled">
            <summary>
If set to true time alignment error measurements are performed on the specified carrier.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STaeSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.STaeSettings">
            <summary>
Configuration for time alignment error measurements (TAE). These do require to have a GPS antenna connected to the receiver.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.SRsCinrChannelModel.dwSpeedInKmPerHour">
            <summary>
The maximum speed (velocity) of the measurement platform in km / h. The relative platform to base station velocity gives the rise to the maximum Doppler frequencies in Hz: (CenterFrequency in Hz)  dwSpeedInKmPerHour / ( 3.6  3e8 )
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.SRsCinrChannelModel.dwMaxSpeedInKmh">
            <summary>
Maximum speed, 250 km/h.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.SRsCinrChannelModel.dwMinSpeedInKmh">
            <summary>
Minimum speed, 5 km/h.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.SRsCinrChannelModel.dwIndoorMaxSpeedInKmh">
            <summary>
Typical 5 km/h for indoor environments.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.SRsCinrChannelModel.dwOutdoorMaxSpeedInKmh">
            <summary>
Typical 100 km/h for outdoor environments.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.SRsCinrChannelModel.dwDelaySpreadInNs">
            <summary>
The maximum expected delay spread (time difference of arrival) between the signal received from different RF paths.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.SRsCinrChannelModel.dwMaxDelaySpreadInNs">
            <summary>
Maximum delay spread, 16 s.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.SRsCinrChannelModel.dwMinDelaySpreadInNs">
            <summary>
Minimum delay spread, 0.5 s.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.SRsCinrChannelModel.dwIndoorDelaySpreadInNs">
            <summary>
Typical 0.5 s for indoor environments.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.SRsCinrChannelModel.dwOutdoorDelaySpreadInNs">
            <summary>
Typical 3 s for outdoor environments.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.SRsCinrChannelModel.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SChannelSettings.SRsCinrChannelModel">
            <summary>
In the RS-CINR calculation a channel model is used to specify limits for maximum Doppler frequency and maximum delay spread. This model is used to separate reference signal power and interference power. If the model allows less freedom (maximal possible variation) to Doppler frequency and delay spread the RS-CINR result accuracy may be improved. The measurement accuracy may not be guaranteed if true signal propagation parameters exceed the limits specified in the channel model!
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SChannelSettings">
            <summary>
This structure holds the measurement setup for the NR measurement. It basically consists of the set of frequencies that shall be measured.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.cellDefiningSSB">
            <summary>
Cell defining SS/PBCH block of a cell, that allows idle / inactive UEs to camp. Ref. 3GPP TS 38.300.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.dSSRefFrequencyInHz">
            <summary>
SS/PBCH block frequency position of RE=#0 (subcarrier #0) of RB#10, see 3GPP TS 38.101.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.dwMeasRatePer1000Sec">
            <summary>
The desired measurement rate value. For default value and range see GetMeasRateLimits().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.dwFrontEndSelectionMask">
            <summary>
Receiver front end to be used by the scanner for this channel. Scanner tasks are not allowed to contain multiple FE's.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.advancedSettings">
            <summary>
Advanced scanner settings for expert operation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.enFrameStructureType">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.bSSBPeriodicityMask">
            <summary>
Periodicity of the half frames for reception of SS/PBCH blocks, see 3GPP TS 38.215. Can be any combination of SSBPeriod values; however, must not be 0.
@note
Although it is possible to specify multiple periodicity values for this bit mask, it is recommended to use the default value of PERIOD_20MS unless it is known that the channel uses a different periodicity.
@warning
Including more than one periodicity value for the bit mask will require more resources.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.enSSBPattern">
            <summary>
Determines the first symbol index for candidate SS/PBCH blocks according to the subcarrier spacing. Ref. 3GPP TS 38.101 and 38.215.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.bHighEfficiencyMode">
            <summary>
In high efficiency mode the scanning uses up to 5 times less receiver resources. Disabling high efficiency mode will increase the sensitivity of the scanner by rougly 5...10 dB.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.dwTraceRatePer1000Sec">
            <summary>
Trace measurement rate if not set to SDefs::INVALID_DWORD_VALUE. For default value and range see GetMeasRateLimits(). This parameter overrides dwMeasRatePer1000Sec.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.dwSyncRatePer1000Sec">
            <summary>
Synchronization rate value if not set to SDefs::INVALID_DWORD_VALUE. Value Range: 100...5000, default 1000. This parameter overrides dwMeasRatePer1000Sec.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.enSfnRepetitionPeriod">
            <summary>
According to 3GPP SFN increases with each radio frame. For setups including a signal generator this is often not true, as the SFN sequence repeats after a specific number of radio frames. In order to provide correct signal detection the PBCH decoder needs to know that the SFN repeats after the given number of radio frames, thus a mismatch will lead to decreased signal detection. The minimum SFN must be a multiple of the given number. So in case that 64 Frames are generated the SFNs shall run from 0...63 or 64...127 or 128...191 or ... or 960...1023.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.enSSBMapping">
            <summary>
SSB mapping.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.bPSStoSSS3dBPowerRatio">
            <summary>
If set to true it's assumed that REs of PSS are +3dB boosted to SSS.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.bPSStoSSS0dBPowerRatio">
            <summary>
If set to true it's assumed that REs of PSS and SSS have equal power.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.bSychronizedNetwork">
            <summary>
If set to true it's assumed that the network is transmitting synchronized 10 ms long 5G NR frames. If unsure use false for FDD and true for TDD networks.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SfnRepetitionPeriod.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SfnRepetitionPeriod.Type.FRAME_COUNT_1024">
            <summary>
PBCH decoder assumes that SFN sequence is repeating every 1024 frames.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SfnRepetitionPeriod.Type.FRAME_COUNT_512">
            <summary>
PBCH decoder assumes that SFN sequence is repeating every 512 frames.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SfnRepetitionPeriod.Type.FRAME_COUNT_256">
            <summary>
PBCH decoder assumes that SFN sequence is repeating every 256 frames.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SfnRepetitionPeriod.Type.FRAME_COUNT_128">
            <summary>
PBCH decoder assumes that SFN sequence is repeating every 128 frames.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SfnRepetitionPeriod.Type.FRAME_COUNT_64">
            <summary>
PBCH decoder assumes that SFN sequence is repeating every 64 frames.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SfnRepetitionPeriod.Type.FRAME_COUNT_32">
            <summary>
PBCH decoder assumes that SFN sequence is repeating every 32 frames.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SfnRepetitionPeriod.Type.FRAME_COUNT_16">
            <summary>
PBCH decoder assumes that SFN sequence is repeating every 16 frames.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SfnRepetitionPeriod.Type.FRAME_COUNT_8">
            <summary>
PBCH decoder assumes that SFN sequence is repeating every 8 frames.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SfnRepetitionPeriod.Type.FRAME_COUNT_4">
            <summary>
PBCH decoder assumes that SFN sequence is repeating every 4 frames.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SfnRepetitionPeriod.Type.FRAME_COUNT_2">
            <summary>
PBCH decoder assumes that SFN sequence is repeating every 2 frames.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SfnRepetitionPeriod.Type.FRAME_COUNT_1">
            <summary>
PBCH decoder assumes that SFN sequence is repeating every 1 frames.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SfnRepetitionPeriod.Type.FRAME_COUNT_3GPP">
            <summary>
PBCH decoder expects 3GPP conform signals.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SfnRepetitionPeriod.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SfnRepetitionPeriod">
            <summary>
Definition of SFN repetition periods used in PBCH decoder.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SSBMapping.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SSBMapping.Type.AUTO">
            <summary>
The SSBMapping is derived from the configured SS/PBCH block frequency, see dSSRefFrequencyInHz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SSBMapping.Type.ABOVE_3_GHZ">
            <summary>
&lt;blockquote&gt;3 GHz
&lt;/blockquote&gt;
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SSBMapping.Type.BELOW_3_GHZ">
            <summary>
&lt;= 3 GHz
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SSBMapping.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SSBMapping">
            <summary>
Definition of SSB mapping types.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings">
            <summary>
Definition of advanced settings for experts.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.FrameStructureType.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.FrameStructureType.Type.TDD">
            <summary>
Time Division Duplex Mode.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.FrameStructureType.Type.FDD">
            <summary>
Frequency Division Duplex Mode.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.FrameStructureType.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.FrameStructureType">
            <summary>
Definition of the channel type.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.SSBPeriod.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.SSBPeriod.Type.PERIOD_160MS">
            <summary>
160 ms period.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.SSBPeriod.Type.PERIOD_80MS">
            <summary>
80 ms period.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.SSBPeriod.Type.PERIOD_40MS">
            <summary>
40 ms period.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.SSBPeriod.Type.PERIOD_20MS">
            <summary>
20 ms period.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.SSBPeriod.Type.PERIOD_10MS">
            <summary>
10 ms period.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.SSBPeriod.Type.PERIOD_5MS">
            <summary>
5 ms period.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.SSBPeriod.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB.SSBPeriod">
            <summary>
Periodicity of the half frames for reception of SS/PBCH blocks. Ref. 3GPP TS 38.215
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting.CellDefiningSSB">
            <summary>
Definition of cell defining SS/PBCH block settings, see 3GPP TS 38.300.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SFrequencySetting">
            <summary>
Configuration of the measurement that is performed on one single frequency.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SSBPattern.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SSBPattern.Type.CASE_E">
            <summary>
SS/PBCH block type case E: 240 kHz subcarrier spacing, see 3GPP TS 38.213.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SSBPattern.Type.CASE_D">
            <summary>
SS/PBCH block type case D: 120 kHz subcarrier spacing, see 3GPP TS 38.213.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SSBPattern.Type.CASE_C">
            <summary>
SS/PBCH block type case C: 30 kHz subcarrier spacing, see 3GPP TS 38.213.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SSBPattern.Type.CASE_B">
            <summary>
SS/PBCH block type case B: 30 kHz subcarrier spacing, see 3GPP TS 38.213.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SSBPattern.Type.CASE_A">
            <summary>
SS/PBCH block type case A: 15 kHz subcarrier spacing, see 3GPP TS 38.213.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SSBPattern.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SSBPattern">
            <summary>
Definition of Synchronisation Signal (SS) / Primary Broadcast Channel (PBCH) pattern types.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelState.dMeasRateInHz">
            <summary>
Individual rates for each measurement type.
@note
dMeasRateInHz &gt; 0 is required if bIsEnabled is TRUE Measurement rate in Hertz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelState.bIsEnabled">
            <summary>
TRUE - this channel is currently active. FALSE - all channel measurements are switched off (measurement rates below are preserved for future use).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelState.dwChannelIndex">
            <summary>
The channel index for this measurement settings information.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.NR.SChannelState.ALL_ENABLED_CHANNELS">
            <summary>
Used in dwChannelIndex to change measurement rates for all active channels can only be used while bIsEnabled is enabled, and only affects currently enabled channels.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.NR.SChannelState.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.NR.SChannelState">
            <summary>
Struct containing the channel measurement settings that can be modified during a running measurement
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.NR.CViComNrInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.NR.SMeasResult&gt;*)">
   Unregister a formerly registered ScannerData listener to remove it from the 
   list of objects that receive notification about new measurement data.

   @param[in] pListener
      The listener that shall be unregistered. If NULL or if the listener is not 
      found in the list of registered objects, an error is indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.NR.CViComNrInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.NR.SMeasResult&gt;*)">
   Register a ScannerData listener that will be notified when new data is 
   available. 

   @note 
      It is important to Unregister the listener again once it is getting 
      deleted, to avoid crashes.

   @note 
      Both possibilities to retrieve results are to be used exclusively. When
      using ResultDataListener, it is not allowed to call CViComBasicInterface::GetResultCounters() 
      or CViComNrInterface::GetResult() and vice versa.

   @param[in] pListener
      The object that shall be notified when new measurement data is available. 
      This must not be null. An error will be indicated if the listener has 
      already been registered to the interface.

</member>
        <member name="M:RohdeSchwarz.ViCom.NR.CViComNrInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.NR.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsLong)">
   Issue a request to the Layer 3 Decoder to decode the PDU contained by rSL3DecoderRequest.
   If the data has been decoded successfully within the time given by 
   dwTimeOutInMs, the method creates the SL3DecoderResult and the buffer on the 
   heap, fills in the Layer 3 Decoder result and returns a pointer to it.

   @param[in] rSL3DecoderRequest
      Contains the data that was the result of an IoT measurement and holds the 
      PDU data that shall be decoded.

   @param[in] dwTimeOutInMs
      The time in milliseconds that the function should wait before returning an 
      error, if the result buffer is empty.

   @return
      One measurement result on the heap, if the function succeeded. Otherwise NULL.
      Attention: The returned pointer is only valid until this function is called again.

</member>
        <member name="M:RohdeSchwarz.ViCom.NR.CViComNrInterface.GetSettings">
   By means of this function you can retrieve the PN-Scanner settings which 
   apply at the moment for measurements to be started or during running 
   measurements.

   @note 
      The result, like all other results too, is only for reading.  See SetConfiguration
      interface function to make changes.

   @return
      pointer to a structure holding the current device settings. In case of 
      failure, NULL. The returned value is valid as long as no other interface 
      method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.NR.CViComNrInterface.IssueDemodRequests(RohdeSchwarz.ViCom.NR.SDemodRequests!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   Use this function to issue commands (PDU requests, reset commands) for the 
   BCH demodulator during measurement.

   PDUs may be acquired for certain eNodeBs. PDU demodulation for eNodeBs or for 
   channels may be reset.

   @param[in] rDemodRequests
      When the function is called, this pointer contains the request parameters.
      For details see SDemodRequests.

</member>
        <member name="M:RohdeSchwarz.ViCom.NR.CViComNrInterface.GetChannelState(System.UInt32!System.Runtime.CompilerServices.IsLong)">
   GetChannelState returns the current status of the configurable settings from 
   the channel.

   @param[in] dwChannelIndex
      Specifies the 0-based channel index to be queried.

   @return
      Returns a SChannelState object which contains the current state for the 
      channel. The items in SChannelState can be modified during a running 
      measurement using the ModifyChannel method.
      @sa SChannelState and ModifyChannel.

</member>
        <member name="M:RohdeSchwarz.ViCom.NR.CViComNrInterface.ModifyChannel(RohdeSchwarz.ViCom.NR.SChannelState!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   ModifyChannel is used to modify configurable channel settings during a 
   running measurement.

   @sa SChannelState for items that can be modified.

   @param[in] sChannelState
      sChannelState contains the modified settings to be changed in the channel.

</member>
        <member name="M:RohdeSchwarz.ViCom.NR.CViComNrInterface.AddChannel(System.Double,RohdeSchwarz.ViCom.NR.SFrequencySetting.CellDefiningSSB.FrameStructureType.Type,RohdeSchwarz.ViCom.NR.SSBPattern.Type)">
   AddChannel is used to create additional channels during a running measurement.  
   The measurement settings from channel index 0, as configured by SetConfiguration(), 
   are used for the new channel.

   @note
      This method cannot be called in the idle state (IsMeasurementStarted() must return TRUE)

   @note 
      Each channel combination can only be added once. Attempting to add a channel 
      combination multiple times will return the index that is already present.

   @param[in] dChannelFrequencyInHz
      Center frequency in Hertz for the channel.

   @param[in] frameStructure
      Frame structure for the channel (TDD/FDD).

   @param[in] pattern
      Synchronisation Signal (SS) / Primary Broadcast Channel (PBCH) pattern.

   @return
      If success, the 0-based channel index for new channel is returned.  
      If failure, 0xFFFFFFFF is returned indicating an invalid channel.

</member>
        <member name="M:RohdeSchwarz.ViCom.NR.CViComNrInterface.SetTgSpectrumConfiguration(RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.SpectrumSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   SetTgSpectrumConfiguration is used to update the time gated spectrum settings during an active measurement.

   @param[in] spectrumSettings
   Contains the definition which spectrum settings shall be applied. This is only allowed for measurements
   with active time gated spectrum.
   Not supported yet!

</member>
        <member name="M:RohdeSchwarz.ViCom.NR.CViComNrInterface.SetConfiguration(RohdeSchwarz.ViCom.NR.SChannelSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.NR.SDemodulationSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   SetConfiguration is used to set internal settings of the PN-Scanner. The 
   functions SelectReceiver() of CViComBasicInterface change basic settings. 
   Except for frequency settings all other settings have default values.

   @param[in] rChannelSettings
      Contains the definition which frequencies shall be measured. Refer to 
      SChannelSettings for a more detailed description on those settings.

   @param[in] rDemodulationSettings
      Contains the definition which PDUs of BCH shall be measured. Refer to 
      SDemodulationSettings for a more detailed description on those settings.

</member>
        <member name="M:RohdeSchwarz.ViCom.NR.CViComNrInterface.GetMeasRateLimits">
   Limits for Parameter SFrequencySettings::dwMeasRatePer1000sec.

   @note
      The resulting meas rate limits are specified for the MeasurementMode::HIGH_SPEED 
      setting. The maximum rating for MeasurementMode::HIGH_SENSITIVITY is equal 
      to the returned default value of the SRange container object.

   @return
      pointer to a structure holding the limits for this setting. In case of 
      failure, NULL. The returned value is valid as long as no other interface 
      method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.NR.CViComNrInterface.GetDemodThresholdLimits">
   Limits for Parameter SDemodulationSettings::sSINRThresholdDB100

   @return
      pointer to a structure holding the limits for this setting. In case of 
      failure, NULL. The returned value is valid as long as no other interface 
      method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.NR.CViComNrInterface.GetChannelCountLimits">
   Limits for Parameter SChannelSettings::dwCount

   @return
      pointer to a structure holding the limits for this setting. In case of 
      failure, NULL. The returned value is valid as long as no other interface 
      method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.NR.CViComNrInterface.GetBasicInterface">
   The basic interface is a part of any application specific ViCom interface. It 
   is used for different TSME applications. The purpose is to control basic TSME 
   functions, which are not specific for a certain measurement.
   See CViComBasicInterface for specification of basic interface functions.

   @return
      reference to the BasicInterface object that can be used to control basic 
      functions like StartMeasurement() and StopMeasurement() et al.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.CViComNrInterface">
NR measurement module for ViCom. Offers the configuration and result receiving methods for all NR related
measurement tasks.
\@attribute[type="interface"  supportedDevices="TSME"]

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface.GetType">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.LTE.CViComLteInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.LTE.CViComLteInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
@note
Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage, it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComLteInterface::GetResult() and vice versa.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.Net.LTE.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst,System.UInt32)">
            <summary>
Issue a request to the Layer 3 Decoder to decode the PDU contained by rSL3DecoderRequest. If the data has been decoded successfully within the time given by dwTimeOutInMs, the method creates the SL3DecoderResult and the buffer within on the heap, fills in the Layer 3 Decoder result and returns a pointer to it.
</summary>
            <param name="rSL3DecoderRequest">
Contains the data that was the result of an LTE measurement and holds the PDU data that shall be decoded.
</param>
            <param name="dwTimeOutInMs">
The time in milliseconds that the function should wait before returning an error, if the result buffer is empty.
</param>
            <return>
one measurement result on the heap, if the function succeeded. Otherwise NULL. Attention: The returned pointer is only valid until this function is called again.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface.GetSettings">
            <summary>
By means of the functions: SetConfiguration() internal settings of the PN-Scanner may be changed. The functions SelectReceiver() of CViComBasicInterface change basic settings. Except for frequency settings all other settings have default values. By means of this function you can retrieve the PN-Scanner settings which apply at the moment for measurements to be started or during running measurements. Note that the result, like all other results too, is only for reading. To change settings the functions mentioned above should be used.
</summary>
            <return>
pointer to a structure holding the current device settings. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface.IssueDemodRequests(RohdeSchwarz.ViCom.Net.LTE.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary>
Use this function to issue commands (PDU requests, reset commands) for the BCH demodulator during measurement.
PDUs may be acquired for certain eNodeBs. PDU demodulation for eNodeBs or for channels may be reset.
</summary>
            <param name="rDemodRequests">
When the function is called, this pointer contains the request parameters. For details see SDemodRequests.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface.GetChannelState(System.UInt32)">
            <summary>
GetChannelState returns the current status of the configurable settings from the channel.
</summary>
            <param name="dwChannelIndex">
Specifies the 0-basd channel index to be queried.
</param>
            <return>
Returns an object of SChannelState which contains the current state for the channel. The items in SChannelState can be modified during a running measurement using the ModifyChannel method.
SChannelState and ModifyChannel.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface.ModifyChannel(RohdeSchwarz.ViCom.Net.LTE.SChannelState!System.Runtime.CompilerServices.IsConst)">
            <summary>
ModifyChannel is used to modify configurable channel settings during a running measurement. SChannelState for items that can be modified.
</summary>
            <param name="sChannelState">
sChannelState contains the modified settings to be changed in the channel.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface.AddChannel(System.Double,RohdeSchwarz.ViCom.Net.LTE.FrameStructureType.Type)">
            <summary>
AddChannel is used to create additional channels during a running measurement. The measurement settings from channel index 0, as configured by SetConfiguration(), are used for the new channel. @note
This method can not be called in the idle state (IsMeasurementStarted() must return TRUE)
@note
Each channel combination can only be added once. Attempting to add a combination multiple times will return the index that is already present.
</summary>
            <param name="dChannelFrequencyInHz">
Center frequency in Hertz for the channel.
</param>
            <param name="frameStructure">
Frame structure for the channel (TDD/FDD).
</param>
            <return>
If success, the 0-based channel index for new channel is returned. If failure, 0xFFFFFFFF is returned indicating an invalid channel.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.LTE.SChannelSettings!System.Runtime.CompilerServices.IsConst,RohdeSchwarz.ViCom.Net.LTE.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary>
CViComLteInterfaceData::SChannelSettings contains the count of channels or frequencies and the table of frequencies in MHz. The frequency or channel index is counted from zero and referenced in other data e.g. BCH demodulation settings. The selection of new frequencies causes default settings for the BCH demodulation.
This function also sets the general BCH demodulation properties, including the LTE Layer 3 PDUs that should be demodulated. Different sets of PDUs may be read from different BCH channels.
</summary>
            <param name="rChannelSettings">
Contains the definition which frequencies shall be measured.
SChannelSettings for a more detailed description on those settings.
</param>
            <param name="rDemodulationSettings">
Contains the definition which PDUs of BCH shall be measured.
SDemodulationSettings for a more detailed description on those settings.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface.GetDemodThresholdLimits">
            <summary>
Limits for Parameter SDemodulationSettings::sSINRThresholdDB100
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface.GetMbmsMeasRateLimits">
            <summary>
Limits for Parameter SMbmsSettings::dwMaxSubframeRatePer1000Sec
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface.GetWbMeasRateLimits">
            <summary>
Limits for Parameter SWidebandRsCinrSettings::dwAvgBlockCountPer1000Sec
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface.GetMeasRateLimits">
            <summary>
Limits for Parameter SFrequencySettings::dwAvgBlockCountPer1000Sec
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface.GetChannelCountLimits">
            <summary>
Limits for Parameter SChannelSettings::dwCount
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface.GetBasicInterface">
            <summary>
The basic interface is a part of any application specific ViCom interface. It is used for different device applications. The purpose is to control basic device functions, which are not specific for a certain measurement. See CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface.#ctor(RohdeSchwarz.ViCom.LTE.CViComLteInterface*)">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface.m_converter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface.m_nativeIf">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterface">
            <summary>
LTE measurement module for ViCom. Offers the configuration and result receiving methods for all LTE related measurement tasks.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData.Convert2M(RohdeSchwarz.ViCom.Technology.Type)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData.Convert2M(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData.Convert2M(RohdeSchwarz.ViCom.LTE.SMeasResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData.Convert2M(RohdeSchwarz.ViCom.LTE.SL3DecoderResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData.Convert2M(RohdeSchwarz.ViCom.LTE.SSettings!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData.Convert2M(RohdeSchwarz.ViCom.LTE.SChannelState)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData.Convert2M(RohdeSchwarz.ViCom.SRange&lt;System.Int16&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData.Convert2M(RohdeSchwarz.ViCom.SRange&lt;System.UInt32&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData.CleanUp(RohdeSchwarz.ViCom.LTE.SL3DecoderRequest*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.LTE.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.LTE.SL3DecoderRequest*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.LTE.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData.CleanUp(RohdeSchwarz.ViCom.LTE.SDemodRequests*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.LTE.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.LTE.SDemodRequests*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.LTE.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData.CleanUp(RohdeSchwarz.ViCom.LTE.SChannelState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.LTE.SChannelState!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.LTE.SChannelState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.LTE.SChannelState!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.Net.LTE.FrameStructureType.Type)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData.CleanUp(RohdeSchwarz.ViCom.LTE.SDemodulationSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.LTE.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.LTE.SDemodulationSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.LTE.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData.CleanUp(RohdeSchwarz.ViCom.LTE.SChannelSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.LTE.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.LTE.SChannelSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.LTE.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData.Instance">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData.s_instance">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.DataConverterCViComLteInterfaceData">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.ICViComLteInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.LTE.CViComLteInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.ICViComLteInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.LTE.CViComLteInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
@note
Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage, it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComLteInterface::GetResult() and vice versa.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.ICViComLteInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.Net.LTE.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst,System.UInt32)">
            <summary>
Issue a request to the Layer 3 Decoder to decode the PDU contained by rSL3DecoderRequest. If the data has been decoded successfully within the time given by dwTimeOutInMs, the method creates the SL3DecoderResult and the buffer within on the heap, fills in the Layer 3 Decoder result and returns a pointer to it.
</summary>
            <param name="rSL3DecoderRequest">
Contains the data that was the result of an LTE measurement and holds the PDU data that shall be decoded.
</param>
            <param name="dwTimeOutInMs">
The time in milliseconds that the function should wait before returning an error, if the result buffer is empty.
</param>
            <return>
one measurement result on the heap, if the function succeeded. Otherwise NULL. Attention: The returned pointer is only valid until this function is called again.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.ICViComLteInterface.GetSettings">
            <summary>
By means of the functions: SetConfiguration() internal settings of the PN-Scanner may be changed. The functions SelectReceiver() of CViComBasicInterface change basic settings. Except for frequency settings all other settings have default values. By means of this function you can retrieve the PN-Scanner settings which apply at the moment for measurements to be started or during running measurements. Note that the result, like all other results too, is only for reading. To change settings the functions mentioned above should be used.
</summary>
            <return>
pointer to a structure holding the current device settings. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.ICViComLteInterface.IssueDemodRequests(RohdeSchwarz.ViCom.Net.LTE.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary>
Use this function to issue commands (PDU requests, reset commands) for the BCH demodulator during measurement.
PDUs may be acquired for certain eNodeBs. PDU demodulation for eNodeBs or for channels may be reset.
</summary>
            <param name="rDemodRequests">
When the function is called, this pointer contains the request parameters. For details see SDemodRequests.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.ICViComLteInterface.GetChannelState(System.UInt32)">
            <summary>
GetChannelState returns the current status of the configurable settings from the channel.
</summary>
            <param name="dwChannelIndex">
Specifies the 0-basd channel index to be queried.
</param>
            <return>
Returns an object of SChannelState which contains the current state for the channel. The items in SChannelState can be modified during a running measurement using the ModifyChannel method.
SChannelState and ModifyChannel.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.ICViComLteInterface.ModifyChannel(RohdeSchwarz.ViCom.Net.LTE.SChannelState!System.Runtime.CompilerServices.IsConst)">
            <summary>
ModifyChannel is used to modify configurable channel settings during a running measurement. SChannelState for items that can be modified.
</summary>
            <param name="sChannelState">
sChannelState contains the modified settings to be changed in the channel.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.ICViComLteInterface.AddChannel(System.Double,RohdeSchwarz.ViCom.Net.LTE.FrameStructureType.Type)">
            <summary>
AddChannel is used to create additional channels during a running measurement. The measurement settings from channel index 0, as configured by SetConfiguration(), are used for the new channel. @note
This method can not be called in the idle state (IsMeasurementStarted() must return TRUE)
@note
Each channel combination can only be added once. Attempting to add a combination multiple times will return the index that is already present.
</summary>
            <param name="dChannelFrequencyInHz">
Center frequency in Hertz for the channel.
</param>
            <param name="frameStructure">
Frame structure for the channel (TDD/FDD).
</param>
            <return>
If success, the 0-based channel index for new channel is returned. If failure, 0xFFFFFFFF is returned indicating an invalid channel.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.ICViComLteInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.LTE.SChannelSettings!System.Runtime.CompilerServices.IsConst,RohdeSchwarz.ViCom.Net.LTE.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary>
CViComLteInterfaceData::SChannelSettings contains the count of channels or frequencies and the table of frequencies in MHz. The frequency or channel index is counted from zero and referenced in other data e.g. BCH demodulation settings. The selection of new frequencies causes default settings for the BCH demodulation.
This function also sets the general BCH demodulation properties, including the LTE Layer 3 PDUs that should be demodulated. Different sets of PDUs may be read from different BCH channels.
</summary>
            <param name="rChannelSettings">
Contains the definition which frequencies shall be measured.
SChannelSettings for a more detailed description on those settings.
</param>
            <param name="rDemodulationSettings">
Contains the definition which PDUs of BCH shall be measured.
SDemodulationSettings for a more detailed description on those settings.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.ICViComLteInterface.GetDemodThresholdLimits">
            <summary>
Limits for Parameter SDemodulationSettings::sSINRThresholdDB100
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.ICViComLteInterface.GetMbmsMeasRateLimits">
            <summary>
Limits for Parameter SMbmsSettings::dwMaxSubframeRatePer1000Sec
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.ICViComLteInterface.GetWbMeasRateLimits">
            <summary>
Limits for Parameter SWidebandRsCinrSettings::dwAvgBlockCountPer1000Sec
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.ICViComLteInterface.GetMeasRateLimits">
            <summary>
Limits for Parameter SFrequencySettings::dwAvgBlockCountPer1000Sec
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.ICViComLteInterface.GetChannelCountLimits">
            <summary>
Limits for Parameter SChannelSettings::dwCount
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.ICViComLteInterface.GetBasicInterface">
            <summary>
The basic interface is a part of any application specific ViCom interface. It is used for different device applications. The purpose is to control basic device functions, which are not specific for a certain measurement. See CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.ICViComLteInterface">
            <summary>
LTE measurement module for ViCom. Offers the configuration and result receiving methods for all LTE related measurement tasks.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterfaceDataProcessor.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.CViComLteInterfaceDataProcessor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SL3DecoderResult.pcPduText">
            <summary>
Pointer to a buffer containing the decoded PDU text, as zero terminated ASCII string.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SL3DecoderResult.dwStringLength">
            <summary>
Number of decoding result text bytes in the buffer (incl. terminating '\0').
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SL3DecoderResult.ePDU">
            <summary>
PDU contained.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SL3DecoderResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SL3DecoderResult">
            <summary>
Result from the Layer 3 Decoder.
The string returned via this structure is formatted using the ASN.1 notation of the LTE standard (3GPP TS 36.331). It contains one completely decoded PDU terminated by CR+LF. Data subsets (i.e. Information Elements) within the string are headed by "CR+LF+{", indented via spaces and terminated by "}+CR+LF".
In addition to the standard, some Information Elements are added twice (see example cellIdentity below):
-Formatted exactly according to the standard.
-Formatted with unit or format description between square brackets ("[" "]") and representing a reasonable value.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SL3DecoderRequest.pbBitStream">
            <summary>
Pointer to a buffer containing the PDU bits. The first bit is stored in bit 7 of pbBitStream[0]. If dwBitCount is not a multiple of 8, there are remaining bits, which shall be ignored.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SL3DecoderRequest.dwBitCount">
            <summary>
Number of bits for this PDU.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SL3DecoderRequest.ePDU">
            <summary>
PDU contained.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SL3DecoderRequest.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SL3DecoderRequest">
            <summary>
Request data container for the Layer 3 Decoder. Is used to decode a demodulation result into a human-readable structure.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.ListMeasurementRatesTotal">
            <summary>
Measurement rate for all LTE channels. In the case of one channel is measured with 5 and another one with 2 per second we expect an total meas rate of 7. If ListOfSignals has elements then the given measurement rate values correspond to narrowband measurements. Otherwise they are wideband.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.ListMeasurementRates">
            <summary>
Measurement rate for the given LTE channel (dwChannelIndex). List of measurement rates rates and other values in relation to the measurement rate for one or more time intervals of measurement rate calculation. The measurement rate is the ratio of all measurements of the same type of measurement at the time the measurement signals have been picked from the air. So the time of arrival at the host application is not used. If ListOfSignals has elements then the given measurement rate values correspond to narrowband measurements. Otherwise they are wideband.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.pDemodResult">
            <summary>
Pointer to demodulation result. If NULL, no demodulation result is present.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.ListOfLteMResults">
            <summary>
The actual set of LTE-M measurement results associated with the current channel specified by the dwChannelIndex member.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.ListOfMbmsResults">
            <summary>
The actual set of eMBMS measurement results associated with the current channel specified by the dwChannelIndex member.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.ListOfThroughputEstimationResults">
            <summary>
The actual set of throughput estimation results.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.ListOfMimoResults">
            <summary>
The actual set of MIMO measurement results associated with the current channel specified by the dwChannelIndex member.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.ListOfRssiAndSpectrumResults">
            <summary>
The actual set of RSSI and spectrum measurement results associated with the current channel specified by the dwChannelIndex member.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.ListOfWidebandRsCinrResults">
            <summary>
The actual set of wideband measurement results associated with the current channel specified by the dwChannelIndex member.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.ListOfSignals">
            <summary>
Set of signals associated with the current channel specified by the dwChannelIndex member.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.u64DeviceTimeInNs">
            <summary>
The time when the signal was started to being measured on the device, with a higher resolution than the default PC clock. This time is relative to the last restart of the device.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.dwPcTimeStampInMs">
            <summary>
PC local time when the signal was measured (or was started to being measured) on the device.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.dwChannelIndex">
            <summary>
The channel to which all the data relates is specified using this index. The index refers to the position in the SChannelSettings::pTableOfFrequencySetting array.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.pENodeBInformation">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.pbActiveAntennaMask">
            <summary>
Bits 0 to 3 are set to indicate that antenna port 0 to antenna port 3 are active if pbActiveAntennaMask is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.pSFN_Info">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.wPhysicalCellId">
            <summary>
The physical Cell ID, which can take one from the values defined by [0;503].
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.pbBitStream">
            <summary>
&lt;
Pointer to (dwBitCount + 7) / 8 bytes which contain the PDU bits. The first bit is stored in the bit 7 of pbBitStream[0]. If dwBitCount is not a multiple of 8, the trailing bits in the last byte pbBitStream[(dwBitCount + 7) / 8 - 1] shall be ignored.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.dwBitCount">
            <summary>
Number of bits the PDU consists of.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.bIsLteM">
            <summary>
PDU is from an LTE-M cell.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.ePDU">
            <summary>
PDU that has been demodulated
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.dwStopTimeInMs">
            <summary>
This is the last time in ms of signals used for this message. All IQ signals used to produce this demodulation result are in between dwStartTimeInMs and dwStopTimeInMs.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.dwStartTimeInMs">
            <summary>
This is the first time in ms of signals used for this message.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.dwFirstBtsId">
            <summary>
The demodulator fills this parameter with the BTS ID the scanner assigned to this BTS first. If later on, the scanner uses a different BTS ID, but after demodulation it is detected that it is the same eNodeB, the demodulator fills this value with the first BTS ID the scanner used. Example: The scanner has measured a eNodeB with ID = 10 and the demodulator has demodulated it successfully. 20 minutes later the scanner found signals of a eNodeB with ID = 55. After demodulating, the demodulator finds out (by comparing unique BTS information from decoding), that it is the same eNodeB as the one with ID = 10. In this case, dwFirstBtsId will be set to 10.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.dwBtsId">
            <summary>
Unique BTS ID provided by the scanner as SSignals::dwScannerBtsIdent. Each time the scanner is not sure whether the signal it could demodulate belongs to an already known eNodeB, it sets a new identifier here. I.e. the same eNodeB could have multiple dwBtsIds, but each dwBtsId relates always to a single cell.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.SENodeBInformation.bEndcIsSupported">
            <summary>
Indicates if dual connectivity with 5GNR (ENDC) is supported. Note: This is an indication if ENDC is supported by any PLMN on the eNodeB. FALSE - 0 TRUE - 1 UNKNOWN - SDefs::INVALID_BYTE_VALUE
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.SENodeBInformation.bDssIsSupported">
            <summary>
Indicates if Dynamic Spectrum Sharing (DSS) of LTE and 5GNR is supported. FALSE - 0 TRUE - 1 UNKNOWN - SDefs::INVALID_BYTE_VALUE
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.SENodeBInformation.bLteMIsSupported">
            <summary>
Indicates if LTE-M (LTE Cat-M1) is supported. FALSE - 0 TRUE - 1 UNKNOWN - SDefs::INVALID_BYTE_VALUE
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.SENodeBInformation.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.SENodeBInformation.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.SENodeBInformation">
            <summary>
Summary information about the eNodeB configuration, such LTE-M, Dynamic Spectrum Sharing (DSS), etc. Each element is only valid, if its value is not set to an INVALID value.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.SSFN_Info.dwRadioFrameNumber">
            <summary>
(Virtual) Radio Frame Number (RFN) assigned to current PDU, i.e. this RFN indicates the same radio frame as the SFN. See explanation for SMaxPeak::dwRadioFrameNumber.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.SSFN_Info.dwSystemFrameNumber">
            <summary>
The is the 10 bit System Frame Number. According to 3GPP TS 36.331, the LTE MIB provides the 8 most significant bits of the System Frame Number (SFN). As indicated in 3GPP TS 36.211[21, 6.6.1], the 2 least significant bits of the SFN are acquired implicitly in the P-BCH decoding, i.e. timing of 40ms P-BCH TTI indicates 2 least significant bits (within 40ms P-BCH TTI, the first radio frame : 00, the second radio frame : 01, the third radio frame : 10, the last radio frame : 11).
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.SSFN_Info.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.SSFN_Info.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult.SSFN_Info">
            <summary>
Optional information about system radio frame numbers. Can only be valid for MIB PDU. Each element is only valid, if its value is not SDefs::INVALID_DWORD_VALUE.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SDemodResult">
            <summary>
BCH demodulator results
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SLteMResult.pSubbandRsResults">
            <summary>
&lt;
Reference signal measurements computed over one LTE-M subband if pSubbandRsResults is not NULL. The result order is defined by: Subbands with lower center frequency are stored first.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SLteMResult.dwCountOfSubbandResults">
            <summary>
Number of values available in pSubbandRsResults array if pSubbandRsResults is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SLteMResult.averagedRsResultOverAllSubbands">
            <summary>
Average reference signal measurements computed over all LTE-M subbands.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SLteMResult.sRssiInDBm100">
            <summary>
Total received signal strength indictor (RSSI) for only OFDM symbols that contain reference signals. or SDefs::INVALID_SHORT_VALUE if invalid.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SLteMResult.wRBNumberOfBts">
            <summary>
The number of resource blocks transmitted from the eNodeB, i.e. LTE-M system bandwidth.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SLteMResult.bAntennaMaskUsedForMeasurement">
            <summary>
Bit 0 to Bit 1 is set when the corresponding antenna 0 to 1 was used for RSRP measurement. Regarding TS36.214 only antenna port 0 and 1 is used for RSRP measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SLteMResult.wPhysicalCellId">
            <summary>
The physical Cell ID, which can take one from the values defined by [0;503].
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SLteMResult.dwScannerBtsIdent">
            <summary>
Internal ID assigned from the scanner to that specific station as in SSignals::dwScannerBtsIdent. Different stations will become different IDs assigned to them, but if the scanner cannot identify a cell exactly, it also might assign different IDs to the same station.
@note
This is unique only within one measurement. Do not use it when combining the results of different measurements.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SLteMResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SLteMResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SLteMResult.SLteMReferenceSignal.sRsCinrInDB100">
            <summary>
Subband RS-CINR meas result in 0.01 dB.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SLteMResult.SLteMReferenceSignal.sRsRssiInDBm100">
            <summary>
Received signal strength indictor (RSSI) for only OFDM symbols that contain reference signals. This measurement is compatible with the definition in 3GPP 36.214, section 5.1.3 for RSSI used to compute RSRQ.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SLteMResult.SLteMReferenceSignal.sRSRQinDB100">
            <summary>
RSRQ value based on the wideband reference signal power measurement in 0.01 dB.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SLteMResult.SLteMReferenceSignal.sRSRPinDBm100">
            <summary>
RSRP value based on the wideband reference signal power measurement in 0.01 dBm.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SLteMResult.SLteMReferenceSignal.bAntennaMaskUsedForMeasurement">
            <summary>
Bit 0 to Bit 1 is set when the corresponding antenna 0 to 1 was used for RSRP measurement. Regarding TS36.214 only antenna port 0 and 1 is used for RSRP/Q, RS CINR and RS RSSI measurements.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SLteMResult.SLteMReferenceSignal.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SLteMResult.SLteMReferenceSignal.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SLteMResult.SLteMReferenceSignal">
            <summary>
Container for LTE-M reference signal measurement results.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SLteMResult">
            <summary>
Container for LTE-M scanner measurement results. Only available if LTE-M measurements have been configured using SFrequencySetting::SLteMSettings.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.pENodeBIdentifier">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.dwCountOfENodeBIdentifiers">
            <summary>
The count of eNodeB identifiers associated with the eMBMS configuration for the measured MBSFN area if pENodeBIdentifier is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.sRssiInDBm100">
            <summary>
Measured received signal strength indicator (RSSI) value in 0.01 dBm.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.sRsRssiInDBm100">
            <summary>
Received signal strength indictor (RSSI) for only OFDM symbols that contain reference signals. This measurement is compatible with the definition in 3GPP 36.214, section 5.1.3 for RSSI used to compute RSRQ.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.sAverageRsCinrInDB100">
            <summary>
The average RS-CINR over all subbands of wideband RS-CINR measurements in 0.01 dB if not SDefs::INVALID_SHORT_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.sNoiseClippedRSRQinDB100">
            <summary>
Noise clipped RSRQ value based on the wideband reference signal power measurement in 0.01 dB. For this value the measured RS-CINR was taken into account to correct the RSRQ result regarding noise and interference. Only valid if not SDefs::INVALID_SHORT_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.sNoiseClippedRSRPinDBm100">
            <summary>
Noise clipped RSRP value based on the wideband reference signal power measurement in 0.01 dB. For this value the measured RS-CINR was taken into account to correct the RSRP result regarding noise and interference.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.sRSRQinDB100">
            <summary>
RSRQ value based on the wideband reference signal power measurement in 0.01 dB if not SDefs::INVALID_SHORT_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.sRSRPinDBm100">
            <summary>
RSRP value based on the wideband reference signal power measurement in 0.01 dB.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.wRBNumberOfBts">
            <summary>
The number of resource blocks transmitted from the eNodeB, i.e. LTE system bandwidth.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.wCountOfUsedREs">
            <summary>
The number of reference symbol resource elements used for the RSRP/Q measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.bMbsfnAreaId">
            <summary>
Area ID for the measured MBSFN area.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.SENodeBIdentifier.dwLAC">
            <summary>
The location area code if not SDefs::INVALID_DWORD_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.SENodeBIdentifier.wMNC">
            <summary>
The MNC (mobile network code) in binary format if not SDefs::INVALID_WORD_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.SENodeBIdentifier.wMCC">
            <summary>
The MCC (mobile country code) if not SDefs::INVALID_WORD_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.SENodeBIdentifier.dwCellId">
            <summary>
The 28-bit unique cell ID if not SDefs::INVALID_DWORD_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.SENodeBIdentifier.dwPhysicalCellId">
            <summary>
The physical cell ID, which can take one from the values defined by [0;503].
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.SENodeBIdentifier.dwScannerBtsIdent">
            <summary>
Internal ID assigned from the scanner to that specific station as in SSignals::dwScannerBtsIdent. Different stations will become different IDs assigned to them, but if the scanner cannot identify a cell exactly, it also might assign different IDs to the same station.
@note
This is unique only within one measurement. Do not use it when combining the results of different measurements.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.SENodeBIdentifier.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.SENodeBIdentifier.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult.SENodeBIdentifier">
            <summary>
Optional container for the eNodeB identifiers associated with the eMBMS configuration for the measured MBSFN area.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMbmsResult">
            <summary>
eMBMS scanner measurement results. Only available if eMBMS measurements have been configured using SFrequencySetting::SMbmsSettings.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.pThroughputPerTransmissionMode">
            <summary>
Throughput results per transmission mode and spatial layer. For TransmissionMode::MIMO with number of spatial layers &gt; 1, lower spatial layer index comes first.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.dwCountOfThroughputPerTransmissionModeValues">
            <summary>
Number of values available in pThroughputPerTransmissionMode, if pThroughputPerTransmissionMode is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.wPhysicalCellId">
            <summary>
The physical Cell ID, which can take one from the values defined by [0;503].
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.dwScannerBtsIdent">
            <summary>
Internal ID assigned from the scanner to that specific station as in SSignals::dwScannerBtsIdent. Different stations will become different IDs assigned to them, but if the scanner cannot identify a cell exactly, it also might assign different IDs to the same station.
@note
This is unique only within one measurement. Do not use it when combining the results of different measurements.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.pSubbandThroughputValues">
            <summary>
The actual set of subband throughput estimation values with subband resolution.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.dwCountOfSubbandThroughputValues">
            <summary>
Number of values available in pSubbandThroughputValues if pSubbandThroughputValues is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.pWidebandThroughputValue">
            <summary>
The actual set of wideband throughput estimation values for the whole carrier bandwidth.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.bNumberOfSpatialLayer">
            <summary>
Number of spatial layer for TransmissionMode::MIMO, always 1 for single layer transmission modes.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.enTransmissionMode">
            <summary>
Transmission mode of the spatial layer
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.fCapacityInKbitPerSecond">
            <summary>
Estimated channel capacity in kbit per second.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.enCqiIndex">
            <summary>
Estimated channel quality index.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.CQI.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.CQI.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.CQI.Type.INDEX15">
            <summary>
CQI index 15, 64QAM code rate  1024 = 948.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.CQI.Type.INDEX14">
            <summary>
CQI index 14, 64QAM, code rate  1024 = 873.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.CQI.Type.INDEX13">
            <summary>
CQI index 13, 64QAM code rate  1024 = 772.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.CQI.Type.INDEX12">
            <summary>
CQI index 12, 64QAM code rate  1024 = 666.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.CQI.Type.INDEX11">
            <summary>
CQI index 11, 64QAM code rate  1024 = 567.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.CQI.Type.INDEX10">
            <summary>
CQI index 10, 64QAM code rate  1024 = 466.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.CQI.Type.INDEX9">
            <summary>
CQI index 9, 16QAM code rate  1024 = 616.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.CQI.Type.INDEX8">
            <summary>
CQI index 8, 16QAM code rate  1024 = 490.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.CQI.Type.INDEX7">
            <summary>
CQI index 7, 16QAM code rate  1024 = 378.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.CQI.Type.INDEX6">
            <summary>
CQI index 6, QPSK code rate  1024 = 602.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.CQI.Type.INDEX5">
            <summary>
CQI index 5, QPSK code rate  1024 = 449.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.CQI.Type.INDEX4">
            <summary>
CQI index 4, QPSK code rate  1024 = 308.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.CQI.Type.INDEX3">
            <summary>
CQI index 3, QPSK code rate  1024 = 193.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.CQI.Type.INDEX2">
            <summary>
CQI index 2, QPSK code rate  1024 = 120.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.CQI.Type.INDEX1">
            <summary>
CQI index 1, QPSK code rate  1024 = 78.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.CQI.Type.UNKNOWN">
            <summary>
CQI index invalid or unknown.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.CQI.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.CQI">
            <summary>
Definition of channel quality index (CQI) values.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue">
            <summary>
Throughput estimation value.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.TransmissionMode.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.TransmissionMode.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.TransmissionMode.Type.MIMO">
            <summary>
Multiple Input Multiple Output transmission mode.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.TransmissionMode.Type.SFBC">
            <summary>
Space Frequency Block Code transmission mode (transmit diversity).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.TransmissionMode.Type.SIMO">
            <summary>
Single Input Multiple Output transmission mode.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.TransmissionMode.Type.SISO">
            <summary>
Single port transmission mode.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.TransmissionMode.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.TransmissionMode">
            <summary>
Definition of transmission mode values.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode">
            <summary>
Container for throughput estimation results for one transmission mode.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SThroughputEstimationResult">
            <summary>
Container for throughput estimation results.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.pChannelMatrix">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.dwCountOfChannelMatrices">
            <summary>
The number of available MIMO channel matrices if pChannelMatrix is not NULL. Equal to wRBNumberOfBts  wNumberOfMeasTimes.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.wTimeResolutionInMs">
            <summary>
MIMO resolution. The length of signal in ms that has been used to calculate the MIMO results.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.wNumberOfMeasTimes">
            <summary>
Number of MIMO measurements made for each BTS in the captured IQ data.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.wRBNumberOfBts">
            <summary>
The number of resource blocks transmitted from the eNodeB, i.e. LTE system bandwidth.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.bTransmitAntennaMask">
            <summary>
Bitmask of eNodeB antenna ports used for MIMO measurements, if not 0. Bit 0 -&gt; antenna port 0, bit 1 -&gt; antenna port 1, etc.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.bReceiveAntennaMask">
            <summary>
Bitmask of front ends used for MIMO measurements, if not 0. Bit 0 -&gt; FE 0, bit 1 -&gt; FE 1, etc.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.bNumberOfTransmitAntennas">
            <summary>
Number of eNodeB transmit antenna ports used for the MIMO measurement (e.g. in the calculation of the H matrix).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.bNumberOfReceiveAntennas">
            <summary>
Number of receive antenna ports used for the MIMO measurement (e.g. in the calculation of the H matrix).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.wPhysicalCellId">
            <summary>
The physical Cell ID, which can take one from the values defined by [0;503].
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.dwScannerBtsIdent">
            <summary>
Internal ID assigned from the scanner to that specific station as in SSignals::dwScannerBtsIdent. Different stations will become different IDs assigned to them, but if the scanner cannot identify a cell exactly, it also might assign different IDs to the same station.
@note
This is unique only within one measurement. Do not use it when combining the results of different measurements.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.SChannelMatrix.pComplexCoefficient">
            <summary>
&lt;
Complex coefficient of the H matrix in sqrt(mW). Complex coefficients are stored column by column. Which means the pComplexCoefficient array effectively stores the transposed matrix H'.
For MxN MIMO and H with M rows and N columns
[ h11  h12 . . . h1N ]
[ h21  h22 . . . h2N ]
H =      .    .  .      .
[  .    .    .    .  ]
.    .      .  .
[ hM1  hM2 . . . hMN ]
the coefficient hij, for i in {1...M}, j in {1...N}, is available by way of
pComplexCoefficient[ (i-1) + (j-1)M ].
For example:
[ h11  h12  h13  h14 ]
H =
[ h21  h22  h23  h24 ]
=&gt; pComplexCoefficient array: [ h11 h21 h12 h22 h13 h23 h14 h24 ]
If 2x2 and 2x4 MIMO measurements are enabled, only the 2x4 matrix is returned, since the 2x2 matrix is a subset of the 2x4 matrix. E.g. the first four coefficients represent the 2x2 case [ h11 h21 h12 h22 ].
Similarly, if 4x4 MIMO measurements are enabled, only the 4x4 matrix is returned.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.SChannelMatrix.dwCountOfComplexCoefficients">
            <summary>
Number of values available in pComplexCoefficient if pComplexCoefficient is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.SChannelMatrix.pwConditionNumber4x4MimoInDB100">
            <summary>
Optional condition number for the channel matrix (H matrix) if pwConditionNumber4x4MimoInDB100 is not NULL. The condition number has the format 100  10  lg( max eigenvalue / min eigenvalue ).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.SChannelMatrix.pwConditionNumber2x4MimoInDB100">
            <summary>
Optional condition number for the channel matrix (H matrix) if pwConditionNumber2x4MimoInDB100 is not NULL. The condition number has the format 100  10  lg( max eigenvalue / min eigenvalue ).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.SChannelMatrix.pwConditionNumber2x2MimoInDB100">
            <summary>
Optional condition number for the channel matrix (H matrix) if pwConditionNumber2x2MimoInDB100 is not NULL. The condition number has the format 100  10  lg( max eigenvalue / min eigenvalue ).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.SChannelMatrix.pbRankFor4x4Mimo">
            <summary>
Optional rank for the channel matrix (H matrix) if pRank is not NULL. The estimated rank of H  ~H with respect to the CINR for 4x4 MIMO measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.SChannelMatrix.pbRankFor2x4Mimo">
            <summary>
Optional rank for the channel matrix (H matrix) if pRank is not NULL. The estimated rank of H  ~H with respect to the CINR for 2x4 MIMO measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.SChannelMatrix.pbRankFor2x2Mimo">
            <summary>
Optional rank for the channel matrix (H matrix) if pRank is not NULL. The estimated rank of H  ~H with respect to the CINR for 2x2 MIMO measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.SChannelMatrix.psChannelMatrixCinrInDB100">
            <summary>
Optional CINR value used in the channel matrix (H matrix) if psChannelMatrixCinrInDB100 is not NULL.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.SChannelMatrix.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.SChannelMatrix.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult.SChannelMatrix">
            <summary>
Optional container for channel matrices (H matrix) if pChannelMatrix is not NULL. The total measurement count resp. the number of available MIMO channel matrices is wRBNumberOfBts  wNumberOfMeasTimes. E.g. wRBNumberOfBts == 50 and wNumberOfMeasTimes == 4 means this BTS has a system bandwidth of 50 RBs and there are 4 channel matrices for every resource block, in total 200 matrices.
The matrix ordering is first measured matrix first and lower RB number (lower frequency) first, e.g. [ H_RB0_T0 H_RB1_T0 ... H_RBn_T0 H_RB0_T1 H_RB1_T1 H_RBn_T1 ... ] with RBx is a RB index and Tx is a time index.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SMimoResult">
            <summary>
MIMO measurement results. Only available if MIMO measurements have been configured using SFrequencySetting::SMimoMeasSettings. The results are only valid if dwScannerBtsIdent does not equal SDefs::INVALID_DWORD_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SRssiAndSpectrumResult.pSpectrumResult">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SRssiAndSpectrumResult.f6dBResolutionBandwidthInHz">
            <summary>
The 6 dB resolution bandwidth for spectrum results (given by the IQ time window function applied before the FFT).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SRssiAndSpectrumResult.wCountOfFftsForSpectrum">
            <summary>
Number of FFTs used for the RMS spectral power accumulation. This is the total count of FFTs if more than one FE is used. This is an optional value on only valid if the pointer is not equal to NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SRssiAndSpectrumResult.fSpectrumFreqDistanceInHz">
            <summary>
Frequency spacing of spectrum values available in pSpectrumValues array if pSpectrumValues is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SRssiAndSpectrumResult.psRssiInDBm100">
            <summary>
Measured received signal strength indicator (RSSI) value in 0.01 dBm if psRssiInDB100 is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SRssiAndSpectrumResult.pbSlotOffsetInLteFrame">
            <summary>
For the SRssiSettings::wRSSI_DL_ALL_TS_MODE measurement, this specifies the slot (0-19) in the LTE radio frame the RSSI measurements was made. Not used for any other measurement mode, only available if not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SRssiAndSpectrumResult.fUsedRssiBandwidthInHz">
            <summary>
RSSI measurement bandwidth in Hz (3 dB limit of the receiver filter).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SRssiAndSpectrumResult.wRssiMeasMode">
            <summary>
Used Rssi measurement configuration. See SRssiSettings::wRSSI_xxx_MODE constants.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SRssiAndSpectrumResult.dwFrontEndSelectionMask">
            <summary>
Receive antenna ports used for the measurement. For TSMW this could either be SRFPort::RF_1 or SRFPort::RF_2 or both.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SRssiAndSpectrumResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SRssiAndSpectrumResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SRssiAndSpectrumResult.SSpectrumResult.psRmsSpectralPowerValueInDBm100">
            <summary>
&lt;
RMS spectrum value in 0.01 dBm.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SRssiAndSpectrumResult.SSpectrumResult.dwCountOfSpectrumValues">
            <summary>
Number of values available in psRmsSpectralPowerValueInDBm100 array if psRmsSpectralPowerValueInDBm100 is not NULL.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SRssiAndSpectrumResult.SSpectrumResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SRssiAndSpectrumResult.SSpectrumResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SRssiAndSpectrumResult.SSpectrumResult">
            <summary>
Optional container for spectrum meas results. Only available if spectrum measurements have been configured in SFrequencySetting::SRssiMeasSettings and pSpectrum is not NULL. The RMS spectrum values are directly output from the FFT, thus the first value is the zero frequency component.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SRssiAndSpectrumResult">
            <summary>
Rssi and spectrum measurement results. Only available if RSSI / spectrum measurements have been configured using SFrequencySetting::SRssiSettings.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SWidebandRsCinrResult.sRsRssiInDBm100">
            <summary>
Received signal strength indictor (RSSI) for only OFDM symbols that contain reference signals. This measurement is compatible with the definition in 3GPP 36.214, section 5.1.3 for RSSI used to compute RSRQ.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SWidebandRsCinrResult.pWidebandSubbandRSRQinDB100">
            <summary>
&lt;
Noise clipped wideband RSRQ results with subband resolution if pWidebandSubbandRSRQinDB100 is not NULL. The result order is defined by: Subbands with lower center frequency are stored first. Same resolution as the wideband RS-CINR results.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SWidebandRsCinrResult.pWidebandSubbandRSRPinDBm100">
            <summary>
&lt;
Noise clipped wideband RSRP results with subband resolution if pWidebandSubbandRSRPinDBm100 is not NULL. The result order is defined by: Subbands with lower center frequency are stored first. Same resolution as the wideband RS-CINR results.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SWidebandRsCinrResult.pWidebandRsCinrValues">
            <summary>
&lt;
Wideband RS-CINR results if pWidebandRsCinrValues is not NULL. The result order is defined by: Subbands with lower center frequency are stored first.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SWidebandRsCinrResult.dwCountOfSubbands">
            <summary>
Number of values available in pWidebandRsCinrValues array if pWidebandRsCinrValues is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SWidebandRsCinrResult.sAverageRsCinrInDB100">
            <summary>
The wideband RS-CINR measured over the full signal bandwidth in 0.01 dB if not SDefs::INVALID_SHORT_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SWidebandRsCinrResult.sNoiseClippedRSRQinDB100">
            <summary>
Noise clipped RSRQ value based on the wideband reference signal power measurement in 0.01 dB. For this value the measured RS-CINR was taken into account to correct the RSRQ result regarding noise and interference. Only valid if not SDefs::INVALID_SHORT_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SWidebandRsCinrResult.sNoiseClippedRSRPinDBm100">
            <summary>
Noise clipped RSRP value based on the wideband reference signal power measurement in 0.01 dB. For this value the measured RS-CINR was taken into account to correct the RSRP result regarding noise and interference.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SWidebandRsCinrResult.sRSRQinDB100">
            <summary>
RSRQ value based on the wideband reference signal power measurement in 0.01 dB if not SDefs::INVALID_SHORT_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SWidebandRsCinrResult.sRSRPinDBm100">
            <summary>
RSRP value based on the wideband reference signal power measurement in 0.01 dB.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SWidebandRsCinrResult.dwCountOfUsedREs">
            <summary>
The number of reference symbol resource elements used for the RSRP/Q measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SWidebandRsCinrResult.wRBNumberOfBts">
            <summary>
The number of resource blocks transmitted from the eNodeB, i.e. LTE system bandwidth.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SWidebandRsCinrResult.dwFrontEndSelectionMask">
            <summary>
Receive antenna ports used for the measurement. For TSMW this could either be SRFPort::RF_1 or SRFPort::RF_2 or both.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SWidebandRsCinrResult.bTransmitAntennaPort">
            <summary>
Transmit antenna ports for the eNodeB (0...3) used for the measurement. Bit 0 to Bit 3 is set when the corresponding antenna 0 to 3 was used for measurement. In case of multiple bits set, the average CINR, CINR and subband RSRP values are invalid!
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SWidebandRsCinrResult.wPhysicalCellId">
            <summary>
The physical Cell ID, which can take one from the values defined by [0;503].
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SWidebandRsCinrResult.dwScannerBtsIdent">
            <summary>
Internal ID assigned from the scanner to that specific station as in SSignals::dwScannerBtsIdent. Different stations will become different IDs assigned to them, but if the scanner cannot identify a cell exactly, it also might assign different IDs to the same station.
@note
This is unique only within one measurement. Do not use it when combining the results of different measurements.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SWidebandRsCinrResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SWidebandRsCinrResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SWidebandRsCinrResult">
            <summary>
Wideband scanner measurement results. Only available if wideband measurements have been configured using SFrequencySetting::SWidebandRsCinrSettings. The results are only valid if dwScannerBtsIdent does not equal ISDefs::INVALID_DWORD_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.ListOfTddInterferer">
            <summary>
List of TDD interference analysis results for the current channel.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.ListOfPowerValues">
            <summary>
List of power values measured for the current channel.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.pCir">
            <summary>
This is NULL if no CIR information is available
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.sRefSignal">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.fStdDevTimeDriftInPpm">
            <summary>
The measured standard deviation of the time drift, given in parts per million (ppm). fAverageTimeDriftInPpm for more information.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.fAverageTimeDriftInPpm">
            <summary>
The measured average time drift of the eNodeB with respect to the TSMx receiver timing, given in parts per million (ppm). The drift is comprised of two parts:
-Drift associated with the relative motion between the eNodeB and TSMx receiver.
-Difference in the clock rates between the eNodeB and TSMx receiver. If the TSMx receiver is synchronized with GPS, the drift gives an indication of clock rate error in the eNodeB. To convert to nanoseconds per second, multiply ppm by 1000, 1.0 ppm = 1000 ns/sec.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.bExceededDriftLimit">
            <summary>
TRUE if the average time drift limit fAverageTimeDriftInPpm exceeded the threshold SChannelSettings::fDriftWarningThresholdInPpm, FALSE if the drift is below threshold or if threshold is not used (fDriftWarningThresholdInPpm = 0).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.pfSSyncToPSyncRatioInDB">
            <summary>
P-SYNC to S-SYNC ratio that has been measured. The result is within the interval given in SFrequencySetting::SSyncToPSyncRatio. This is an optional value and only valid if the pointer is not equal to NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.enFrameStructureType">
            <summary>
Type of the channel: FDD or TDD
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.bNumberOfSymbolsPerSlot">
            <summary>
Number of LTE symbols per slot. Can either be 6 or 7 symbols.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.dwScannerBtsIdent">
            <summary>
Internal ID assigned from the scanner to that specific station. Different stations will become different IDs assigned to them, but if the scanner cannot identify a cell exactly, it also might assign different IDs to the same station. This ID is unique on a per channel basis.
@note
This is unique only within one measurement. Do not use it when combining the results of different measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.wPhysicalCellId">
            <summary>
The physical Cell ID, which can take one from the values defined by [0;503].
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.STddInterference.fKPIinPct">
            <summary>
Key performance indicator for the strength of the interference in percent.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.STddInterference.bInterferenceReasonMask">
            <summary>
Reason for the interference. Can be any combination of the Reason::Type values above.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.STddInterference.dwChannelIndex">
            <summary>
Channel index of the interfering station. If STddInterferenceAnalysis::dwChannelIndex matches SMeasResult::dwChannelIndex it's intra-frequency interference otherwise it's inter-frequency interference.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.STddInterference.dwScannerBtsIdent">
            <summary>
Internal ID of the interfering cell. See SSignals::dwScannerBtsIdent for more information.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.STddInterference.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.STddInterference.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.STddInterference.Reason.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.STddInterference.Reason.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.STddInterference.Reason.Type.ASYNC_FRAMES">
            <summary>
Radio frames arrive asynchronously.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.STddInterference.Reason.Type.CONFIGURATION_MISSMATCH">
            <summary>
Different special subframe configuration.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.STddInterference.Reason.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.STddInterference.Reason">
            <summary>
Definition of interference reasons.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.STddInterference">
            <summary>
Container for TDD interference analysis results.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SPowerValue.pfPSyncQualityInDB">
            <summary>
P-SYNC quality derived from the pfCinrPSyncInDB. Only available if pfPSyncQualityInDB is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SPowerValue.pfPSyncRssiInDBm">
            <summary>
Comprises the linear average of the total received power observed only in OFDM symbols containing P-SYNC Signals over the center 62 resource elements, including co-channel serving and non-serving cells, adjacent channel interference, thermal noise etc. Only available if pfPSyncRssiInDBm is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SPowerValue.pfPSyncPowerInDBm">
            <summary>
Calculated from fPowerInDBm and SSignals::pfSSyncToPSyncRatioInDB. P-SYNC power of this special eNodeB. Only available if pfPSyncPowerInDBm is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SPowerValue.pfSSyncQualityInDB">
            <summary>
S-SYNC quality derived from the pfCinrSSyncInDB. Only available if pfSSyncQualityInDB is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SPowerValue.pfSSyncRssiInDBm">
            <summary>
Optional value. Comprises the linear average of the total received power observed only in OFDM symbols containing S-SYNC Signals over the center 62 resource elements, including co-channel serving and non-serving cells, adjacent channel interference, thermal noise etc.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SPowerValue.pfAmpBasedCinrSSyncInDB">
            <summary>
Optional CINR of the S-SYNC based on amplitude noise. Only available if pfAmpBasedCinrSSyncInDB is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SPowerValue.pfAmpBasedCinrPSyncInDB">
            <summary>
Optional CINR of the P-SYNC based on amplitude noise. Only available if pfAmpBasedCinrPSyncInDB is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SPowerValue.pfCinrSSyncInDB">
            <summary>
Optional CINR of the S-SYNC. Only available if not NULL and value &gt; 0 dB.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SPowerValue.pfCinrPSyncInDB">
            <summary>
Optional CINR of the P-SYNC signal. As the P-SYNC is not unique for a special eNodeB, this value is based on the combined signal received from all eNodeB's using the same P-SYNC. Only available if not NULL and value &gt; 0 dB.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SPowerValue.fCinrInDB">
            <summary>
This is either the CINR of the S-SYNC only or an averaged CINR of P-SYNC and S-SYNC. This depends on the value of the pfCinrPSyncInDB and pfCinrSSyncInDB. If both are not available, this is S-SYNC CINR only. The number of symbols from which the CINR is calculated is determined in the same way as described for fPowerInDBm. Otherwise, it's the averaged value.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SPowerValue.fPowerInDBm">
            <summary>
Power of S-SYNC signal. The power of the P-SYNC signal can be calculated from this using the pfSSyncToPSyncRatioInDB. This will give us the P-SYNC power of this special eNodeB.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SPowerValue.pdwTimeFromStartOfBlockInNs">
            <summary>
Offset of the OFDM symbol that has been used to retrieve the power value. If NULL, a complete LTE block has been used.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SPowerValue.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SPowerValue.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SPowerValue">
            <summary>
Power values measured on the S-SYNC. The power is either retrieved from the complete LTE block (19-20 OFDM symbols), or from a single OFDM symbol. The former case is true when the pdwTimeFromStartOfBlockInNs is not set.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SReferenceSignal.pRefSignalCirResults">
            <summary>
Reference signal CIR results if pRefSignalCirResults is not NULL. Bit 0 to 3 of bDetectedTransmitAntennaPorts is set when the CIR has been measured for the corresponding antenna port 0 to 3.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SReferenceSignal.dwCountOfRefSignalCirResults">
            <summary>
Number of values available in pRefSignalCirResults array if pRefSignalCirResults is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SReferenceSignal.pwSpecialSubframe6Config">
            <summary>
Configuration of a TD-LTE special subframe at position 6 if pwSpecialSubframe6Config is not NULL. E.g. for configuration 0 bit 0 (1&lt;&lt;0) is set. Configuration 0 to 9 are possible.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SReferenceSignal.pwSpecialSubframe1Config">
            <summary>
Configuration of a TD-LTE special subframe at position 1 if pwSpecialSubframe1Config is not NULL. E.g. for configuration 0 bit 0 (1&lt;&lt;0) is set. Configuration 0 to 9 are possible.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SReferenceSignal.pNarrowbandRSRPinDBm100">
            <summary>
Narrowband RSRP result with subband resolution if pNarrowbandRSRPinDBm100 is not NULL. For description of the result order and resolution see bRsCinrMeasResultConfig.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SReferenceSignal.pNarrowbandRsCinrValues">
            <summary>
&lt;
Narrowband RS-CINR result if pNarrowbandRsCinrValues is not NULL. For description of the result order see bRsCinrMeasResultConfig.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SReferenceSignal.dwCountOfNarrowbandRsCinrValues">
            <summary>
Number of values available in pNarrowbandRsCinrValues array if pNarrowbandRsCinrValues is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SReferenceSignal.bRsCinrMeasResultConfig">
            <summary>
Narrowband RS-CINR measurements taken for antenna port 0 to 3. The bits SFrequencySetting::wCENTER_RSCINR_xxx are set if the specific measurement was done. The results are stored in the pNarrowbandRsCinrValues array. The number and order of the results is defined by taken measurements indicated in this byte array. Lower antenna port results are stored first (highest priority), lower subbandwidth first, subbands with lower center frequency first. E.g. 6x180kHz (wCENTER_RSCINR_6x180KHZ) before 3x360kHz (wCENTER_RSCINR_3x360KHZ).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SReferenceSignal.sPBCHbasedRSRQinDB100">
            <summary>
RSRQ value based on sCenterRSRPinDBm100 and the total inband power in resource blocks used to transmit the PBCH within the 100 ms IQ data block analysed with the scanner. SDefs::INVALID_SHORT_VALUE, if no reference signal measurement was done.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SReferenceSignal.sPBCHbasedRSRPinDBm100">
            <summary>
Gives the RSRP value based on the reference signal power measurement of the 6 innermost resource blocks (1MHz BW around center frequency at symbols used for the PBCH) in 0.01 dBm. SDefs::INVALID_SHORT_VALUE, if no reference signal measurement was done.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SReferenceSignal.bNumberOfSymbolsUsedForRSRQ">
            <summary>
Number of symbols used for RSRQ measurements. 0, if no reference signal measurement was done.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SReferenceSignal.pbUpDownLinkConfig">
            <summary>
Optional Up- / Downlink configuration used for the TD-LTE RSRP measurement if pbUpDownLinkConfig is not NULL. E.g. for Up- / Downlink configuration 2 bit 2 (1&lt;&lt;2) is set. Configuration 0 to 6 are supported for TDD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SReferenceSignal.bDetectedTransmitAntennaPorts">
            <summary>
Detected transmit antenna ports of the eNodeB. Bit 0 to Bit 3 is set when the corresponding antenna port 0 to 3 is detected by the scanner. 0, if no reference signal measurement was done.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SReferenceSignal.bAntennaMaskUsedForRSRP">
            <summary>
If 0, no reference signal measurement was done and sPBCHbasedRSRPinDBm100 and sPBCHbasedRSRQinDB100 are not valid. Bit 0 to Bit 1 is set when the corresponding antenna 0 to 1 was used for RSRP measurement. Regarding TS36.214 only antenna port 0 and 1 is used for RSRP measurement.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SReferenceSignal.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SReferenceSignal.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SReferenceSignal">
            <summary>
Reference Signal measurement results. Only available if measurements have been activated using SFrequencySetting::wNarrowbandRefSignalMeasMode.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.pMaxPeak">
            <summary>
Maximum peak in the Channel Impulse Response if pMaxPeak is not NULL.
This result will only be provided, if the peak list is not empty, PPS has been acquired and the Time of Arrival feature has been enabled (i.e. 0 &lt; SSettings::dwToaAvgWindowLengthMs). In addition, it will take about 100 s from start of measurement, before the first results are provided.
@note
: This feature requires a GPS antenna to be connected to the receiver.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.ListOfPeaks">
            <summary>
List of CIR peaks found in the signal.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.pPowerDelayProfile">
            <summary>
Optional power profile measurement further detailing the CIR measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.u64DeviceTimeInNs">
            <summary>
Time when the first CIR sample has been measured, related to the device internal clock.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.dwPcTimeStampInMs">
            <summary>
Calculated time of the first CIR sample based on start of the operating system (GetTickCount()).
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SMaxPeak.dwRadioFrameNumber">
            <summary>
Virtual Radio Frame Number (RFN) assigned to each radio frame received. The RFN counting is started for each new combination of Channel, Physical Cell ID and BTS ID, i.e. dwChannelIndex, wPhysicalCellId, dwBtsId.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SMaxPeak.dFrameToaOffsetToPpsInSec">
            <summary>
Time difference between Radio Frame Time of Arrival (TOA) and the latest PPS pulse received. The time, when the maximum CIR peak has been received, is used as Radio Frame Time of Arrival.
According to 3GPP TS36.211 Chapter 4, the LTE FDD &amp; TDD radio frames have 10 ms length.
In case of LTE FDD, the following must be considered:
According to 3GPP TS36.211 Chapter "4.1 Frame structure type 1", the LTE FDD Frame can be treated as one complete radio frame. To determine the frame delay as value within +/- half of the radio frame length (+/- 10 ms / 2 =&gt; 5 ms), the provided dFrameToaOffsetToPpsInSec must be processed according to he following principle: double dFrameDelay_ms = ( (1000dFrameToaOffsetToPpsInSec + 5 ms) modulo 10 ms ) - 5 ms.
In case of LTE TDD, the following must be considered:
According to 3GPP TS36.211 Chapter "4.2 Frame structure type 2", the LTE TDD Frame consists of two 5 ms subframes for each complete radio frame. Therefore, if you want to calculate the radio frame delay, you must use the half radio frame length (5 ms).
To determine the frame delay as value within +/- half of the length considered (+/- 5 ms / 2 =&gt; 2.5 ms), you must add this half length value, apply a 5 ms modulo calculation and then subtract the half length value. If you do so, you get the correct offset values: Example: Assume you got two measurement values, 5.2 and 9.8 ms. The offset to PPS has to be calculated as ( (5.2 ms + 2.5 ms) modulo 5 ms) - 2.5 ms ==&gt; 0.2 ms delay ( (9.8 ms + 2.5 ms) modulo 5 ms) - 2.5 ms ==&gt; -0.2 ms delay, i.e. 0.2 ms ahead.
@note
This feature requires a GPS antenna to be connected to the receiver.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SMaxPeak.pMaxPeakInfo">
            <summary>
Pointer to the maximum element of the CIR Peak list. This value is not optional, it is a pointer to avoid copying data.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SMaxPeak.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SMaxPeak.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SMaxPeak">
            <summary>
Contains information about the maximum peak in the Channel Impulse Response.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SPeak.fDelayInSec">
            <summary>
Delay in seconds related to the first sample. This normally provides a higher resolution than the sampling time from the power delay measurement results (see above).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SPeak.sDopplerInHz">
            <summary>
Main part of a Doppler frequency. Is not necessarily available and may be set to SDefs::INVALID_SHORT_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SPeak.fPeakPowerInDBm">
            <summary>
The actual power of the impulse peak.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SPeak.fInbandPowerInDBm">
            <summary>
Inband power of the signal from which the CIR was extracted.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SPeak.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SPeak.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SPeak">
            <summary>
Contains information about the single peaks in the Channel Impulse Response.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SPowerDelayProfile.PowerDelayProfileValues">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SPowerDelayProfile.fSamplingTimeInSec">
            <summary>
Sampling time for a CIR measurement. This is also the time between two CIR measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SPowerDelayProfile.fNoiseFloorInDBm">
            <summary>
Estimated noise level. Power values which are in the vicinity of this value can be considered to be caused or influenced by noise.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SPowerDelayProfile.fAggregatePowerInDBm">
            <summary>
Total received power over the complete signal.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SPowerDelayProfile.fInbandPowerInDBm">
            <summary>
Inband power measured during the CIR measurement (which is a subset of the overall signal)
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SPowerDelayProfile.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SPowerDelayProfile.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SPowerDelayProfile.SPowerDelayProfileValues.psValuesInDBm100">
            <summary>
array that holds dwCountOfValues elements, each specifying a power delay value in 100th dBm (e.g. a value of -6719 is to be read as -67.19 dBm). Can be SDefs::INVALID_SHORT_VALUE when a value could not be measured
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SPowerDelayProfile.SPowerDelayProfileValues.dwCountOfValues">
            <summary>
number of elements available in the psValuesInDBm100 array
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SPowerDelayProfile.SPowerDelayProfileValues.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SPowerDelayProfile.SPowerDelayProfileValues.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SPowerDelayProfile.SPowerDelayProfileValues">
            <summary>
A (possibly empty) set of power delay values. This list contains the CIR power values, where each power value has been measured fSamplingTimeInSec seconds after the previous one. The first sample in here has been measured at u64DeviceTimeInNs resp. dwPcTimeStampInMs.
The list may contain invalid values, which denote that at that specific time there was no CIR measurement possible.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir.SPowerDelayProfile">
            <summary>
Structure containing the actual CIR measurement results combined with delay information.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals.SCir">
            <summary>
Optional data container that holds information about the channel impulse responses measured in this cycle. The CIR consists of an optional power delay profile, and a list of peaks.
Channel impulse responses are calculated from a 100ms block.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult.SSignals">
            <summary>
Actual power values measured for a single server
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SMeasResult">
            <summary>
The LTE measurement result for a single channel returned by CViComLteInterface::GetResult().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.S_LTE_COMPLEX_VALUE.fImag">
            <summary>
Imaginary part of the complex number.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.S_LTE_COMPLEX_VALUE.fReal">
            <summary>
Real part of the complex number.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.S_LTE_COMPLEX_VALUE.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.S_LTE_COMPLEX_VALUE">
            <summary>
Complex value used for channel matrix values of MIMO measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.S_LTE_RS_CINR_VALUE.ConfidenceInterval95PercentOfsRsCinrInDB100">
            <summary>
The confidence interval for 95% for the value sRsCinrInDB100. The 95% confidence interval corresponds to the 2 sigma distance in a Gaussian distribution.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.S_LTE_RS_CINR_VALUE.ConfidenceInterval68PercentOfsRsCinrInDB100">
            <summary>
The confidence interval for 68% for the value sRsCinrInDB100. The 68% confidence interval corresponds to the 1 sigma distance in a Gaussian distribution.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.S_LTE_RS_CINR_VALUE.sRsCinrInDB100">
            <summary>
Subband RS-CINR meas result in 0.01 dB or SDefs::INVALID_SHORT_VALUE if invalid. The value is the maximum likelihood result of the measured probability function for the RS-CINR value.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.S_LTE_RS_CINR_VALUE.sLinAverageREpowerInDBm100">
            <summary>
Average power of all resource elements used for sRsCinrInDB100. The average calculation is done in Watt not in dB. SDefs::INVALID_SHORT_VALUE if invalid.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.S_LTE_RS_CINR_VALUE.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.S_LTE_RS_CINR_VALUE">
            <summary>
Container for subband RS-CINR meas results used for narrowband / wideband RS-CINR measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.S_LTE_RATIO_CONFIDENCE_INTERVALL.bDeviationToHigherRatioInDB10">
            <summary>
0..25.4 dB distance from maximum likelihood value. SDefs::INVALID_BYTE_VALUE is used when the confidence interval is bigger.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.S_LTE_RATIO_CONFIDENCE_INTERVALL.bDeviationToLowerRatioInDB10">
            <summary>
0..25.4 dB distance from maximum likelihood value. SDefs::INVALID_BYTE_VALUE is used when the confidence interval is bigger.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.S_LTE_RATIO_CONFIDENCE_INTERVALL.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.S_LTE_RATIO_CONFIDENCE_INTERVALL">
            <summary>
Confidence interval of a value. The value is inside the interval with a defined probability (confidence probability). The interval is defined from (maximum likelihood value - bDeviationToLowerRatioInDB10) to (maximum likelihood value + bDeviationToHigherRatioInDB10). The maximum likelihood value has to be given outside this structure. Used in S_LTE_RS_CINR_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SSettings.DemodulationSettings">
            <summary>
Configuration of the demodulation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SSettings.ChannelSettings">
            <summary>
The set of frequencies that shall be measured.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SSettings.dwReceiverIndex">
            <summary>
Index to SConnectedReceiverTable::Receiver of the currently selected receiver.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SSettings">
            <summary>
This structure holds all the measurement setup that is configured in the ViComLTE scanner module. It is a result of the CViComLteInterface::GetSettings() method.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SDemodulationSettings.sStartMeasurementRequests">
            <summary>
The requests for the general start measurement command.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SDemodulationSettings.dwFrontEndSelectionMask">
            <summary>
Receiver front end to be used by the demodulator for this channel. If no demodulation shall be provided, this shall be set to 0. Demodulation tasks are not allowed to contain multiple FE's.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SDemodulationSettings.sSINRThresholdDB100">
            <summary>
SINR threshold for demodulation, given in 1/100 dBm. For default value and range see GetDemodThresholdLimits().
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SDemodulationSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SDemodulationSettings">
            <summary>
This structure is used to configure the BCH demodulation process.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SDemodRequests.pDemodRequests">
            <summary>
Pointer to an array of demodulation requests. Must be NULL, if no demodulation shall be done.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SDemodRequests.dwCountOfRequests">
            <summary>
Number of demodulation requests. Must be 0, if no demodulation shall be done.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SDemodRequests.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SDemodRequests.SDemodRequest.dwBtsId">
            <summary>
Unique BTS ID provided by the scanner as SSignals::dwScannerBtsIdent. This ID is used by the BCHDemodulator to demodulate a specific BTS, when the bDemodulationMode is set to ON_CMD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SDemodRequests.SDemodRequest.wRepetitionTimeOutInMs">
            <summary>
Repetition time out in ms (only used if bDemodulationMode == REPETITION).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SDemodRequests.SDemodRequest.eDemodulationMode">
            <summary>
The mode used for BCH demodulation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SDemodRequests.SDemodRequest.ePDU">
            <summary>
The PDU to be demodulated.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SDemodRequests.SDemodRequest.dwChannelIndex">
            <summary>
Index of the frequency in SChannelSettings::pTableOfFrequencySetting.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SDemodRequests.SDemodRequest.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SDemodRequests.SDemodRequest">
            <summary>
There must be one instance of this structure for each BCH demodulation request, therefore different PDUs can be measured on different channels.
Example for start measurement: On the first channel SIBs 3 and 4 shall be decoded, on the the second channel SIBs 3, 5 and 7 shall be decoded. SIB 5 shall be decoded repeatedly every 10 seconds (10000 ms) and SIB 7 shall be decoded on demand. This requires five structures containing the following parameter sets: (0,&lt;sp&gt;&lt;/sp&gt;SIB3,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(0,&lt;sp&gt;&lt;/sp&gt;SIB4,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(1,&lt;sp&gt;&lt;/sp&gt;SIB3,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(1,&lt;sp&gt;&lt;/sp&gt;SIB5,&lt;sp&gt;&lt;/sp&gt;REPETITION,&lt;sp&gt;&lt;/sp&gt;10000,&lt;sp&gt;&lt;/sp&gt;0)(1,&lt;sp&gt;&lt;/sp&gt;SIB7,&lt;sp&gt;&lt;/sp&gt;ON_CMD,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0) Example during measurement: On channel 0 PDU demodulation shall be completely reset for the BTS identified by ID 3 and on the the second channel SIB 7 shall be decoded for the BTS identified by ID 4 with a timeout for the request of 1 sec (1000ms): (0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;CHANNEL_RESET,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;3)(1,&lt;sp&gt;&lt;/sp&gt;SIB7,&lt;sp&gt;&lt;/sp&gt;ON_CMD,&lt;sp&gt;&lt;/sp&gt;1000,&lt;sp&gt;&lt;/sp&gt;4) Note that you are responsible to manage the memory when you use SetDemodulationSettings(). Note: All parameters which are not necessary for a certain request shall be set to 0.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SDemodRequests">
            <summary>
This structure is used to configure PDU requests. It is used in start measurement requests and it is used to issue BCH demodulation requests during measurement, e.g. SIB requests on demand or to reset SIB demodulation.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.DemodMode.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.DemodMode.Type.CHANNEL_RESET">
            <summary>
Delete all demodulation results for all BTS at the specified channel. Restart demodulation for this channel as specified in the command. This can be requested only during a running measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.DemodMode.Type.BTS">
            <summary>
The demodulation is only for a special BTS. This can be requested only during a running measurement and when the PDU was also requested in the start measurement frame. If dwTimeOutOrRepetitionDelayIn100ms is different from 0 then the demodulation is only tried during the given time.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.DemodMode.Type.REPETITION">
            <summary>
After each successful demodulation a new one will be started automatically after the repetition time specified in wRepetitionDelayIn100ms. Only to be used in start measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.DemodMode.Type.ON_CMD">
            <summary>
The PDU is only demodulated if an extra command for demodulation requests the demodulation. Only to be used in start measurement.
If this is used, then no PDU is decoded until it is explicitly requested. The method IssueDemodRequests can be used for that purpose.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.DemodMode.Type.ONCE">
            <summary>
Demodulate the PDU for each BTS at the specified channel only once. Only to be used in start measurement.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.DemodMode.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.DemodMode">
            <summary>
This enumeration defines modes for the LTE / LTE-M BCH demodulation. Use this in the SDemodRequest structure to specify when the demodulation of this PDU shall be done.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.Pdu.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB32">
            <summary>
SIB 32 is PDU 214.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB31">
            <summary>
SIB 31 is PDU 213.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB30">
            <summary>
SIB 30 is PDU 212.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB29">
            <summary>
SIB 29 is PDU 211.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB28">
            <summary>
SIB 28 is PDU 210.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB27">
            <summary>
SIB 27 is PDU 209.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB26">
            <summary>
SIB 26 is PDU 207.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB25">
            <summary>
SIB 25 is PDU 206.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB24">
            <summary>
SIB 24 is PDU 205.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB21">
            <summary>
SIB 21 is PDU 202.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB20">
            <summary>
SIB 20 is PDU 201.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB19">
            <summary>
SIB 19 is PDU 29.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB18">
            <summary>
SIB 18 is PDU 28.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB17">
            <summary>
SIB 17 is PDU 27.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB16">
            <summary>
SIB 16 is PDU 26.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB15">
            <summary>
SIB 15 is PDU 25.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB14">
            <summary>
SIB 14 is PDU 24.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB13">
            <summary>
SIB 13 is PDU 23.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB12">
            <summary>
SIB 12 is PDU 22.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB11">
            <summary>
SIB 11 is PDU 21.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB10">
            <summary>
SIB 10 is PDU 20.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB9">
            <summary>
SIB 9 is PDU 19.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB8">
            <summary>
SIB 8 is PDU 18.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB7">
            <summary>
SIB 7 is PDU 17.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB6">
            <summary>
SIB 6 is PDU 16.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB5">
            <summary>
SIB 5 is PDU 15.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB4">
            <summary>
SIB 4 is PDU 14.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB3">
            <summary>
SIB 3 is PDU 13.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB2">
            <summary>
SIB 2 is PDU 12.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.SIB1">
            <summary>
SIB 1 is PDU 11.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.MIB">
            <summary>
MIB is PDU 10.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type.UNDEFINED">
            <summary>
Undefined, used for not initialized fields.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.Pdu.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.Pdu">
            <summary>
This enumeration defines IDs for the LTE Layer 3 PDUs. Use this in the SDemodRequest structure to specify which PDUs shall be decoded.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.bDriftScanning">
            <summary>
Setting bDriftScanning to TRUE will enable LTE drift scanning in ViCom to track drifting eNodeBs.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.fDriftWarningThresholdInPpm">
            <summary>
When an eNodeB is detected to be drifting in excess of this threshold, the value SMeasResult::SSignals::bExceededDriftLimit is set to TRUE. The threshold is set in units of parts per million (ppm). 1 ppm = 1000 ns/sec. @note
The flag bDriftScanning must be enabled in order to set this value.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.pTableOfFrequencySetting">
            <summary>
This array of structures can be filled with single frequency configurations. Only dwCount entries from this table will be used.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.dwCount">
            <summary>
Number of frequency configurations that shall be used from the pTableOfFrequencySetting to perform the measurement tasks. For value range see GetChannelCountLimits().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.bTddInterferenceKpiThresholdInPct">
            <summary>
Configuration for TDD interference analysis. Disabled for bTddInterferenceKpiThresholdInPct == 0. If &gt; 0 detailed reports for cells having an interference KPI value above or equal to the specified one are provided in SMeasResult::SSignals::ListOfTddInterferer. This feature requires a GPS antenna to be connected to the receiver. Also PDU::SIB1 has to be requested for channels with interference analysis.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.dwToaAvgWindowLengthMs">
            <summary>
Length of the sliding window for Time of Arrival averaging in ms. Values in the near past of the current value contribute more to the average than older values. Values older than dwToaAvgWindowLengthMs will contribute significantly less to the average value. If &gt; 1, this value is treated as double Sigma threshold of a Gaussian distribution in time, on which the averaging is based. If 1, results are provided without averaging. If 0, feature deactivated, no ToA processing and no results. This is the default!
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.MbmsRsCinrChannelModel">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.RsCinrChannelModel">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SMbmsRsCinrChannelModel.dwSpeedInKmPerHour">
            <summary>
The maximum speed (velocity) of the measurement platform in km / h. The relative platform to base station velocity gives the rise to the maximum Doppler frequencies in Hz: (CenterFrequency in Hz)  dwSpeedInKmPerHour / ( 3.6  3e8 )
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SMbmsRsCinrChannelModel.dwMaxSpeedInKmh">
            <summary>
Maximum speed, 250 km/h.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SMbmsRsCinrChannelModel.dwMinSpeedInKmh">
            <summary>
Minimum speed, 5 km/h.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SMbmsRsCinrChannelModel.dwIndoorMaxSpeedInKmh">
            <summary>
Typical 5 km/h for indoor environments.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SMbmsRsCinrChannelModel.dwOutdoorMaxSpeedInKmh">
            <summary>
Typical 100 km/h for outdoor environments.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SMbmsRsCinrChannelModel.dwDelaySpreadInNs">
            <summary>
The maximum expected delay spread (time difference of arrival) between the signal received from different RF paths.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SMbmsRsCinrChannelModel.dwMaxDelaySpreadInNs">
            <summary>
Maximum delay spread, 17 us.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SMbmsRsCinrChannelModel.dwMinDelaySpreadInNs">
            <summary>
Minimum delay spread, 16 us.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SMbmsRsCinrChannelModel.dwDefaultDelaySpreadInNs">
            <summary>
Default delay spread, 16.667 us.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SMbmsRsCinrChannelModel.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SMbmsRsCinrChannelModel">
            <summary>
Channel model for RS-CINR measurements performed on MBSFN areas. See SRsCinrChannelModel.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SRsCinrChannelModel.dwSpeedInKmPerHour">
            <summary>
The maximum speed (velocity) of the measurement platform in km / h. The relative platform to base station velocity gives the rise to the maximum Doppler frequencies in Hz: (CenterFrequency in Hz)  dwSpeedInKmPerHour / ( 3.6  3e8 )
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SRsCinrChannelModel.dwMaxSpeedInKmh">
            <summary>
Maximum speed, 350 km/h.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SRsCinrChannelModel.dwMinSpeedInKmh">
            <summary>
Minimum speed, 5 km/h.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SRsCinrChannelModel.dwIndoorMaxSpeedInKmh">
            <summary>
Typical 5 km/h for indoor environments.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SRsCinrChannelModel.dwOutdoorMaxSpeedInKmh">
            <summary>
Typical 100 km/h for outdoor environments.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SRsCinrChannelModel.dwDelaySpreadInNs">
            <summary>
The maximum expected delay spread (time difference of arrival) between the signal received from different RF paths.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SRsCinrChannelModel.dwMaxDelaySpreadInNs">
            <summary>
Maximum delay spread, 16 us.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SRsCinrChannelModel.dwMinDelaySpreadInNs">
            <summary>
Minimum delay spread, 0.5 us.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SRsCinrChannelModel.dwIndoorDelaySpreadInNs">
            <summary>
Typical 0.5 us for indoor environments.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SRsCinrChannelModel.dwOutdoorDelaySpreadInNs">
            <summary>
Typical 3 us for outdoor environments.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SRsCinrChannelModel.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings.SRsCinrChannelModel">
            <summary>
In the RS-CINR calculation a channel model is used to specify limits for maximum Doppler frequency and maximum delay spread. This model is used to separate reference signal power and interference power. If the model allows less freedom (maximal possible variation) to Doppler frequency and delay spread the RS-CINR result accuracy may be improved. The measurement accuracy may not be guaranteed if true signal propagation parameters exceed the limits specified in the channel model!
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SChannelSettings">
            <summary>
This structure holds the measurement setup for the LTE measurement. It basically consists of the set of frequencies that shall be measured.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.enDssMode">
            <summary>
DSS configuration control mode. Specifies how the DSS configuration is determined by the LTE scanner.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.LteMSettings">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.MbmsSettings">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.MbmsManualConfig">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.MimoSettings">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.RssiSettings">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.WidebandRsCinrSettings">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.enMbmsConfigCtrlMode">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SSyncToPSyncRatio">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.enSSyncToPSyncRatioType">
            <summary>
Specify what kind of S-SYNC to P-SYNC ratios are specified in the SSyncToPSyncRatio member, either the list of ratio values or a range.
A power ratio is specified in dB. A value of 0 means that both signals have the same power, a value of 3 means the S-SYNC has a signal power which is about two times stronger than the on the P-SYNC.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.wNumberOfResourceBlocks">
            <summary>
Number of resource blocks to use for this channel, if BandwidthCtrlMode is set to BW_KNOWN. E.g. 50 RB's for 10 MHz channel bandwidth.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.wNumberOfResourceBlocksFor20000kHzChBw">
            <summary>
20 MHz LTE channel bandwidth.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.wNumberOfResourceBlocksFor15000kHzChBw">
            <summary>
15 MHz LTE channel bandwidth.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.wNumberOfResourceBlocksFor10000kHzChBw">
            <summary>
10 MHz LTE channel bandwidth.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.wNumberOfResourceBlocksFor5000kHzChBw">
            <summary>
5 MHz LTE channel bandwidth.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.wNumberOfResourceBlocksFor3000kHzChBw">
            <summary>
3 MHz LTE channel bandwidth.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.wNumberOfResourceBlocksFor1400kHzChBw">
            <summary>
1.4 MHz LTE channel bandwidth.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.enBandwidthCtrlMode">
            <summary>
Bandwidth control mode.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.bEnableAdditionalReferenceSignalSynchronisation">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.wSpecialSubframe6ConfigurationMask">
            <summary>
This value is used for RSRP and RSRQ measurements in TDD configurations. When no bit is set than no RSRP measurement is done in TDD networks. Else we try the given special subframe configuration specified by the bits set. E.g. when special subframe configuration 2 and 4 is possible in the network than bit 2 (1&lt;&lt;2) and 4 (1&lt;&lt;4) shall be set. Configuration 0 to 9 are supported.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.wSpecialSubframe1ConfigurationMask">
            <summary>
This value is used for RSRP and RSRQ measurements in TDD configurations. When no bit is set than no RSRP measurement is done in TDD networks. Else we try the given special subframe configuration specified by the bits set. E.g. when special subframe configuration 2 and 4 is possible in the network than bit 2 (1&lt;&lt;2) and 4 (1&lt;&lt;4) shall be set. Configuration 0 to 9 are supported.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.wAllSpecialSubFrameConfigurations">
            <summary>
Special subframe configuration 0 to 9.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.bUpDownLinkMask">
            <summary>
This value is used for RSRP and RSRQ measurements in TDD configurations. When no bit is set than no RSRP measurement is done in TDD networks. Else we try the given uplink-downlink configuration specified by the bits set. E.g. when uplink-downlink configuration 2 and 4 is possible in the network than bit 2 (1&lt;&lt;2) and 4 (1&lt;&lt;4) shall be set. Configuration 0 to 6 are supported.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.bAllUpDownLinkConfigurations">
            <summary>
Uplink-downlink configuration 0 to 6.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.wNarrowbandRefSignalMeasMode">
            <summary>
Narrowband Reference Signal measurement modes. Used to configure if narrowband RSRP/Q and RS-CINR measurements shall be done or not. 0 means no measurements. Measurements are performed only if enMbmsConfigCtrlMode is set to MBMS_NOT_PRESENT. Note that the carrier sections are only than on resource block boundaries, when the total number of resource blocks is even (e.g. in 10 MHz or 20MHz). If the number of resource blocks is odd (e.g. in 5MHz bandwidth) the boundary of the measurement sections are in the middle of a resource block. That gives a reason to use sub band notation in kHz rather than Resource Block notation. For other measurements see defines above. wNARROWBAND_RSRP_RSRQ is used to generally activate narrowband RSRP/Q and RS-CINR measurements. Any combination of wCENTER_RSCINR_xxx is allowed. As the 1 MHz input filter is designed for SYNC signal measurements we produce some internal interference with this filter. This interference can be taken into account for the RS-CINR measurement. Therefore optionally set one of the two w1MHZ_FILTERN_NOISE_FOR_xxx defines. The narrwoband RS-CINR measurement is a requirement for wideband RS-CINR measurements. Therefore set a least wNARROWBAND_RSRP_RSRQ | wCENTER_RSCINR_6x180KHZ if you want to do wideband RS-CINR measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.wNARROWBAND_RSRP_RSRQ">
            <summary>
Enable narrowband RSRP/Q and RS-CINR measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.wCENTER_RSCINR_6x180KHZ">
            <summary>
The reference carrier narrowband RS-CINR is measured in 6 sections within the innermost 1080 kHz band of the LTE channel.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.wCENTER_RSCINR_3x360KHZ">
            <summary>
The reference carrier narrowband RS-CINR is measured in 3 sections within the innermost 1080 kHz band of the LTE channel.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.wCENTER_RSCINR_2x540KHZ">
            <summary>
The reference carrier narrowband RS-CINR is measured in 2 sections within the innermost 1080 kHz band of the LTE channel.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.wCENTER_RSCINR_1x1080KHZ">
            <summary>
The reference carrier narrowband RS-CINR is measured in 1 section within the innermost 1080 kHz band of the LTE channel.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.w1MHZ_FILTER_NOISE_FOR_6RB">
            <summary>
Filter noise reduction for the narrowband RS-CINR calculation assuming a narrowband LTE signal (BW = 1.4 MHz / 6 RBs). This is done only for RS-CINR values &gt; 20 dB.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.w1MHZ_FILTER_NOISE_FOR_15RB">
            <summary>
Filter noise reduction for the narrowband RS-CINR calculation assuming a wideband LTE signal (BW &gt;= 3 MHz). This is done only for RS-CINR values &gt; 20 dB.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.dwAvgBlockCountPer1000Sec">
            <summary>
Averaged measurement rate in 0.001 Hertz. The device attempts to perform the desired number of measurements, but it is not guaranteed that the number of measurements is performed each second. In general, the device tries to achieve the desired rate averaged over a longer period of time. For default value and range see GetMeasRateLimits().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.enFrameStructureType">
            <summary>
Frame structure type of the channel aka duplex mode: FDD or TDD
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.dwSymbolsPerSlotMask">
            <summary>
Number of OFDM symbols per slot. Can be any combination of dwLTE_xSYMBOLS constants as defined above. Must not be 0.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.dwDefaultSymbolsPerSlot">
            <summary>
Default symbol configuration that should be used to set dwSymbolsPerSlotMask if no details are known about the network to be measured upfront.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.dwLTE_7SYMBOLS">
            <summary>
7 OFDM Symbols
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.dwLTE_6SYMBOLS">
            <summary>
6 OFDM Symbols
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.dCenterFrequencyInHz">
            <summary>
The center frequency on which the LTE signals shall be measured. For value range see SReceiver::SSupportedFrequencies.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.dwFrontEndSelectionMask">
            <summary>
Receiver front end to be used by the scanner for this channel. This is only used for narrowband measurement tasks, not for wideband measurements / demodulation.
Narrowband scanner tasks are not allowed to contain multiple FE's.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.DssMode.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.DssMode.Type.DISABLED">
            <summary>
Disable DSS tolerant mode. In this mode the scanner immediately starts to measure on LTE reference signals. Only to be used in case there's no DSS deployment on the configured channel. If unsure enable DSS tolerant mode.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.DssMode.Type.ENABLED">
            <summary>
Enable DSS tolerant mode. In this mode the scanner will not start to measure on LTE reference signals until a SIB2 has been decoded. SIB2 contains information which LTE subframes are used for NR signals.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.DssMode.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.DssMode">
            <summary>
DSS configuration control modes. Specifies how the DSS configuration is determined by the LTE scanner.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SLteMSettings.wLteMMeasMode">
            <summary>
LTE-M measurement modes. Used to configure which types of measurements will be performed. Set to 0 to disable LTE-M scanner measurements on this channel.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SLteMSettings.wLTE_M_RS_MEAS">
            <summary>
Enable LTE-M reference signal measurements with the receiver front end selected for narrowband measurements.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SLteMSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SLteMSettings">
            <summary>
Configuration for LTE-M measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMbmsSettings.dwMaxSubframeRatePer1000Sec">
            <summary>
Maximum allowed eMBMS subframe measurement rate in units of 0.001 Hz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMbmsSettings.wMbmsMeasMode">
            <summary>
eMBMS measurement modes. Used to configure which types of measurements will be performed. Set to 0 to disable eMBMS scanner measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMbmsSettings.wMBSFN_RS_MEAS">
            <summary>
Enable MBSFN area reference signal measurements with the receiver front end selected for narrowband measurements.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMbmsSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMbmsSettings">
            <summary>
Configuration for eMBMS measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMbmsManualConfig.bRadioFrameAllocationOffset">
            <summary>
The frame offset to determine the start of an MBSFN broadcast. The range of valid values is [0, 7].
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMbmsManualConfig.bRadioFrameAllocationPeriod">
            <summary>
The count of radio frames that occur from the first frame of an MBSFN broadcast to the first frame of the following MBSFN broadcast. MBSFN broadcasts contain one or four frames, as indicated by bOneFrameOrFourFrames.
The set of valid values is {1, 2, 4, 8, 16, 32}.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMbmsManualConfig.bOneFrameOrFourFrames">
            <summary>
Indicates if the dwSubframeAllocationBitMap contains the MBSFN subframe mapping for one frame or four consecutive frames. The set of valid values is {1, 4}.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMbmsManualConfig.dwSubframeAllocationBitMap">
            <summary>
Indicates which subframes in an MBSFN frame are allocated for MBSFN.
If bOneFrameOrFourFrames is 1, then dwSubframeAllocationBitMap is a 6-bit value (that is, the value is masked by 0x3F == 0b111111) that indicates which subframes in one MBSFN frame are allocated for MBSFN.
For FDD and 'oneFrame', subframes #1, #2, #3, #6, #7, and #8 can be allocated for MBSFN. Respectively, positions 5, 4, 3, 2, 1, and 0 (where position 0 refers to the least significant bit) of dwSubframeAllocationBitMap indicate which of these subframes are actually allocated for MBSFN.
For TDD and 'oneFrame', subframes #3, #4, #7, #8, and #9 can be allocated for MBSFN, and, similarly, positions 5, 4, 3, 2, and 1 of dwSubframeAllocationBitMap indicate which of these subframes are actually allocated for MBSFN. For TDD, the bit in position 0 is ignored.
If bOneFrameOrFourFrames is 4, then dwSubframeAllocationBitMap is a 24-bit value (that is, the value is masked by 0xFFFFFF == 0b111111111111111111111111) that indicates which subframes in four consecutive MBSFN frames are allocated for MBSFN.
The 'fourFrames' cases are similar to the 'oneFrame' cases above, except each of the four 6-bit chunks of the 24-bit value indicates which subframes are allocated for MBSFN for one of the four MBSFN frames. The most significant 6-bit chunk corresponds to the first frame, and so on.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMbmsManualConfig.bMcchModificationPeriod">
            <summary>
Indicates the minimum count of radio frames that must occur between transmissions of MCCH information for the contents of the transmissions to be different. The set of valid values is {512, 1024}.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMbmsManualConfig.bMcchRepetitionPeriod">
            <summary>
Specifies the interval between transmissions of MCCH information in radio frames. The set of valid values is {32, 64, 128, 256}.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMbmsManualConfig.bSignallingMCS">
            <summary>
Indicates the Modulation and Coding Scheme (MCS) used for applicable subframes in the MBSFN area. The set of valid values is {2, 7, 13, 19}.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMbmsManualConfig.bSfAllocInfoBitMap">
            <summary>
Indicates which subframes carry MCCH information for applicable radio frames. bSfAllocInfoBitMap is a 6-bit value (that is, the value is masked by 0x3F == 0b111111).
For FDD, subframes #1, #2, #3, #6, #7, and #8 may carry MCCH information. Respectively, positions 5, 4, 3, 2, 1, and 0 (where position 0 refers to the least significant bit) of bSfAllocInfoBitMap indicate which of these subframes actually carry MCCH information.
For TDD, subframes #3, #4, #7, #8, and #9 may carry MCCH information, and, similarly, positions 5, 4, 3, 2, and 1 of bSfAllocInfoBitMap indicate which of these subframes actually carry MCCH information. For TDD, the bit in position 0 is ignored.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMbmsManualConfig.bMcchOffset">
            <summary>
The frame offset to determine the initial radio frame containing MCCH information. The range of valid values is [0, 7].
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMbmsManualConfig.bNotificationIndicator">
            <summary>
Indicates the position of the bit corresponding to the MBSFN area in the MCCH information change notification. Value 0 corresponds with the least significant bit and so on.
The range of valid values is [0, 7].
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMbmsManualConfig.bNonMbsfnRegionLength">
            <summary>
The count of symbols present in each MBSFN subframe that constitute the non-MBFSN region. The range of valid values is [1, 2].
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMbmsManualConfig.bMbsfnAreaId">
            <summary>
MBSFN area ID. The range of valid values is [0, 255].
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMbmsManualConfig.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMbmsManualConfig">
            <summary>
Configuration for MBMS. This is only used if SFrequencySetting::enMbmsConfigCtrlMode is set to MBMS_CONFIG_MANUAL. Additional information for these fields can be found in 3GPP TS 36.331 section 6.3.7. See MBSFN-AreaInfo, MBMS-NotificationConfig, and MBSFN-SubframeConfig.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMimoSettings.bEnableThroughputEstimation">
            <summary>
Enables throughput estimation to get results for estimated channel capacity and estimated CQI.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMimoSettings.sMinRsCinrInDB100">
            <summary>
The minimum required reference signal CINR value in 0.01 dB (obtained from the narrowband LTE scanner) for the eNodeB to enable the measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMimoSettings.wMaxRsrpDiffToBestCellInDB100">
            <summary>
The maximum difference (distance) allowed in subband RSRP in 0.01 dB (obtained from the narrowband LTE scanner) from the best received eNodeB to enable the measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMimoSettings.sMinCenterRsrpInDBm100">
            <summary>
The minimum required subband RSRP value in 0.01 dB (obtained from the narrowband LTE scanner) for the eNodeB to enable the measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMimoSettings.bMaxCountOfeNodeBs">
            <summary>
Maximum number of eNodeB's per channel index for which MIMO measurements shall be done.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMimoSettings.sCinrThresholdForRankInDB100">
            <summary>
Minimum CINR for a MIMO layer to be included in the rank calculation in 0.01 dB.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMimoSettings.dwMimoResultMaskFor4x4">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMimoSettings.dwMimoResultMaskFor2x4">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMimoSettings.dwMimoResultMaskFor2x2">
            <summary>
MIMO result selection masks for 2x2, 2x4 and 4x4 MIMO measurements. Can be any combination of dwMIMO_RES_xxx constants as defined above.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMimoSettings.dwMIMO_RES_RANK">
            <summary>
Enables the return of the theoretical rank of the H matrix with respect to a specified CINR ratio for the minimum rank. For 2x2, 2x4 and 4x4 MIMO measurements each rank value is returned.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMimoSettings.dwMIMO_RES_COND_NUMBER">
            <summary>
Enables the return of the condition numbers for all measured H matrices. A condition number is returned for each of the enabled 2x2, 2x4 and 4x4 MIMO measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMimoSettings.dwMIMO_RES_CHAN_MATRIX">
            <summary>
Enables the return of the MIMO channel matrix (H matrix) If 2x2 and 2x4 MIMO measurements are enabled, only the 2x4 matrix is returned, since the 2x2 matrix is a subset of the 2x4 matrix. Similarly, if 4x4 MIMO measurements are enabled, only the 4x4 matrix is returned.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMimoSettings.wTimeResolutionInMs">
            <summary>
Defines the time interval between MIMO measurements which are calculated per resource block at a give time position within the captured IQ data. For example wTimeResolutionInMs of 5ms and 50ms of captured IQ data leads to up to 10 results. For TDD the time resolution has to be a multiple of the 10 ms LTE frame duration. Set to 0 for only one result per IQ acquisition.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMimoSettings.wMimoMeasMode">
            <summary>
MIMO measurement configuration. Use wMIMO_MODE_xxx constants defined above. Set to 0 if no MIMO measurement should be done. Use SFrequencySettings::wNarrowbandRefSignalMeasMode to enable narrowband RS-CINR, as these results are required for MIMO!
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMimoSettings.wMIMO_MODE_4x4">
            <summary>
Enable 4x4 MIMO measurements for an eNodeB as soon as transmit antenna port 0, 1, 2 and 3 have been detected by the scanner.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMimoSettings.wMIMO_MODE_2x4">
            <summary>
Enable 2x4 MIMO measurements for an eNodeB as soon as transmit antenna port 0, 1, 2 and 3 have been detected by the scanner.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMimoSettings.wMIMO_MODE_2x2">
            <summary>
Enable 2x2 MIMO measurements for an eNodeB as soon as transmit antenna port 0 and 1 have been detected by the scanner.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMimoSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SMimoSettings">
            <summary>
Configuration for MIMO measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SRssiSettings.dwFrontEndSelectionMask">
            <summary>
Specify which TSMW FE should be used for RSSI measurements. For TSMW this could either be SRFPort::RF_1 or SRFPort::RF_2 or both.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SRssiSettings.wRssiMeasMode">
            <summary>
Rssi measurement configuration. Can be any combination of wRSSI_xxx_MODE constants as defined above. 0 means no measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SRssiSettings.wRSSI_TDD_GP_MODE">
            <summary>
The TDD guard period (GP) measurements are done as soon as the uplink downlink configuration for the channel is available. Please activate SIB1 and SIB2 demodulation for best accuracy.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SRssiSettings.wRSSI_DL_ALL_TS_MODE">
            <summary>
One RSSI measurement for each downlink slot (0.5ms) will be performed over a whole frame (10ms). This measurement is synchronized with frame boundary of the strongest detected LTE cell. This measurement can be used for both FDD and TDD networks.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SRssiSettings.wRSSI_TDD_DL_MODE">
            <summary>
The TDD uplink RSSI and spectrum measurements are done as soon as the uplink downlink configuration for the channel is available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SRssiSettings.wRSSI_TDD_UL_MODE">
            <summary>
The TDD downlink RSSI and spectrum measurements are done as soon as the uplink downlink configuration for the channel is available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SRssiSettings.wRSSI_NORMAL_MODE">
            <summary>
The RSSI and spectrum measurements are done for a certain time range without respect to frame configuration (e.g. uplink down- link for TDD)
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SRssiSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SRssiSettings">
            <summary>
Configuration for full-channelbandwidth RSSI and spectrum measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SWidebandRsCinrSettings.bTransmitAntennaSelectionMask">
            <summary>
Specifies a set of transmit antenna ports to use for the measurements. At least one bit has to be set. E.g. for transmit antenna port 0 and 3, bit 0 (1&lt;&lt;0) and 3 (1&lt;&lt;3) shall be set.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SWidebandRsCinrSettings.dwFrontEndSelectionMask">
            <summary>
Specify which FE should be used for wideband RS/CINR measurements and MIMO measurements. In case of SMimoSettings::wMimoMeasMode != 0 at least two front ends have to be specified. For TSMW this could either be SRFPort::RF_1 or SRFPort::RF_2 or both.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SWidebandRsCinrSettings.sMinRsCinrInDB100">
            <summary>
The minimum required reference signal CINR value in 0.01 dB (obtained from the narrowband LTE scanner) for the eNodeB to enable the subband measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SWidebandRsCinrSettings.wMaxRsrpDiffToBestCellInDB100">
            <summary>
The maximum difference (distance) allowed in subband RSRP in 0.01 dB (obtained from the narrowband LTE scanner) from the best received eNodeB to enable the subband measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SWidebandRsCinrSettings.sMinCenterRsrpInDBm100">
            <summary>
The minimum required subband RSRP value in 0.01 dB (obtained from the narrowband LTE scanner) for the eNodeB to enable the subband measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SWidebandRsCinrSettings.bMaxCountOfeNodeBs">
            <summary>
Maximum number of eNodeB's per channel index for which wideband RS-CINR, RSRP / Q measurements shall be done. This limitation is only valid for subband measurements, e.g. when wSUBBAND_MEASUREMENTS is set.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SWidebandRsCinrSettings.bForceNoGap">
            <summary>
If set to true, then wNumberOfRBsInSubband gets adjusted to avoid gaps between subbands. If wNumberOfRBsInSubband is not a divider of the total number of resource blocks in the LTE bandwidth, then possible gaps between subbands around the DC subcarrier are eliminated by automatically increasing the subbandwidth.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SWidebandRsCinrSettings.wNumberOfRBsInSubband">
            <summary>
Number of resource blocks to specify the subband size for the wideband RS-CINR calculation if wSUBBAND_MEASUREMENTS is set. For LTE-FDD channel types 1 resource block is recommended. In LTE-TDD configurations with a low number of downlink subframes wNumberOfRBsInSubband &gt; 1 may improve the accuracy of the wideband RS-CINR measurement results. E.g. in LTE-TDD some subframe configurations have only 2 DL subframes per frame. In this case, the subband will need to be wider to gather enough reference signals for an equivalent accuracy in the wideband RS-CINR measurement as in LTE-FDD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SWidebandRsCinrSettings.wMaxRBsInSubband">
            <summary>
Maximum resource blocks for wNumberOfRBsInSubband.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SWidebandRsCinrSettings.wMinRBsInSubband">
            <summary>
Minimum resource blocks for wNumberOfRBsInSubband.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SWidebandRsCinrSettings.dwAvgBlockCountPer1000Sec">
            <summary>
Averaged measurement rate in Hertz. The device attempts to perform the desired number of measurements, but it is not guaranteed that the number of measurements is performed each second. In general, the device tries to achieve the desired rate averaged over a longer period of time. For default value and range see GetWbMeasRateLimits().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SWidebandRsCinrSettings.wWidebandRsCinrMeasMode">
            <summary>
Wideband Reference Signal measurement modes. Used to configure if wideband RS-CINR measurements shall be done or not. 0 means no measurements. Use SFrequencySettings::wNarrowbandRefSignalMeasMode to enable narrowband RS-CINR, as these results are required for wideband RS-CINR! Subband measurements are not possible for signals having S-SYNC CINR &lt; -5 dB!
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SWidebandRsCinrSettings.wSUBBAND_MEASUREMENTS">
            <summary>
Enable additional subband measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SWidebandRsCinrSettings.wWIDEBAND_RS_CINR">
            <summary>
Enable wideband RS-CINR measurements.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SWidebandRsCinrSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SWidebandRsCinrSettings">
            <summary>
Configuration for wideband RS-CINR measurements.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.MbmsConfigCtrlMode.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.MbmsConfigCtrlMode.Type.MBMS_NOT_PRESENT">
            <summary>
MIMO scanner measurements are performed on all subframes.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.MbmsConfigCtrlMode.Type.MBMS_CONFIG_MANUAL">
            <summary>
The MBMS configuration is determined by the values set in SFrequencySetting::MbmsManualConfig.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.MbmsConfigCtrlMode.Type.MBMS_CONFIG_AUTO">
            <summary>
The MBMS configuration for each cell is determined by the SIB2 and SIB13 detected for that cell. Demodulation requests for SIB2 and SIB13 must be configured manually in this case. Minimally, requests should have eDemodulationMode set to DemodMode::ONCE, which will cause the first MBMS configuration detected to be used for the remainder of the measurement. Prior to MBMS configuration detection, MIMO scanner measurements are only performed on subframes guaranteed to be non-MBFSN subframes. This mode ignores values set in SFrequencySetting::MbmsManualConfig.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.MbmsConfigCtrlMode.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.MbmsConfigCtrlMode">
            <summary>
MBMS configuration control mode. Specifies how the MBMS configuration is determined by the MIMO, MBMS and LTE-M scanners.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SSyncToPSyncRatioSettings.RatioRange">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SSyncToPSyncRatioSettings.RatioList">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SSyncToPSyncRatioSettings.sMaxSSyncToPSyncRatioInDB">
            <summary>
Maximum allowed value for _StructRatioList::afSSyncToPSyncRatioInDB and _StructRatioRange::fUpperRatioInDB
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SSyncToPSyncRatioSettings.sMinSSyncToPSyncRatioInDB">
            <summary>
Minimum allowed value for _StructRatioList::afSSyncToPSyncRatioInDB and _StructRatioRange::fLowerRatioInDB
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SSyncToPSyncRatioSettings.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SSyncToPSyncRatioSettings._StructRatioRange.fUpperRatioInDB">
            <summary>
The highest ratio that shall apply to the relation between P-SYNC and S-SYNC. Possible values are in between fLowerRatioInDB and fUpperRatioInDB.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SSyncToPSyncRatioSettings._StructRatioRange.fLowerRatioInDB">
            <summary>
The lowest ratio that shall apply to the relation between P-SYNC and S-SYNC. Possible values are in between fLowerRatioInDB and fUpperRatioInDB.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SSyncToPSyncRatioSettings._StructRatioRange.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SSyncToPSyncRatioSettings._StructRatioRange">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SSyncToPSyncRatioSettings._StructRatioList.dwValueCount">
            <summary>
A value between 1 and 6, specifying how many of the values stored in afSSyncToPSyncRatioInDB array shall be used.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SSyncToPSyncRatioSettings._StructRatioList.afSSyncToPSyncRatioInDB">
            <summary>
1 to 6 valid power ratios; The values need not to be ordered because ordering is done internally.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SSyncToPSyncRatioSettings._StructRatioList.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SSyncToPSyncRatioSettings._StructRatioList">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SSyncToPSyncRatioSettings">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SSyncToPSyncRatioType.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SSyncToPSyncRatioType.Type.RatioRange">
            <summary>
use settings stored in SSyncToPSyncRatioSettings::RatioRange
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SSyncToPSyncRatioType.Type.RatioList">
            <summary>
use settings stored in SSyncToPSyncRatioSettings::RatioList
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SSyncToPSyncRatioType.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.SSyncToPSyncRatioType">
            <summary>
To improve the synchronization speed of the LTE scanner, it is possible to define power ratios between the S-SYNC and the P-SYNC channel. These ratios are used to find the two channels in the signal that has been measured.
One way is to define up to 6 fixed ratios for the power ratio between the P-SYNC and the S-SYNC channel. The list of these values is used to find such a constellation of S-SYNC and P-SYNC on the carrier. There is no interpolation or similar applied to them, each value is tested if a matching sequence can be found.
The other possibility is to define a range in which the power ratio must reside. This is the more general approach if less information about the network(s) measured is known upfront.
Note that the scanner will also synchronize if those values are of no help, but it'll take somewhat longer to do so.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.BandwidthCtrlMode.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.BandwidthCtrlMode.Type.BW_FROM_MIB_ONCE_EACH_CELL">
            <summary>
This mode uses the MIB from each detected cell ID to determine the bandwidth for that cell. This mode handles the scenario where different cell IDs on the same channel frequency may have different bandwidth configurations. Note: This mode is less efficient and requires more resources than modes LTE_BW_FROM_MIB_ONCE or LTE_BW_KNOWN, therefore if it is known that all cells have the same bandwidth configuration, it is recommend that one of the other modes be used.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.BandwidthCtrlMode.Type.BW_FROM_MIB_ONCE">
            <summary>
This mode uses the MIB from the first detected cell ID to determine the bandwidth for all eNodeB's on this channel.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.BandwidthCtrlMode.Type.BW_KNOWN">
            <summary>
The number of eNobeB resource blocks is taken from wNumberOfResourceBlocks. This mode shortens the delay to first measurement results, as no MIB needs to be decoded up-front.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.BandwidthCtrlMode.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting.BandwidthCtrlMode">
            <summary>
Bandwidth control modes. Used to configure if the number of resource blocks to use for wideband, MIMO and LTE-M measurements on this channel shall be determined from a MIB or are known before.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SFrequencySetting">
            <summary>
Configuration of the measurement that is performed on one single frequency.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelState.dMbmsScannerRateInHz">
            <summary>
eMBMS measurement rate in Hertz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelState.dWidebandScannerRateInHz">
            <summary>
Wideband measurement rate in Hertz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelState.dNarrowbandScannerRateInHz">
            <summary>
Individual rates for each measurement type.
@note
dNarrowBandScannerRateInHz &gt; 0 is required if bIsEnabled is TRUE Narrowband measurement rate in Hertz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelState.bIsEnabled">
            <summary>
TRUE - this channel is currently active. FALSE - all channel measurements are switched off (measurement rates below are preserved for future use).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelState.dwChannelIndex">
            <summary>
The channel index for this measurement settings information.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.SChannelState.ALL_ENABLED_CHANNELS">
            <summary>
Used in dwChannelIndex to change measurement rates for all active channels can only be used while bIsEnabled is enabled, and only affects currently enabled channels.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.SChannelState.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.SChannelState">
            <summary>
Struct containing the channel measurement settings that can be modified during a running measurement
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.LTE.FrameStructureType.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.FrameStructureType.Type.TDD">
            <summary>
Time Division Duplex Mode.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.LTE.FrameStructureType.Type.FDD">
            <summary>
Frequency Division Duplex Mode.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.FrameStructureType.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.LTE.FrameStructureType">
            <summary>
Definition of the channel type.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.LTE.CViComLteInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.LTE.SMeasResult&gt;*)">
   Unregister a formerly registered ScannerData listener to remove it from the list of objects that
   shall get notification about new measurement data.

   @param[in] pListener
      The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered
      objects, an error is indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.LTE.CViComLteInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.LTE.SMeasResult&gt;*)">
   Register a ScannerData listener that will be notified when new data is available. Note that it is
   important to Unregister the listener again once it is getting deleted, to avoid crashes.

   @note Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage,
   it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComLteInterface::GetResult() and vice versa.

   @param[in] pListener
      The object that shall be notified when new measurement data is available. This must not be
      null. If the listener has already been registered to the interface, it will not be
      registered a second time. Instead, an error will be indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.LTE.CViComLteInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.LTE.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsLong)">
   Issue a request to the Layer 3 Decoder to decode the PDU contained by rSL3DecoderRequest.
   If the data has been decoded successfully within the time given by dwTimeOutInMs,
   the method creates the SL3DecoderResult and the buffer within on the heap, fills in the Layer 3 Decoder result
   and returns a pointer to it.

   @param[in] rSL3DecoderRequest
      Contains the data that was the result of an LTE measurement and holds the PDU data that shall be decoded.

   @param[in] dwTimeOutInMs
      The time in milliseconds that the function should wait before returning an error, if the result buffer is empty.

   @return
      one measurement result on the heap, if the function succeeded. Otherwise NULL.
      Attention: The returned pointer is only valid until this function is called again.

</member>
        <member name="M:RohdeSchwarz.ViCom.LTE.CViComLteInterface.GetSettings">
   By means of the functions: SetConfiguration() internal settings
   of the PN-Scanner may be changed. The functions SelectReceiver() of CViComBasicInterface 
   change basic settings. Except for frequency settings all other settings have default values.
   By means of this function you can retrieve the PN-Scanner settings which apply at the moment for measurements to be started
   or during running measurements.
   Note that the result, like all other results too, is only for reading.
   To change settings the functions mentioned above should be used.

   @return
      pointer to a structure holding the current device settings. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.LTE.CViComLteInterface.IssueDemodRequests(RohdeSchwarz.ViCom.LTE.SDemodRequests!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   Use this function to issue commands (PDU requests, reset commands) for the BCH demodulator during measurement.

   PDUs may be acquired for certain eNodeBs. PDU demodulation for eNodeBs or for channels may be reset.

   @param[in] rDemodRequests
   When the function is called, this pointer contains the request parameters.
   For details see SDemodRequests.

</member>
        <member name="M:RohdeSchwarz.ViCom.LTE.CViComLteInterface.GetChannelState(System.UInt32!System.Runtime.CompilerServices.IsLong)">
   GetChannelState returns the current status of the configurable settings from the channel.

   @param[in] dwChannelIndex
      Specifies the 0-basd channel index to be queried.

   @return
      Returns an object of SChannelState which contains the current state for the channel.  The items
      in SChannelState can be modified during a running measurement using the ModifyChannel method.
      @sa SChannelState and ModifyChannel.

</member>
        <member name="M:RohdeSchwarz.ViCom.LTE.CViComLteInterface.ModifyChannel(RohdeSchwarz.ViCom.LTE.SChannelState!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   ModifyChannel is used to modify configurable channel settings during a running measurement.
   @sa SChannelState for items that can be modified.

   @param[in] sChannelState
      sChannelState contains the modified settings to be changed in the channel.

</member>
        <member name="M:RohdeSchwarz.ViCom.LTE.CViComLteInterface.AddChannel(System.Double,RohdeSchwarz.ViCom.LTE.FrameStructureType.Type)">
   AddChannel is used to create additional channels during a running measurement.  The measurement settings from channel index
   0, as configured by SetConfiguration(), are used for the new channel.
   @note This method can not be called in the idle state (IsMeasurementStarted() must return TRUE)
   @note Each channel combination can only be added once. Attempting to add a combination multiple times will return the index that is already present.

   @param[in] dChannelFrequencyInHz
      Center frequency in Hertz for the channel.

   @param[in] frameStructure
      Frame structure for the channel (TDD/FDD).

   @return
      If success, the 0-based channel index for new channel is returned.  If failure, 0xFFFFFFFF is returned indicating an invalid channel.

</member>
        <member name="M:RohdeSchwarz.ViCom.LTE.CViComLteInterface.SetConfiguration(RohdeSchwarz.ViCom.LTE.SChannelSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.LTE.SDemodulationSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   CViComLteInterfaceData::SChannelSettings contains the count of channels or frequencies and the table of frequencies in MHz.
   The frequency or channel index is counted from zero and referenced in other data e.g. BCH demodulation settings.
   The selection of new frequencies causes default settings for the BCH demodulation.

   This function also sets the general BCH demodulation properties, including the LTE Layer 3 PDUs that should
   be demodulated. Different sets of PDUs may be read from different BCH channels.

   @param[in] rChannelSettings
   Contains the definition which frequencies shall be measured. @see SChannelSettings for
   a more detailed description on those settings.

   @param[in] rDemodulationSettings
   Contains the definition which PDUs of BCH shall be measured. @see SDemodulationSettings for
   a more detailed description on those settings.

</member>
        <member name="M:RohdeSchwarz.ViCom.LTE.CViComLteInterface.GetDemodThresholdLimits">
   Limits for Parameter SDemodulationSettings::sSINRThresholdDB100

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.LTE.CViComLteInterface.GetMbmsMeasRateLimits">
   Limits for Parameter SMbmsSettings::dwMaxSubframeRatePer1000Sec

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.LTE.CViComLteInterface.GetWbMeasRateLimits">
   Limits for Parameter SWidebandRsCinrSettings::dwAvgBlockCountPer1000Sec

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.LTE.CViComLteInterface.GetMeasRateLimits">
   Limits for Parameter SFrequencySettings::dwAvgBlockCountPer1000Sec

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.LTE.CViComLteInterface.GetChannelCountLimits">
   Limits for Parameter SChannelSettings::dwCount

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.LTE.CViComLteInterface.GetBasicInterface">
   The basic interface is a part of any application specific ViCom interface. It is used for different device applications.
   The purpose is to control basic device functions, which are not specific for a certain measurement.
   See CViComBasicInterface for specification of basic interface functions.

   @return
      reference to the BasicInterface object that can be used to control basic functions like
      StartMeasurement() and StopMeasurement() et al.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.CViComLteInterface">
LTE measurement module for ViCom. Offers the configuration and result receiving methods for all LTE related
measurement tasks.
\@attribute[type="interface" supportedDevices="TSME"]

</member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.channels">
            <summary>
List of channel measurement results for each channel detected by ACD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.measurementStatus">
            <summary>
Measurement status indicator
MeasurementStatus
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.acdResultTimeStampInMs">
            <summary>
PC local time when the ACD result was processed.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.additionalChannelInfo">
            <summary>
List of different bandwidth parts associated with a channel.
Each bandwidth part comes with the bandwidth, start/stop/center frequencies and a flag to indicate what the bandwidth part is.
ChannelInfoFlag for more information on which channel information types are supported.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.bandsAndChannels">
            <summary>
List of frequency bands and channel numbers for this channel.
For technologies that support overlapping frequency bands, where a RF channel frequency can belong to more than one band, an entry for each band ID and channel numbers is provided. For example, LTE Multi Frequency Band Indicator (MFBI)
@note
If the technology assigns a priority order to the bands, the entries in the list will be the sorted so that the first entry has highest priority, followed by bands in descending priority.
BandIdAndChannelNumber for more information.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.bandConfirmed">
            <summary>
True if the band information has been confirmed, False otherwise.
For some technologies (i.e. LTE), band information is verified from broadcast message decoding. For technologies with a known band, this will always be True.
bandsAndChannels.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.networkOperators">
            <summary>
List of network operator identifiers (MCC/MNC) for this channel.
For technologies that distinguish between primary and secondary network operators (i.e. LTE), the first entry in the list will be the primary identifier, followed by entries for any secondary identifiers.
NetworkOperator for more information.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.channelDirection">
            <summary>
Indicates if the channel is a downlink, uplink, or time division duplex (TDD) channel.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.rssiInDBm">
            <summary>
Measured received signal strength indicator (RSSI) value in dBm.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.bandwidthConfirmed">
            <summary>
For technologies that have variable channel bandwidths (i.e. LTE), this indicates if the bandwidth has been confirmed. For technologies with a known bandwidth, this will always be True.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.bandwidthInHz">
            <summary>
Bandwidth of the channel, in Hz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.frequencyInHz">
            <summary>
Channel frequency in Hz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.technology">
            <summary>
Technology indicator for this ACD measurement result. Only one technology is reported in each measurement result. For scanning on multiple technologies, separate results are returned.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.chanResultTimeStampInMs">
            <summary>
Timestamp of when this channel was measured last. GetTickCount() is used to provide the value, which is the number of milliseconds that have elapsed since the system was started. The value wraps after 49.7 days.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.ChannelInfo.stopFrequency">
            <summary>
Stop frequency in Hertz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.ChannelInfo.centerFrequency">
            <summary>
Center frequency in Hertz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.ChannelInfo.startFrequency">
            <summary>
Start frequency in Hertz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.ChannelInfo.bandWidth">
            <summary>
Bandwidth in Hertz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.ChannelInfo.channelInfoIndicator">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.ChannelInfo.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.ChannelInfo.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.ChannelInfo">
            <summary>
Frequencies and bandwidths for different bandwidth parts of a channel.
@note
Information is currently only available in ViCom when using FastACD with 5G NR.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.ChannelInfoFlag.TRANSMISSION">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.ChannelInfoFlag.CARRIER">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.ChannelInfoFlag.INITIAL">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.ChannelInfoFlag.SSBlock">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.ChannelInfoFlag.UNKNOWN">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.ChannelInfoFlag">
            <summary>
Flag to indicate which bandwidth part that the additional channel info is for.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.BandIdAndChannelNumber.channelNumber">
            <summary>
Channel number.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.BandIdAndChannelNumber.bandId">
            <summary>
Frequency band identifier.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.BandIdAndChannelNumber.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.BandIdAndChannelNumber.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.BandIdAndChannelNumber">
            <summary>
Frequency band and channel number pair for a technology.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.NetworkOperator.mnc">
            <summary>
Mobile Network Code (MNC) (NID when Technology::Type set to CDMA)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.NetworkOperator.mcc">
            <summary>
Mobile Country Code (MCC) (SID when Technology::Type set to CDMA)
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.NetworkOperator.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.NetworkOperator.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.NetworkOperator">
            <summary>
Definition of the network operator information. MCC and MNC values can have leading 0 and as a result they must be presented as a string. Pointer will never be nullptr.
@note
The CDMA/EVDO technology uses System Identifier (SID) and Network Identifier (NID) to define system and network operator information. These values are mapped into the mcc and mnc values of the Network Operator structure where MCC = SID and MNC = NID.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.Direction.TDD">
            <summary>
TDD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.Direction.UPLINK">
            <summary>
Uplink channel for FDD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.Direction.DOWNLINK">
            <summary>
Downlink channel for FDD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.Direction.UNKNOWN">
            <summary>
Unknown.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel.Direction">
            <summary>
Definition of link direction types.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.SChannel">
            <summary>
Container for channel specific information.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.MeasurementStatus.MONITORING">
            <summary>
Scanning for new channels with less resources.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.MeasurementStatus.DETECTION">
            <summary>
Initial detection of channels using more resources.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult.MeasurementStatus">
            <summary>
A status indicator to report when FastACD is using more system resources for quick channel detection, or after channels have been found it is using less system resources to monitor for new channels.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.FastACD.SMeasResult">
            <summary>
The ACD measurement result returned by ViComFastACDInterface.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.TechnologyState.isEnabled">
            <summary>
True is technology is actively scanned, False otherwise.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.FastACD.TechnologyState.technology">
            <summary>
Technology indicator.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.FastACD.TechnologyState.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.FastACD.TechnologyState">
            <summary>
State of the technology according to ViCom
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.FastACD.ViComFastACDInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.FastACD.SMeasResult&gt;*)">
   Unregister a formerly registered ResultDataListener to remove it from the list of objects that
   shall get notification about new measurement data.

   \sa RegisterResultDataListener

   @param[in] pListener
      The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered
      objects, an error is indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.FastACD.ViComFastACDInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.FastACD.SMeasResult&gt;*)">
   Register a ScannerData listener that will be notified when new data is available. Note that it is
   important to Unregister the listener again once it is getting deleted, to avoid crashes.

   For FastACD, there is more than a single ResultDataListener. FastACD comes with the default ResultDataListener
   to process a FastACD result. Depending on the ACD result, it can potentially have additional results specific
   to the technology the ACD result is associated with. When technology specific results are needed with FastACD,
   the other ResultDataListener must be used.

   @note  To avoid crashes, it is important to call UnregisterDataListener prior to deleting the interface.

   @param[in] pListener
      The object that shall be notified when new measurement data is available. This must not be
      null. If the listener has already been registered to the interface, it will not be
      registered a second time. Instead, an error will be indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.FastACD.ViComFastACDInterface.GetBasicInterface">
   The basic interface is a part of any application specific ViCom interface. It is used for different TSM applications.
   The purpose is to control basic TSM functions, which are not specific for a certain measurement.
   See CViComBasicInterface for specification of basic interface functions.

   @return
      reference to the BasicInterface object that can be used to control basic functions like
      StartMeasurement() and StopMeasurement() et al.

</member>
        <member name="M:RohdeSchwarz.ViCom.FastACD.ViComFastACDInterface.GetLteSettingsFrom(System.Double)">
   Returns information that can be used to configure a technology specific scanning interface. 
   Functions may be called during measurement or after a measurement.

   @param[in] dFrequencyInHz
      The frequency from a result from FastACD. Used to determine which SFrequencySetting to return.

   @return
      SFrequencySetting based on frequency and technology provided.  A nullptr is returned if the
      specified frequency has not been detected or if the technology specific information required 
      to fill in SFrequencySetting has not been received yet.


</member>
        <member name="M:RohdeSchwarz.ViCom.FastACD.ViComFastACDInterface.ResetConfiguration">
Clears configured technologies and configured bands.

</member>
        <member name="M:RohdeSchwarz.ViCom.FastACD.ViComFastACDInterface.RemoveBand(RohdeSchwarz.ViCom.Technology.Type,System.UInt32)">
   Removes a band from the measurement

   @param[in] technology
      The technology that the band is associated with.

   @param[in] band
      The band used for a measurement. Can either be a custom frequency band or a technology 
      specific frequency band.

</member>
        <member name="M:RohdeSchwarz.ViCom.FastACD.ViComFastACDInterface.AddCustomFrequencyBand(RohdeSchwarz.ViCom.Technology.Type,System.Double,System.Double,System.UInt32)">
   This function allows one to define their own frequency bands by specifying both a start and stop frequency. 
   If a non zero band is provided, that band information is configured with the new frequencies provided.

   @note Refer to notes for AddBand regarding GSM and CDMA technologies.

   @param[in] technology
      The technology in which this new frequency range will be applied to

   @param[in] startFrequencyInHz
      The start frequency of the range in Hz

   @param[in] stopFrequencyInHz
      The stop frequency of the range in Hz

   @param[in] band
      When 0, a band identifier will be generated by ViCom.  When non zero, the custom frequency band will 
      be assigned to the band specified.

   @return
      A generated band identifier to associate with the custom frequency band.

</member>
        <member name="M:RohdeSchwarz.ViCom.FastACD.ViComFastACDInterface.AddBand(RohdeSchwarz.ViCom.Technology.Type,System.UInt32)">
   Add a technology specific frequency band to ViCom.

   @note
   This function handles technology specific frequency bands by supplying a band number.  
   Refer to AddCustomFrequencyBand() to create custom frequency bands where start and stop
   frequency values are used.

   @par 
   Setting the technology value to Technology::CDMA implies CDMA2000, which includes 1xRTT,
   1X Advanced, and 1xEV-DO.  FastACD will search for both CDMA and EVDO channels in the
   band(s) requested; however, CDMA and EVDO channel detections will be reported to ViCom as 
   separate results.

   @par
   When the technology is set to Technology::GSM, use the table below to set the band number
   as there is no standard numerical value assigned to the bands in the 3GPP specification for GSM.  
   The values follow the Roman numerals as shown in section <b>2 Frequency bands and channel arrangement</b>
   of the specification.  Refer to TS 45.005 version 15.1.0 Release 15 for further information. GSM bands 
   using dynamic ARFCNs are not supported as indicated in the band list below.

   @verbatim
         GSM 380      1    (Unsupported)
         GSM 410      2    (Unsupported)
         GSM 450      3
         GSM 480      4
         GSM 710      5    (Unsupported)
         GSM 750      6    (Unsupported)
         GSM 810      7    (Unsupported)
         GSM 850      8
         P-GSM 900    9
         E-GSM 900   10
         R-GSM 900   11
         DCS 1800    13
         PCS 1900    14
         ER-GSM 900  15
   @endverbatim

   @param[in] technology
      An indicator used to assign the band to a specific technology, this avoids overlap with 
      with technologies that have similar bands.

   @param[in] band
      A band number associated with the technology specified.

</member>
        <member name="M:RohdeSchwarz.ViCom.FastACD.ViComFastACDInterface.SelectFrontEnd(System.UInt32)">
   Allows manual selection of the front end. Used when more than one front-end is connected.
   If a front end is not specified, will default to using SRFPort::RF_1 also known as
   front end one.

   When using AFE, this will indicate which frontends are allowed to be used by AFE.
   All other frontends available will be ignored by AFE. With AFE, if not specified
   AFE will attempt to use all all available front ends of a receiver for the measurement.

   Can be used as a bit mask, to select multiple front ends with AFE.

   @param[in] frontend
      Frontend that should be used. Filled using SRFPort structure.

</member>
        <member name="T:RohdeSchwarz.ViCom.FastACD.ViComFastACDInterface">
This class can be used to automatically detect channels without knowing the corresponding radio frequencies.

Note: All parameters are set by default. Functions only need to be called for minor tweaking!

Note: Front end selection is not available for FastACD at this moment. Front end selection will be added with
      the next release. When using multiple receivers, FE1 will automatically be assigned.

\@attribute[type="interface" supportedDevices="TSME"]

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SL3DecoderResult">
Result from the Layer 3 Decoder.

The string returned via this structure is formatted using the ASN.1 notation of the standard (3GPP TS 36.331).
It contains one completely decoded PDU terminated by CR+LF. Data subsets (i.e. Information Elements)
within the string are headed by "CR+LF+{", indented via spaces and terminated by "}+CR+LF".

In addition to the standard, some Information Elements are added twice (see example cellIdentity below):
1. Formatted exactly according to the standard.
2. Formatted with unit or format description between square brackets ("[" "]") and representing a reasonable value.

\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SL3DecoderRequest">
Request data container for the Layer 3 Decoder. Is used to decode a demodulation result into
a human-readable structure.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.pDemodResult">
Pointer to demodulation result. If nullptr, no demodulation result is present.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.SDemodResult.enOperationMode">
Determines if SSB is standalone or non-standalone mode. Only valid for PDU::MIB or PDU::SIB1.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.SDemodResult.pbKSsb">
Frequency domain offset between SSB and the overall resource block grid in number of subcarriers if pbKSsb is not nullptr.
For L_max=64 the value range is {0,1,..,15}, otherwise the value range is {0,1,..,31} (see TS 38.211, V15.4.0, Section 7.4.3.1).

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.SDemodResult.bSsbIndex">
SSB index of the beam the SS/PBCH block belongs to.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.SDemodResult.wPhysicalCellId">
The physical Cell ID, which can take one from the values defined by [0;1007].

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.SDemodResult.pbBitStream">
Pointer to (dwBitCount + 7) / 8 bytes which contain the PDU bits. The first bit is stored in the bit 7 of pbBitStream[0]. 
If dwBitCount is not a multiple of 8, the trailing bits in the last byte pbBitStream[(dwBitCount + 7) / 8 - 1] shall be ignored.
\@attribute[type="bitfield" size="dwBitCount" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.SDemodResult.dwBitCount">
Number of bits the PDU consists of.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.SDemodResult.ePDU">
PDU that has been demodulated

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.SDemodResult.dwStopTimeInMs">
This is the last time in ms of signals used for this message. 
All IQ signals used to produce this demodulation result are in between dwStartTimeInMs and dwStopTimeInMs.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.SDemodResult.dwStartTimeInMs">
This is the first time in ms of signals used for this message.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.SDemodResult.dwFirstBtsId">
The demodulator fills this parameter with the BTS ID the scanner assigned to this BTS first.
If later on, the scanner uses a different BTS ID, but after demodulation it is detected that it is the same eNodeB,
the demodulator fills this value with the first BTS ID the scanner used.  
Example: 
The scanner has measured a eNodeB with ID = 10 and the demodulator has demodulated it successfully. 
20 minutes later the scanner found signals of a eNodeB with ID = 55. After demodulating, the demodulator finds 
out (by comparing unique BTS information from decoding), that it is the same gNodeB as the one with ID = 10. 
In this case, dwFirstBtsId will be set to 10.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.SDemodResult.dwBtsId">
Unique BTS ID provided by the scanner as SSignals::Beam::dwScannerBtsIdent. Each time the scanner is not
sure whether the signal it could demodulate belongs to an already known gNodeB, it sets a new identifier
here. I.e. the same eNodeB could have multiple dwBtsIds, but each dwBtsId relates always to a single cell.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SMeasResult.SDemodResult">
BCH demodulator results
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.ListMeasurementRates">
List of measurement rates rates and other values in relation to the measurement rate for
one or more time intervals of measurement rate calculation. The measurement rate is
the ratio of all measurements of the same type of measurement at the time
the measurement signals have been picked from the air. So the time of arrival
at the host application is not used. And equal measurements at different RF channels are put together.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.pTimeGatedSpectrum">
Time gated spectrum result if not nullptr.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.STimeGatedSpectrumResult.ListOfSpectrumBins">
Measured time gated spectrum consisting of a list of sepctrum bins.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SMeasResult.STimeGatedSpectrumResult.SSpectrumBin">
Container for spectrum bins.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SMeasResult.STimeGatedSpectrumResult">
Container for a time gated spectrum measurement result.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.ListOfSignals">
The actual set of signals associated with the current channel specified
by the dwChannelIndex member.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.ListOfBeams">
The actual set of signals associated with the current channel and Physical Cell Id,
specified by the dwChannelIndex member and wPhysicalCellId.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.pTae">
Time alingment error (TAE) information.
\@attribute[filterable="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.Tae.ListOfResults">
The actual set of time alingment error (TAE) measurements associated with the current beam.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.Tae.Result.Mode">
Definition of TAE measurement modes.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.Tae.Result">
Container for TAE results.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.Tae.PreCondition">
Definition of TAE pre-conditions.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.Tae">
Container for time alingment error (TAE) information.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.pCir">
This is nullptr if no CIR information is available.
\@attribute[filterable="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.SCir.dFrameArrivalOffsetToBlockInS">
Time difference between Radio Frame Time of Arrival (TOA) and u64DeviceTimeInNs.
The time, when the maximum CIR peak has been received, is used as Radio Frame Time of Arrival.
This feature does not require a GPS antenna to be connected to the receiver.
If not valid set to DBL_MAX.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.SCir.dFrameToaOffsetToPpsInSec">
Time difference between Radio Frame Time of Arrival (TOA) and the latest PPS pulse received.
The time, when the maximum CIR peak has been received, is used as Radio Frame Time of Arrival.
This feature requires a GPS antenna to be connected to the receiver.
If not valid set to DBL_MAX.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.SCir.ListOfPeaks">
List of CIR peaks found in the signal.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.SCir.SPeak">
Contains information about the single peaks in the Channel Impulse Response.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.SCir.SPowerDelayProfile.SPowerDelayProfileValues">
               A (possibly empty) set of power delay values. This list contains the CIR power
               values, where each power value has been measured fSamplingTimeInSec seconds after the
               previous one. The first sample in here has been measured at u64DeviceTimeInNs resp.
               dwPcTimeStampInMs.

               The list may contain invalid values, which denote that at that specific time there
               was no CIR measurement possible.
               \@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.SCir.SPowerDelayProfile">
Structure containing the actual CIR measurement results combined with delay
information.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.SCir">
Data container that holds information about the channel impulse
responses measured in this cycle. The CIR consists of an optional power
delay profile, and a list of peaks.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.ListOfSsb">
Measurement results based on primary (PSS) and secondary sync (SSS), PBCH and DM-RS signals.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.Ssb">
Container for measurements based on the complete SSB consisting of primary (PSS) and secondary sync (SSS), PBCH and DM-RS signals.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.ListOfSssPbch">
Measurement results based on secondary sync (SSS) and PBCH signals.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.SssPbch">
Container for measurements based on secondary sync (SSS) and PBCH signals.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.ListOfDmRs">
Measurement results based on demodulation reference signals (DM-RS).

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.DmRs">
Container for measurements based on demodulation reference signals (DM-RS).
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.ListOfPbch">
Measurement results based on PBCH signals if pPbch.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.Pbch.pMib">
Measurement results for MIB based on PBCH signals if pMib is not nullptr.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.Pbch.Mib">
Container for MIB measurements based on PBCH signals, see 3GPP TS 38.331.
The raw PBCH bits are only measured once per SS/PBCH block.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.Pbch">
Container for measurements based on PBCH signals.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.ListOfSSync">
Measurement results based on secondary synchronization signals (SSS).

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.SSync">
Container for measurements based on secondary synchronization signals (SSS).
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.ListOfPSync">
Measurement results based on primary synchronization signals (PSS).

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.PSync">
Container for measurements based on primary synchronization signals (PSS).
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.fSsbRssiInDBm">
Average power of all resource elements carrying OFDM signals, interference and noise within all SSBlocks used for carrying out the measurement.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.wSsbIndexMod8">
SSB index Modulo 8 (3 LSBs) of the beam the SS/PBCH belongs to.
Is not necessarily available and may be set to SDefs::INVALID_WORD_VALUE.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.wSsbIndex">
SSB index (6 bit) of the beam the SS/PBCH block belongs to.
According to 3GPP only up to 8 beams are specified for FR1, in this case
wSsbIndex and wSsbIndexMod8 are the same.
Is not necessarily available and may be set to SDefs::INVALID_WORD_VALUE.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam.dwScannerBtsIdent">
         Internal ID assigned from the scanner to the SS/PBCH block of a specific gNodeB. Different
         SS/PBCH blocks will become different IDs assigned to them, but if the scanner cannot identify a block,
         it also might assign different IDs to the block. So two dwScannerBtsIdent values belong tho the same
         gNodeB in the case that only the 6 LSBs are different. For separating different SS/PBCH blocks the lower
         6 bits are used.

         @note
         This is unique only within one measurement. Do not use it when
         combining the results of different measurements

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.Beam">
Actual measurements per beam.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.enSSBPattern">
Detected subcarrier spacing used by the GNodeB

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.Signals.wPhysicalCellId">
Physical Cell ID 0 - 1007.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SMeasResult.Signals">
Actual measurement values for a single server.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.pfAvgInbandPowerInDBm">
The total average received power on this channel if not nullptr.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.dwPcTimeStampInMs">
PC local time when the signal was measured (or was started to being measured) on the device.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SMeasResult.dwChannelIndex">
The channel to which all the data relates is specified using this index.
The index refers to the position in the SChannelSettings::pTableOfFrequencySetting array.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SMeasResult">
The NR measurement result for a single channel returned by CViComNrInterface::GetResult().
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SSettings">
This structure holds all the measurement setup that is configured in the ViCom Nr scanner module. 
It is a result of the CViComNrInterface::GetSettings() method.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SDemodulationSettings.sStartMeasurementRequests">
The requests for the general start measurement command.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SDemodulationSettings.dwFrontEndSelectionMask">
Receiver front end to be used by the demodulator for this channel. 
If no demodulation shall be provided, this shall be set to 0.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SDemodulationSettings.sSINRThresholdDB100">
SINR threshold for demodulation, given in 1/100 dB.
For SINR All resource elements of the SS/PBCH block excluding the PSS symbol, so SSS, DM-RS and PBCH RE's
in the measured bandwidth are included.
For default value and range see GetDemodThresholdLimits().

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SDemodulationSettings">
This structure is used to configure the BCH demodulation process.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SDemodRequests.pDemodRequests">
Pointer to an array of demodulation requests. Must be nullptr, if no demodulation shall be done.
\@attribute[type="array" size="dwCountOfRequests" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SDemodRequests.SDemodRequest.dwBtsId">
Unique BTS ID provided by the scanner as SSignals::dwScannerBtsIdent. This ID is used by the 
BCHDemodulator to demodulate a specific BTS, when the bDemodulationMode is set to ON_CMD.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SDemodRequests.SDemodRequest.wRepetitionTimeOutInMs">
Repetition time out in ms (only used if bDemodulationMode == REPETITION).

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SDemodRequests.SDemodRequest.eDemodulationMode">
The mode used for BCH demodulation.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SDemodRequests.SDemodRequest.ePDU">
The PDU to be demodulated.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SDemodRequests.SDemodRequest.dwChannelIndex">
Index of the frequency in SChannelSettings::pTableOfFrequencySetting.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SDemodRequests.SDemodRequest">
   There must be one instance of this structure for each BCH demodulation request,
   therefore different PDUs can be measured on different channels.

   Example for start measurement:
   On the first channel SIBs 3 and 4 shall be decoded, on the the second channel SIBs 3, 5 and 7 shall be decoded.
   SIB 5 shall be decoded repeatedly every 10 seconds (10000 ms) and SIB 7 shall be decoded on demand.
   This requires five structures containing the following parameter sets:
   @code
   (0, SIB3, 0, 0, 0, 0)
   (0, SIB4, 0, 0, 0, 0)
   (1, SIB3, 0, 0, 0, 0)
   (1, SIB5, REPETITION, 10000, 0, 0)
   (1, SIB7, ON_CMD, 0, 0, 0)
   @endcode
   Example during measurement:
   On channel 0 PDU demodulation shall be completely reset for the BTS identified by ID 3
   and on the the second channel SIB 7 shall be decoded for the BTS identified by ID 4 
   SC 5 with a timeout for the request of 1 sec (1000ms):
   @code
   (0, 0, CHANNEL_RESET, 0, 3, 5)
   (1, PDU_FOR_SIB7, ON_CMD, 1000, 4, 5)
   @endcode
   @note
   You are responsible to manage memory, when you use SetDemodulationSettings().
   All parameters which are not necessary for a certain request shall be set to 0.
   \@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SDemodRequests.dwCountOfRequests">
Number of demodulation requests. Must be 0, if no demodulation shall be done.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SDemodRequests">
This structure is used to configure PDU requests.
It is used in start measurement requests and it is used to issue BCH demodulation requests during measurement,
e.g. SIB requests on demand or to reset SIB demodulation.
\@attribute[type="serializable"]

</member>
        <member name="F:REPETITION_PER_BEAM">
After each successful demodulation a new one will be started automatically after the repetition time specified in wRepetitionTimeOutInMs.
Results are provided for each SSB index / beam.
Only to be used in start measurement.

</member>
        <member name="F:ONCE_PER_BEAM">
Demodulate the PDU for each BTS at the specified channel once for each SSB index / beam.
Only to be used in start measurement.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.DemodMode">
This enumeration defines modes for the BCH demodulation.
Use this in the SDemodRequests structure to specify when the demodulation 
of this PDU shall be done.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.Pdu">
This enumeration defines IDs for the NR Layer 3 PDUs. 
Use this in the SDemodRequest structure to specify which PDUs shall be decoded.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.SpectrumSettings.eResolutionBandwidthInKHz">
The resolution bandwith used for the spectrum measurement.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.SpectrumSettings.ResolutionBandwidth">
Definition of resolution bandwidths options for the spectrum measurement. 

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.SpectrumSettings.dwSpanInKHz">
Span of the spectrum measurement in Hertz, e.g. the spectral width of the measurement
centered around the center frequency.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.SpectrumSettings.dCenterFrequencyInHz">
Center frequency of the spectrum measurement in Hertz.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.SpectrumSettings">
Configuration options for sepctrum data provided by the time gated spectrum measurements (TG).
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.TddUlDlPattern2">
Up- and Downlink configuration for pattern 2.
Ignored when bUseConfigFromSib1 is set to true.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.TddUlDlPattern1">
Up- and Downlink configuration for pattern 1.
Ignored when bUseConfigFromSib1 is set to true.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.dwNrOfUplinkSymbols">
Slot configuration, number of uplink symbols, see 3GPP TS 38.213 §11.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.dwNrOfUplinkSlots">
Slot configuration, number of uplink slots, see 3GPP TS 38.213 §11.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.dwNrOfDownlinkSymbols">
Slot configuration, number of downlink symbols, see 3GPP TS 38.213 §11.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.dwNrOfDownlinkSlots">
Slot configuration, number of downlink slots, see 3GPP TS 38.213 §11.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.eTransmissionPeriodicity">
Uplink downlink transmission periodicty, see 3GPP TS 38.213.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.TransmissionPeriodicity">
Definition of uplink downlink transmission periodicty configurations, see 3GPP TS 38.213.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.isExtendedCyclicPrefix">
If set to true, all measurements are done for exteded cyclic prefix with a 
maximum of 12 symbols per slot instead of 14 without.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.isUplinkSection">
If set to true, it's a uplink section.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.isFlexibleSection">
If set to true, it's a flexible section.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.isDownlinkSection">
If set to true, it's a downlink section.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig.isEnabled">
If set to true, this pattern configuration is used.
Ignored when bUseConfigFromSib1 is set to true, e.g. active SIB1 configuration tracking.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.TddUplinkDownlinkConfig">
Definition of the Up- and Downlink configuration options.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.dwThresholdInPct">
Level threshold in percent.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.dwTimingAdvanceInTc">
Timing advance in Tc for shifting the uplink section, with Tc = 1/(4096 * 480kHz) ~ 509ns, see 3GPP TS 38.211.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.dwGuardTimeInUs">
Guard time in micro seconds.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.fRateInHz">
Rate of time gated spectrum measurement updates in Hertz.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.bUseConfigFromSib1">
If set to true, any configuration provided in the Pattern1Config and Pattern2Config parameters are ignored.
Up- and downlink configuration options are taken from SIB1. TG measurements can not start before SIB1 has
been decoded.
Not supported yet!

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings.bIsEnabled">
If set to true time gated spectrum measurements are performed on the first and only channel configured in
pTableOfFrequencySetting.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SChannelSettings.STgSettings">
Configuration options for time gated spectrum measurements (TG).
For active TG measurements only one active channel is allowed in pTableOfFrequencySetting,
its measurement rate has to be smaller or equal to 0.1 Hz.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STaeSettings.wSsbIndex">
SSB index (6 bit) of the beam the SS/PBCH block belongs to.
According to 3GPP only up to 8 beams are specified for FR1.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STaeSettings.wPhysicalCellId">
Physical Cell ID 0 - 1007.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STaeSettings.dwChannelIndex">
Index of the frequency in SChannelSettings::pTableOfFrequencySetting.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STaeSettings.dwAltitudeAboveSeaLevelInM">
Altitude of the receiver in meters above sea level (MSL) if not set to SDefs::INVALID_DWORD_VALUE.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STaeSettings.fLosDistanceInM">
Line of sight distance to target BTS in meter.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STaeSettings.fRfCableLengthInM">
RF cable length in meter, velocity factor is assumed to be 0.66.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STaeSettings.fGpsCableLengthInM">
GPS cable length in meter, velocity factor is assumed to be 0.66.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.STaeSettings.bIsEnabled">
If set to true time alignment error measurements are performed on the specified carrier.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SChannelSettings.STaeSettings">
Configuration for time alignment error measurements (TAE). These do require to have a GPS antenna connected to the receiver.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.SRsCinrChannelModel.dwSpeedInKmPerHour">
The maximum speed (velocity) of the measurement platform in km / h. The relative platform to base station velocity gives the rise to
the maximum Doppler frequencies in Hz: (CenterFrequency in Hz) * dwSpeedInKmPerHour / ( 3.6 * 3e8 )

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.SRsCinrChannelModel.dwDelaySpreadInNs">
The maximum expected delay spread (time difference of arrival) between the signal received from different RF paths.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SChannelSettings.SRsCinrChannelModel">
In the RS-CINR calculation a channel model is used to specify limits for maximum Doppler frequency and maximum delay
spread. This model is used to separate reference signal power and interference power. If the model allows less freedom
(maximal possible variation) to Doppler frequency and delay spread the RS-CINR result accuracy may be improved. The
measurement accuracy may not be guaranteed if true signal propagation parameters exceed the limits specified in the
channel model!
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.pTableOfFrequencySetting">
This array of structures can be filled with single frequency configurations.
Only dwCount entries from this table will be used.
\@attribute[type="array" size="dwCount" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SChannelSettings.dwCount">
Number of frequency configurations that shall be used from the pTableOfFrequencySetting to perform the measurement tasks.
For value range see GetChannelCountLimits().

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SChannelSettings">
This structure holds the measurement setup for the NR measurement. It
basically consists of the set of frequencies that shall be measured.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SFrequencySetting.cellDefiningSSB">
Cell defining SS/PBCH block of a cell, that allows idle / inactive UEs to camp. Ref. 3GPP TS 38.300.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SFrequencySetting.CellDefiningSSB.advancedSettings">
Advanced scanner settings for expert operation.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.bHighEfficiencyMode">
In high efficiency mode the scanning uses up to 5 times less receiver resources.
Disabling high efficiency mode will increase the sensitivity of the scanner by rougly 5...10 dB.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.dwTraceRatePer1000Sec">
Trace measurement rate if not set to SDefs::INVALID_DWORD_VALUE. For default value and range see GetMeasRateLimits().
This parameter overrides dwMeasRatePer1000Sec.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.dwSyncRatePer1000Sec">
Synchronization rate value if not set to SDefs::INVALID_DWORD_VALUE. Value Range: 100...5000, default 1000.
This parameter overrides dwMeasRatePer1000Sec.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.enSfnRepetitionPeriod">
According to 3GPP SFN increases with each radio frame. For setups including a signal generator this is often not true,
as the SFN sequence repeats after a specific number of radio frames. In order to provide correct signal detection
the PBCH decoder needs to know that the SFN repeats after the given number of radio frames, thus a mismatch will lead
to decreased signal detection. The minimum SFN must be a multiple of the given number. So in case that 64 Frames are
generated the SFNs shall run from 0...63 or 64...127 or 128...191 or ... or 960...1023.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SfnRepetitionPeriod">
Definition of SFN repetition periods used in PBCH decoder.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.enSSBMapping">
SSB mapping.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.SSBMapping">
Definition of SSB mapping types.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.bPSStoSSS3dBPowerRatio">
If set to true it's assumed that REs of PSS are +3dB boosted to SSS.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.bPSStoSSS0dBPowerRatio">
If set to true it's assumed that REs of PSS and SSS have equal power.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings.bSychronizedNetwork">
If set to true it's assumed that the network is transmitting synchronized 10 ms long 5G NR frames.
If unsure use false for FDD and true for TDD networks.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SFrequencySetting.CellDefiningSSB.AdvancedSettings">
Definition of advanced settings for experts.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SFrequencySetting.CellDefiningSSB.FrameStructureType">
Definition of the channel type.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SFrequencySetting.CellDefiningSSB.bSSBPeriodicityMask">
      Periodicity of the half frames for reception of SS/PBCH blocks, see 3GPP TS 38.215.
      Can be any combination of SSBPeriod values; however, must not be 0.
      
      @note 
         Although it is possible to specify multiple periodicity values for this
         bit mask, it is recommended to use the default value of PERIOD_20MS 
         unless it is known that the channel uses a different periodicity.  

      @warning
         Including more than one periodicity value for the bit mask will require
         more resources.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SFrequencySetting.CellDefiningSSB.SSBPeriod">
Periodicity of the half frames for reception of SS/PBCH blocks. Ref. 3GPP TS 38.215
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SFrequencySetting.CellDefiningSSB.enSSBPattern">
Determines the first symbol index for candidate SS/PBCH blocks according 
to the subcarrier spacing. Ref. 3GPP TS 38.101 and 38.215.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SFrequencySetting.CellDefiningSSB">
Definition of cell defining SS/PBCH block settings, see 3GPP TS 38.300.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SFrequencySetting.dSSRefFrequencyInHz">
SS/PBCH block frequency position of RE=#0 (subcarrier #0) of RB#10, see 3GPP TS 38.101.

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SFrequencySetting.dwMeasRatePer1000Sec">
The desired measurement rate value. For default value and range see GetMeasRateLimits().

</member>
        <member name="F:RohdeSchwarz.ViCom.NR.SFrequencySetting.dwFrontEndSelectionMask">
Receiver front end to be used by the scanner for this channel.
Scanner tasks are not allowed to contain multiple FE's.

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SFrequencySetting">
Configuration of the measurement that is performed on one single frequency.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SSBPattern">
Definition of Synchronisation Signal (SS) / Primary Broadcast Channel (PBCH) pattern types.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.SChannelState">
Struct containing the channel measurement settings that can be modified during a running measurement
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.NR.etViComInterfaceVersion">
Data containers used for ViCom NR interface. Contains measurement configuration and result structures.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SL3DecoderResult">
Result from the Layer 3 Decoder.

The string returned via this structure is formatted using the ASN.1 notation of the LTE standard (3GPP TS 36.331).
It contains one completely decoded PDU terminated by CR+LF. Data subsets (i.e. Information Elements)
within the string are headed by "CR+LF+{", indented via spaces and terminated by "}+CR+LF".

In addition to the standard, some Information Elements are added twice (see example cellIdentity below):
   1. Formatted exactly according to the standard.
   2. Formatted with unit or format description between square brackets ("[" "]") and representing a reasonable value.

\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SL3DecoderRequest">
Request data container for the Layer 3 Decoder. Is used to decode a demodulation result into
a human-readable structure.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.ListMeasurementRatesTotal">
Measurement rate for all LTE channels.
In the case of one channel is measured with 5 and another one with 2 per second we expect an total meas rate of 7.
If ListOfSignals has elements then the given measurement rate values correspond to narrowband measurements.
Otherwise they are wideband.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.ListMeasurementRates">
Measurement rate for the given LTE channel (dwChannelIndex).
List of measurement rates rates and other values in relation to the measurement rate for one or more time intervals 
of measurement rate calculation.
The measurement rate is the ratio of all measurements of the same type of measurement at the time the measurement signals
have been picked from the air. So the time of arrival at the host application is not used.
If ListOfSignals has elements then the given measurement rate values correspond to narrowband measurements.
Otherwise they are wideband.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.pDemodResult">
Pointer to demodulation result. If NULL, no demodulation result is present.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SDemodResult.SENodeBInformation">
Summary information about the eNodeB configuration, such LTE-M, Dynamic Spectrum Sharing (DSS), etc.
Each element is only valid, if its value is not set to an INVALID value.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SDemodResult.pbActiveAntennaMask">
Bits 0 to 3 are set to indicate that antenna port 0 to antenna port 3 are active if pbActiveAntennaMask is not NULL.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SDemodResult.SSFN_Info">
Optional information about system radio frame numbers.
Can only be valid for MIB PDU.
Each element is only valid, if its value is not SDefs::INVALID_DWORD_VALUE.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SDemodResult.wPhysicalCellId">
The physical Cell ID, which can take one from the values defined by [0;503].

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SDemodResult.pbBitStream">
Pointer to (dwBitCount + 7) / 8 bytes which contain the PDU bits. The first bit is stored in the bit 7 of pbBitStream[0]. 
If dwBitCount is not a multiple of 8, the trailing bits in the last byte pbBitStream[(dwBitCount + 7) / 8 - 1] shall be ignored.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SDemodResult.dwBitCount">
Number of bits the PDU consists of.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SDemodResult.bIsLteM">
PDU is from an LTE-M cell.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SDemodResult.ePDU">
PDU that has been demodulated

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SDemodResult.dwStopTimeInMs">
This is the last time in ms of signals used for this message. 
All IQ signals used to produce this demodulation result are in between dwStartTimeInMs and dwStopTimeInMs.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SDemodResult.dwStartTimeInMs">
This is the first time in ms of signals used for this message.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SDemodResult.dwFirstBtsId">
The demodulator fills this parameter with the BTS ID the scanner assigned to this BTS first.
If later on, the scanner uses a different BTS ID, but after demodulation it is detected that it is the same eNodeB,
the demodulator fills this value with the first BTS ID the scanner used.  
Example: 
The scanner has measured a eNodeB with ID = 10 and the demodulator has demodulated it successfully. 
20 minutes later the scanner found signals of a eNodeB with ID = 55. After demodulating, the demodulator finds 
out (by comparing unique BTS information from decoding), that it is the same eNodeB as the one with ID = 10. 
In this case, dwFirstBtsId will be set to 10.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SDemodResult.dwBtsId">
Unique BTS ID provided by the scanner as SSignals::dwScannerBtsIdent. Each time the scanner is not
sure whether the signal it could demodulate belongs to an already known eNodeB, it sets a new identifier
here. I.e. the same eNodeB could have multiple dwBtsIds, but each dwBtsId relates always to a single cell.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SDemodResult">
BCH demodulator results
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.ListOfLteMResults">
The actual set of LTE-M measurement results associated with the current channel specified
by the dwChannelIndex member.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SLteMResult.pSubbandRsResults">
Reference signal measurements computed over one LTE-M subband if pSubbandRsResults is not NULL.
The result order is defined by: Subbands with lower center frequency are stored first.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SLteMResult.dwCountOfSubbandResults">
Number of values available in pSubbandRsResults array if pSubbandRsResults is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SLteMResult.averagedRsResultOverAllSubbands">
Average reference signal measurements computed over all LTE-M subbands.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SLteMResult.SLteMReferenceSignal.sRsCinrInDB100">
Subband RS-CINR meas result in 0.01 dB.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SLteMResult.SLteMReferenceSignal.sRsRssiInDBm100">
Received signal strength indictor (RSSI) for only OFDM symbols that contain reference signals.
This measurement is compatible with the definition in 3GPP 36.214, section 5.1.3 for RSSI used to compute RSRQ.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SLteMResult.SLteMReferenceSignal.sRSRQinDB100">
RSRQ value based on the wideband reference signal power measurement in 0.01 dB.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SLteMResult.SLteMReferenceSignal.sRSRPinDBm100">
RSRP value based on the wideband reference signal power measurement in 0.01 dBm.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SLteMResult.SLteMReferenceSignal.bAntennaMaskUsedForMeasurement">
Bit 0 to Bit 1 is set when the corresponding antenna 0 to 1 was used for RSRP measurement.
Regarding TS36.214 only antenna port 0 and 1 is used for RSRP/Q, RS CINR and RS RSSI measurements.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SLteMResult.SLteMReferenceSignal">
Container for LTE-M reference signal measurement results.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SLteMResult.sRssiInDBm100">
Total received signal strength indictor (RSSI) for only OFDM symbols that contain reference signals.
or SDefs::INVALID_SHORT_VALUE if invalid.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SLteMResult.wRBNumberOfBts">
The number of resource blocks transmitted from the eNodeB, i.e. LTE-M system bandwidth.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SLteMResult.bAntennaMaskUsedForMeasurement">
Bit 0 to Bit 1 is set when the corresponding antenna 0 to 1 was used for RSRP measurement.
Regarding TS36.214 only antenna port 0 and 1 is used for RSRP measurement.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SLteMResult.wPhysicalCellId">
The physical Cell ID, which can take one from the values defined by [0;503].

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SLteMResult.dwScannerBtsIdent">
      Internal ID assigned from the scanner to that specific station as in
      SSignals::dwScannerBtsIdent. Different stations will become different
      IDs assigned to them, but if the scanner cannot identify a cell exactly,
      it also might assign different IDs to the same station.

      @note
         This is unique only within one measurement. Do not use it when
         combining the results of different measurements.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SLteMResult">
Container for LTE-M scanner measurement results. Only available if LTE-M measurements have been configured using
SFrequencySetting::SLteMSettings.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.ListOfMbmsResults">
The actual set of eMBMS measurement results associated with the current channel specified
by the dwChannelIndex member.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMbmsResult.SENodeBIdentifier.dwLAC">
The location area code if not SDefs::INVALID_DWORD_VALUE.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMbmsResult.SENodeBIdentifier.wMNC">
The MNC (mobile network code) in binary format if not SDefs::INVALID_WORD_VALUE.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMbmsResult.SENodeBIdentifier.wMCC">
The MCC (mobile country code) if not SDefs::INVALID_WORD_VALUE.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMbmsResult.SENodeBIdentifier.dwCellId">
The 28-bit unique cell ID if not SDefs::INVALID_DWORD_VALUE.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMbmsResult.SENodeBIdentifier.dwPhysicalCellId">
The physical cell ID, which can take one from the values defined by [0;503].

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMbmsResult.SENodeBIdentifier.dwScannerBtsIdent">
         Internal ID assigned from the scanner to that specific station as in 
         SSignals::dwScannerBtsIdent. Different stations will become different
         IDs assigned to them, but if the scanner cannot identify a cell exactly,
         it also might assign different IDs to the same station.

         @note
         This is unique only within one measurement. Do not use it when
         combining the results of different measurements.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SMbmsResult.SENodeBIdentifier">
Optional container for the eNodeB identifiers associated with the eMBMS configuration for the measured MBSFN area.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMbmsResult.dwCountOfENodeBIdentifiers">
The count of eNodeB identifiers associated with the eMBMS configuration for the measured MBSFN area if
pENodeBIdentifier is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMbmsResult.sRssiInDBm100">
Measured received signal strength indicator (RSSI) value in 0.01 dBm.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMbmsResult.sRsRssiInDBm100">
Received signal strength indictor (RSSI) for only OFDM symbols that contain reference signals.
This measurement is compatible with the definition in 3GPP 36.214, section 5.1.3 for RSSI used to compute RSRQ.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMbmsResult.sAverageRsCinrInDB100">
The average RS-CINR over all subbands of wideband RS-CINR measurements in 0.01 dB if not SDefs::INVALID_SHORT_VALUE.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMbmsResult.sNoiseClippedRSRQinDB100">
Noise clipped RSRQ value based on the wideband reference signal power measurement in 0.01 dB.
For this value the measured RS-CINR was taken into account to correct the RSRQ result regarding
noise and interference. Only valid if not SDefs::INVALID_SHORT_VALUE.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMbmsResult.sNoiseClippedRSRPinDBm100">
Noise clipped RSRP value based on the wideband reference signal power measurement in 0.01 dB.
For this value the measured RS-CINR was taken into account to correct the RSRP result regarding
noise and interference.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMbmsResult.sRSRQinDB100">
RSRQ value based on the wideband reference signal power measurement in 0.01 dB if not SDefs::INVALID_SHORT_VALUE.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMbmsResult.sRSRPinDBm100">
RSRP value based on the wideband reference signal power measurement in 0.01 dB. 

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMbmsResult.wRBNumberOfBts">
The number of resource blocks transmitted from the eNodeB, i.e. LTE system bandwidth.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMbmsResult.wCountOfUsedREs">
The number of reference symbol resource elements used for the RSRP/Q measurement.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMbmsResult.bMbsfnAreaId">
Area ID for the measured MBSFN area.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SMbmsResult">
eMBMS scanner measurement results. Only available if eMBMS measurements have been configured using
SFrequencySetting::SMbmsSettings.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.ListOfThroughputEstimationResults">
The actual set of throughput estimation results.
\@attribute[filterable="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SThroughputEstimationResult.pThroughputPerTransmissionMode">
Throughput results per transmission mode and spatial layer. For TransmissionMode::MIMO with
number of spatial layers &gt; 1, lower spatial layer index comes first.
\@attribute[type="array" size="dwCountOfThroughputPerTransmissionModeValues" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.pSubbandThroughputValues">
The actual set of subband throughput estimation values with subband resolution.
\@attribute[type="array" size="dwCountOfSubbandThroughputValues" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.dwCountOfSubbandThroughputValues">
Number of values available in pSubbandThroughputValues if pSubbandThroughputValues is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.pWidebandThroughputValue">
The actual set of wideband throughput estimation values for the whole carrier bandwidth.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.fCapacityInKbitPerSecond">
Estimated channel capacity in kbit per second.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.enCqiIndex">
Estimated channel quality index.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue.CQI">
Definition of channel quality index (CQI) values.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.SThroughputValue">
Throughput estimation value.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.bNumberOfSpatialLayer">
Number of spatial layer for TransmissionMode::MIMO, always 1 for single layer transmission modes.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.enTransmissionMode">
Transmission mode of the spatial layer

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode.TransmissionMode">
Definition of transmission mode values.
\@attribute[type = "serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SThroughputEstimationResult.SThroughputPerTransmissionMode">
Container for throughput estimation results for one transmission mode.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SThroughputEstimationResult.dwCountOfThroughputPerTransmissionModeValues">
Number of values available in pThroughputPerTransmissionMode, if pThroughputPerTransmissionMode is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SThroughputEstimationResult.wPhysicalCellId">
The physical Cell ID, which can take one from the values defined by [0;503].

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SThroughputEstimationResult.dwScannerBtsIdent">
      Internal ID assigned from the scanner to that specific station as in
      SSignals::dwScannerBtsIdent. Different stations will become different
      IDs assigned to them, but if the scanner cannot identify a cell exactly,
      it also might assign different IDs to the same station.

      @note
      This is unique only within one measurement. Do not use it when
      combining the results of different measurements.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SThroughputEstimationResult">
Container for throughput estimation results.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.ListOfMimoResults">
The actual set of MIMO measurement results associated with the current channel specified
by the dwChannelIndex member.
\@attribute[filterable="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMimoResult.SChannelMatrix.pComplexCoefficient">
         Complex coefficient of the H matrix in sqrt(mW). Complex coefficients are stored column by column.
         Which means the pComplexCoefficient array effectively stores the transposed matrix H'.

         For MxN MIMO and H with M rows and N columns
            
                              [ h11  h12 . . . h1N ]

                              [ h21  h22 . . . h2N ]
                        H =      .    .  .      .
                              [  .    .    .    .  ]
                                 .    .      .  .
                              [ hM1  hM2 . . . hMN ]

         the coefficient hij, for i in {1...M}, j in {1...N}, is available by way of

                        pComplexCoefficient[ (i-1) + (j-1)*M ].

         For example:
            
                              [ h11  h12  h13  h14 ]
                        H = 
                              [ h21  h22  h23  h24 ]

         =&gt; pComplexCoefficient array: [ h11 h21 h12 h22 h13 h23 h14 h24 ]

         If 2x2 and 2x4 MIMO measurements are enabled, only the 2x4 matrix is returned, since the 2x2 matrix
         is a subset of the 2x4 matrix. E.g. the first four coefficients represent the 2x2 case [ h11 h21 h12 h22 ].

         Similarly, if 4x4 MIMO measurements are enabled, only the 4x4 matrix is returned.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMimoResult.SChannelMatrix.dwCountOfComplexCoefficients">
Number of values available in pComplexCoefficient if pComplexCoefficient is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMimoResult.SChannelMatrix.pwConditionNumber4x4MimoInDB100">
Optional condition number for the channel matrix (H matrix) if pwConditionNumber4x4MimoInDB100 is not NULL.
The condition number has the format 100 * 10 * lg( max eigenvalue / min eigenvalue ).

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMimoResult.SChannelMatrix.pwConditionNumber2x4MimoInDB100">
Optional condition number for the channel matrix (H matrix) if pwConditionNumber2x4MimoInDB100 is not NULL.
The condition number has the format 100 * 10 * lg( max eigenvalue / min eigenvalue ).

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMimoResult.SChannelMatrix.pwConditionNumber2x2MimoInDB100">
Optional condition number for the channel matrix (H matrix) if pwConditionNumber2x2MimoInDB100 is not NULL.
The condition number has the format 100 * 10 * lg( max eigenvalue / min eigenvalue ).

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMimoResult.SChannelMatrix.pbRankFor4x4Mimo">
Optional rank for the channel matrix (H matrix) if pRank is not NULL.
The estimated rank of H * ~H with respect to the CINR for 4x4 MIMO measurements.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMimoResult.SChannelMatrix.pbRankFor2x4Mimo">
Optional rank for the channel matrix (H matrix) if pRank is not NULL.
The estimated rank of H * ~H with respect to the CINR for 2x4 MIMO measurements.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMimoResult.SChannelMatrix.pbRankFor2x2Mimo">
Optional rank for the channel matrix (H matrix) if pRank is not NULL.
The estimated rank of H * ~H with respect to the CINR for 2x2 MIMO measurements.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMimoResult.SChannelMatrix.psChannelMatrixCinrInDB100">
Optional CINR value used in the channel matrix (H matrix) if psChannelMatrixCinrInDB100 is not NULL.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SMimoResult.SChannelMatrix">
      Optional container for channel matrices (H matrix) if pChannelMatrix is not NULL.
      The total measurement count resp. the number of available MIMO channel matrices is
      wRBNumberOfBts * wNumberOfMeasTimes.
      E.g. wRBNumberOfBts == 50 and  wNumberOfMeasTimes == 4 means this BTS has a system
      bandwidth of 50 RBs and there are 4 channel matrices for every resource block,
      in total 200 matrices.

      The matrix ordering is first measured matrix first and lower RB number (lower frequency)
      first, e.g. [ H_RB0_T0  H_RB1_T0  ...  H_RBn_T0  H_RB0_T1 H_RB1_T1  H_RBn_T1  ... ]
      with RBx is a RB index and Tx is a time index.
      \@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMimoResult.dwCountOfChannelMatrices">
The number of available MIMO channel matrices if pChannelMatrix is not NULL.
Equal to wRBNumberOfBts * wNumberOfMeasTimes.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMimoResult.wTimeResolutionInMs">
MIMO resolution. The length of signal in ms that has been used to calculate the MIMO results.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMimoResult.wNumberOfMeasTimes">
Number of MIMO measurements made for each BTS in the captured IQ data.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMimoResult.wRBNumberOfBts">
The number of resource blocks transmitted from the eNodeB, i.e. LTE system bandwidth.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMimoResult.bTransmitAntennaMask">
Bitmask of eNodeB antenna ports used for MIMO measurements, if not 0.
Bit 0 -&gt; antenna port 0, bit 1 -&gt; antenna port 1, etc.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMimoResult.bReceiveAntennaMask">
Bitmask of front ends used for MIMO measurements, if not 0.
Bit 0 -&gt; FE 0, bit 1 -&gt; FE 1, etc.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMimoResult.bNumberOfTransmitAntennas">
Number of eNodeB transmit antenna ports used for the MIMO measurement (e.g. in the calculation of the H matrix).

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMimoResult.bNumberOfReceiveAntennas">
Number of receive antenna ports used for the MIMO measurement (e.g. in the calculation of the H matrix).

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMimoResult.wPhysicalCellId">
The physical Cell ID, which can take one from the values defined by [0;503].

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SMimoResult.dwScannerBtsIdent">
      Internal ID assigned from the scanner to that specific station as in 
      SSignals::dwScannerBtsIdent. Different stations will become different
      IDs assigned to them, but if the scanner cannot identify a cell exactly,
      it also might assign different IDs to the same station. 

      @note
         This is unique only within one measurement. Do not use it when
         combining the results of different measurements.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SMimoResult">
MIMO measurement results. Only available if MIMO measurements have been configured
using SFrequencySetting::SMimoMeasSettings. The results are only valid if dwScannerBtsIdent
does not equal SDefs::INVALID_DWORD_VALUE.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.ListOfRssiAndSpectrumResults">
The actual set of RSSI and spectrum measurement results associated with the current channel specified
by the dwChannelIndex member.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SRssiAndSpectrumResult.SSpectrumResult.psRmsSpectralPowerValueInDBm100">
RMS spectrum value in 0.01 dBm.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SRssiAndSpectrumResult.SSpectrumResult.dwCountOfSpectrumValues">
Number of values available in psRmsSpectralPowerValueInDBm100 array if psRmsSpectralPowerValueInDBm100 is not NULL.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SRssiAndSpectrumResult.SSpectrumResult">
Optional container for spectrum meas results. Only available if spectrum measurements have been configured in
SFrequencySetting::SRssiMeasSettings and pSpectrum is not NULL.
The RMS spectrum values are directly output from the FFT, thus the first value is the zero frequency component.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SRssiAndSpectrumResult.f6dBResolutionBandwidthInHz">
The 6 dB resolution bandwidth for spectrum results (given by the IQ time window function applied before the FFT).

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SRssiAndSpectrumResult.wCountOfFftsForSpectrum">
Number of FFTs used for the RMS spectral power accumulation. This is the total count of FFTs if more than
one FE is used. This is an optional value on only valid if the pointer is not equal to NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SRssiAndSpectrumResult.fSpectrumFreqDistanceInHz">
Frequency spacing of spectrum values available in pSpectrumValues array if pSpectrumValues is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SRssiAndSpectrumResult.psRssiInDBm100">
Measured received signal strength indicator (RSSI) value in 0.01 dBm if psRssiInDB100 is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SRssiAndSpectrumResult.pbSlotOffsetInLteFrame">
For the SRssiSettings::wRSSI_DL_ALL_TS_MODE measurement, this specifies the slot (0-19) in the LTE radio frame
the RSSI measurements was made. Not used for any other measurement mode, only available if not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SRssiAndSpectrumResult.fUsedRssiBandwidthInHz">
RSSI measurement bandwidth in Hz (3 dB limit of the receiver filter).

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SRssiAndSpectrumResult.wRssiMeasMode">
Used Rssi measurement configuration. See SRssiSettings::wRSSI_xxx_MODE constants.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SRssiAndSpectrumResult.dwFrontEndSelectionMask">
Receive antenna ports used for the measurement. For TSMW this could either be
SRFPort::RF_1 or SRFPort::RF_2 or both.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SRssiAndSpectrumResult">
Rssi and spectrum measurement results. Only available if RSSI / spectrum measurements
have been configured using SFrequencySetting::SRssiSettings.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.ListOfWidebandRsCinrResults">
The actual set of wideband measurement results associated with the current channel specified
by the dwChannelIndex member.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SWidebandRsCinrResult.sRsRssiInDBm100">
Received signal strength indictor (RSSI) for only OFDM symbols that contain reference signals.
This measurement is compatible with the definition in 3GPP 36.214, section 5.1.3 for RSSI used to compute RSRQ.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SWidebandRsCinrResult.pWidebandSubbandRSRQinDB100">
Noise clipped wideband RSRQ results with subband resolution if pWidebandSubbandRSRQinDB100 is not NULL.
The result order is defined by: Subbands with lower center frequency are stored first.
Same resolution as the wideband RS-CINR results.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SWidebandRsCinrResult.pWidebandSubbandRSRPinDBm100">
Noise clipped wideband RSRP results with subband resolution if pWidebandSubbandRSRPinDBm100 is not NULL.
The result order is defined by: Subbands with lower center frequency are stored first.
Same resolution as the wideband RS-CINR results.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SWidebandRsCinrResult.pWidebandRsCinrValues">
Wideband RS-CINR results if pWidebandRsCinrValues is not NULL.
The result order is defined by: Subbands with lower center frequency are stored first.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SWidebandRsCinrResult.dwCountOfSubbands">
Number of values available in pWidebandRsCinrValues array if pWidebandRsCinrValues is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SWidebandRsCinrResult.sAverageRsCinrInDB100">
The wideband RS-CINR measured over the full signal bandwidth in 0.01 dB if not SDefs::INVALID_SHORT_VALUE.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SWidebandRsCinrResult.sNoiseClippedRSRQinDB100">
Noise clipped RSRQ value based on the wideband reference signal power measurement in 0.01 dB.
For this value the measured RS-CINR was taken into account to correct the RSRQ result regarding
noise and interference. Only valid if not SDefs::INVALID_SHORT_VALUE.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SWidebandRsCinrResult.sNoiseClippedRSRPinDBm100">
Noise clipped RSRP value based on the wideband reference signal power measurement in 0.01 dB.
For this value the measured RS-CINR was taken into account to correct the RSRP result regarding
noise and interference.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SWidebandRsCinrResult.sRSRQinDB100">
RSRQ value based on the wideband reference signal power measurement in 0.01 dB if not SDefs::INVALID_SHORT_VALUE.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SWidebandRsCinrResult.sRSRPinDBm100">
RSRP value based on the wideband reference signal power measurement in 0.01 dB. 

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SWidebandRsCinrResult.dwCountOfUsedREs">
The number of reference symbol resource elements used for the RSRP/Q measurement.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SWidebandRsCinrResult.wRBNumberOfBts">
The number of resource blocks transmitted from the eNodeB, i.e. LTE system bandwidth.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SWidebandRsCinrResult.dwFrontEndSelectionMask">
Receive antenna ports used for the measurement. For TSMW this could either be
SRFPort::RF_1 or SRFPort::RF_2 or both.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SWidebandRsCinrResult.bTransmitAntennaPort">
Transmit antenna ports for the eNodeB (0...3) used for the measurement.
Bit 0 to Bit 3 is set when the corresponding antenna 0 to 3 was used for measurement.
In case of multiple bits set, the average CINR, CINR and subband RSRP values are invalid!

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SWidebandRsCinrResult.wPhysicalCellId">
The physical Cell ID, which can take one from the values defined by [0;503].

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SWidebandRsCinrResult.dwScannerBtsIdent">
      Internal ID assigned from the scanner to that specific station as in 
      SSignals::dwScannerBtsIdent. Different stations will become different
      IDs assigned to them, but if the scanner cannot identify a cell exactly,
      it also might assign different IDs to the same station.

      @note
         This is unique only within one measurement. Do not use it when
         combining the results of different measurements.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SWidebandRsCinrResult">
Wideband scanner measurement results. Only available if wideband measurements
have been configured using SFrequencySetting::SWidebandRsCinrSettings. The results
are only valid if dwScannerBtsIdent does not equal ISDefs::INVALID_DWORD_VALUE.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.ListOfSignals">
Set of signals associated with the current channel specified by the dwChannelIndex member.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.ListOfTddInterferer">
List of TDD interference analysis results for the current channel.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.STddInterference.fKPIinPct">
Key performance indicator for the strength of the interference in percent.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.STddInterference.bInterferenceReasonMask">
Reason for the interference. Can be any combination of the Reason::Type values above.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.STddInterference.Reason">
Definition of interference reasons.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.STddInterference.dwChannelIndex">
Channel index of the interfering station. If STddInterferenceAnalysis::dwChannelIndex matches SMeasResult::dwChannelIndex
it's intra-frequency interference otherwise it's inter-frequency interference.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.STddInterference.dwScannerBtsIdent">
Internal ID of the interfering cell. See SSignals::dwScannerBtsIdent for more information.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.STddInterference">
Container for TDD interference analysis results.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.ListOfPowerValues">
List of power values measured for the current channel.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SPowerValue.pfPSyncQualityInDB">
P-SYNC quality derived from the pfCinrPSyncInDB. Only available if pfPSyncQualityInDB is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SPowerValue.pfPSyncRssiInDBm">
Comprises the linear average of the total received power observed only in OFDM symbols containing P-SYNC Signals over
the center 62 resource elements, including co-channel serving and non-serving cells, adjacent channel interference, thermal noise etc.
Only available if pfPSyncRssiInDBm is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SPowerValue.pfPSyncPowerInDBm">
Calculated from fPowerInDBm and SSignals::pfSSyncToPSyncRatioInDB. P-SYNC power of this special eNodeB.
Only available if pfPSyncPowerInDBm is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SPowerValue.pfSSyncQualityInDB">
S-SYNC quality derived from the pfCinrSSyncInDB. Only available if pfSSyncQualityInDB is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SPowerValue.pfSSyncRssiInDBm">
Optional value. Comprises the linear average of the total received power observed only in OFDM symbols containing
S-SYNC Signals over the center 62 resource elements, including co-channel serving and non-serving cells,
adjacent channel interference, thermal noise etc.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SPowerValue.pfAmpBasedCinrSSyncInDB">
Optional CINR of the S-SYNC based on amplitude noise. Only available if pfAmpBasedCinrSSyncInDB is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SPowerValue.pfAmpBasedCinrPSyncInDB">
Optional CINR of the P-SYNC based on amplitude noise. Only available if pfAmpBasedCinrPSyncInDB is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SPowerValue.pfCinrSSyncInDB">
Optional CINR of the S-SYNC. Only available if not NULL and value &gt; 0 dB.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SPowerValue.pfCinrPSyncInDB">
Optional CINR of the P-SYNC signal. As the P-SYNC is not unique for a special eNodeB, this value is based on the combined signal
received from all eNodeB's using the same P-SYNC.
Only available if not NULL and value &gt; 0 dB.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SPowerValue.fCinrInDB">
This is either the CINR of the S-SYNC only or an averaged CINR of P-SYNC and S-SYNC.
This depends on the value of the pfCinrPSyncInDB and pfCinrSSyncInDB. If both are not available,
this is S-SYNC CINR only. The number of symbols from which the CINR is calculated is determined
in the same way as described for fPowerInDBm. Otherwise, it's the averaged value.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SPowerValue.fPowerInDBm">
Power of S-SYNC signal. The power of the P-SYNC signal can be calculated from this using the pfSSyncToPSyncRatioInDB.
This will give us the P-SYNC power of this special eNodeB.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SPowerValue.pdwTimeFromStartOfBlockInNs">
Offset of the OFDM symbol that has been used to retrieve the power value.
If NULL, a complete LTE block has been used.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SPowerValue">
Power values measured on the S-SYNC. The power is either retrieved from
the complete LTE block (19-20 OFDM symbols), or from a single OFDM symbol. The former case
is true when the pdwTimeFromStartOfBlockInNs is not set.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.pCir">
This is NULL if no CIR information is available
\@attribute[filterable="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pRefSignalCirResults">
Reference signal CIR results if pRefSignalCirResults is not NULL.
Bit 0 to 3 of bDetectedTransmitAntennaPorts is set when the CIR has been measured for the
corresponding antenna port 0 to 3.
\@attribute[type="array" size="dwCountOfRefSignalCirResults" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.dwCountOfRefSignalCirResults">
Number of values available in pRefSignalCirResults array if pRefSignalCirResults is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pNarrowbandRSRPinDBm100">
Narrowband RSRP result with subband resolution if pNarrowbandRSRPinDBm100 is not NULL.
For description of the result order and resolution see bRsCinrMeasResultConfig.
\@attribute[type="array" size="dwCountOfNarrowbandRsCinrValues" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pNarrowbandRsCinrValues">
Narrowband RS-CINR result if pNarrowbandRsCinrValues is not NULL.
For description of the result order see bRsCinrMeasResultConfig.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.dwCountOfNarrowbandRsCinrValues">
Number of values available in pNarrowbandRsCinrValues array if pNarrowbandRsCinrValues is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.bRsCinrMeasResultConfig">
Narrowband RS-CINR measurements taken for antenna port 0 to 3. The bits SFrequencySetting::wCENTER_RSCINR_xxx are
set if the specific measurement was done. The results are stored in the pNarrowbandRsCinrValues array. The number
and order of the results is defined by taken measurements indicated in this byte array. Lower antenna port results
are stored first (highest priority), lower subbandwidth first, subbands with lower center frequency first.
E.g. 6x180kHz (wCENTER_RSCINR_6x180KHZ) before 3x360kHz (wCENTER_RSCINR_3x360KHZ).

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.sPBCHbasedRSRQinDB100">
RSRQ value based on sCenterRSRPinDBm100 and the total inband power in resource blocks used to transmit 
the PBCH within the 100 ms IQ data block analysed with the scanner.
SDefs::INVALID_SHORT_VALUE, if no reference signal measurement was done.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.sPBCHbasedRSRPinDBm100">
Gives the RSRP value based on the reference signal power measurement of the 6 innermost resource blocks 
(1MHz BW around center frequency at symbols used for the PBCH) in 0.01 dBm.
SDefs::INVALID_SHORT_VALUE, if no reference signal measurement was done.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.bNumberOfSymbolsUsedForRSRQ">
Number of symbols used for RSRQ measurements.
0, if no reference signal measurement was done.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.bDetectedTransmitAntennaPorts">
Detected transmit antenna ports of the eNodeB.
Bit 0 to Bit 3 is set when the corresponding antenna port 0 to 3 is detected by the scanner.
0, if no reference signal measurement was done.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.bAntennaMaskUsedForRSRP">
If 0, no reference signal measurement was done and sPBCHbasedRSRPinDBm100 and sPBCHbasedRSRQinDB100 are not valid.
Bit 0 to Bit 1 is set when the corresponding antenna 0 to 1 was used for RSRP measurement. 
Regarding TS36.214 only antenna port 0 and 1 is used for RSRP measurement.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal">
Reference Signal measurement results. Only available if measurements have been activated using
SFrequencySetting::wNarrowbandRefSignalMeasMode.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.SMaxPeak.dwRadioFrameNumber">
Virtual Radio Frame Number (RFN) assigned to each radio frame received.
The RFN counting is started for each new combination of Channel, Physical Cell ID and BTS ID,
i.e. dwChannelIndex, wPhysicalCellId, dwBtsId.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.SMaxPeak.pMaxPeakInfo">
Pointer to the maximum element of the CIR Peak list.
This value is not optional, it is a pointer to avoid copying data.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.SMaxPeak">
Contains information about the maximum peak in the Channel Impulse Response.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.ListOfPeaks">
List of CIR peaks found in the signal.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.SPeak">
Contains information about the single peaks in the Channel Impulse Response.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.SPowerDelayProfile.SPowerDelayProfileValues">
            A (possibly empty) set of power delay values. This list contains the CIR power
            values, where each power value has been measured fSamplingTimeInSec seconds after the
            previous one. The first sample in here has been measured at u64DeviceTimeInNs resp.
            dwPcTimeStampInMs.

            The list may contain invalid values, which denote that at that specific time there
            was no CIR measurement possible.
            \@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.SPowerDelayProfile">
Structure containing the actual CIR measurement results combined with delay
information.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir">
      Optional data container that holds information about the channel impulse
      responses measured in this cycle. The CIR consists of an optional power
      delay profile, and a list of peaks.

      Channel impulse responses are calculated from a 100ms block.
      \@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.fStdDevTimeDriftInPpm">
The measured standard deviation of the time drift, given in parts per million (ppm). \sa fAverageTimeDriftInPpm for more information.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.fAverageTimeDriftInPpm">
The measured average time drift of the eNodeB with respect to the TSMx receiver timing, given in parts per million (ppm).
The drift is comprised of two parts:
   1. Drift associated with the relative motion between the eNodeB and TSMx receiver.
   2. Difference in the clock rates between the eNodeB and TSMx receiver.  If the TSMx receiver is synchronized with GPS, 
      the drift gives an indication of clock rate error in the eNodeB.
To convert to nanoseconds per second, multiply ppm by 1000, 1.0 ppm = 1000 ns/sec.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.bExceededDriftLimit">
TRUE if the average time drift limit \ref fAverageTimeDriftInPpm exceeded the threshold \ref SChannelSettings::fDriftWarningThresholdInPpm,
FALSE if the drift is below threshold or if threshold is not used (fDriftWarningThresholdInPpm = 0).

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.pfSSyncToPSyncRatioInDB">
P-SYNC to S-SYNC ratio that has been measured. The result is within the interval given in
SFrequencySetting::SSyncToPSyncRatio.
This is an optional value and only valid if the pointer is not equal to NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.enFrameStructureType">
Type of the channel: FDD or TDD

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.bNumberOfSymbolsPerSlot">
Number of LTE symbols per slot. Can either be 6 or 7 symbols.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.dwScannerBtsIdent">
      Internal ID assigned from the scanner to that specific station. Different
      stations will become different IDs assigned to them, but if the scanner
      cannot identify a cell exactly, it also might assign different IDs to
      the same station. This ID is unique on a per channel basis.

      @note
         This is unique only within one measurement. Do not use it when
         combining the results of different measurements.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.wPhysicalCellId">
The physical Cell ID, which can take one from the values defined by [0;503].

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals">
Actual power values measured for a single server
* \@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.u64DeviceTimeInNs">
The time when the signal was started to being measured on the device, with a higher resolution than the default PC clock. 
This time is relative to the last restart of the device.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.dwPcTimeStampInMs">
PC local time when the signal was measured (or was started to being measured) on the device.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SMeasResult.dwChannelIndex">
The channel to which all the data relates is specified using this index.
The index refers to the position in the SChannelSettings::pTableOfFrequencySetting array.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SMeasResult">
The LTE measurement result for a single channel returned by CViComLteInterface::GetResult().
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.S_LTE_COMPLEX_VALUE.fImag">
Imaginary part of the complex number.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.S_LTE_COMPLEX_VALUE.fReal">
Real part of the complex number.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.S_LTE_COMPLEX_VALUE">
Complex value used for channel matrix values of MIMO measurements. 
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.S_LTE_RS_CINR_VALUE.ConfidenceInterval95PercentOfsRsCinrInDB100">
The confidence interval for 95% for the value sRsCinrInDB100.
The 95% confidence interval corresponds to the 2 sigma distance in a Gaussian distribution.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.S_LTE_RS_CINR_VALUE.ConfidenceInterval68PercentOfsRsCinrInDB100">
The confidence interval for 68% for the value sRsCinrInDB100.
The 68% confidence interval corresponds to the 1 sigma distance in a Gaussian distribution.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.S_LTE_RS_CINR_VALUE.sRsCinrInDB100">
Subband RS-CINR meas result in 0.01 dB or SDefs::INVALID_SHORT_VALUE if invalid.
The value is the maximum likelihood result of the measured probability function for the RS-CINR value.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.S_LTE_RS_CINR_VALUE.sLinAverageREpowerInDBm100">
Average power of all resource elements used for sRsCinrInDB100. The average calculation is done in Watt not in dB.
SDefs::INVALID_SHORT_VALUE if invalid.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.S_LTE_RS_CINR_VALUE">
Container for subband RS-CINR meas results used for narrowband / wideband RS-CINR measurements.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.S_LTE_RATIO_CONFIDENCE_INTERVALL.bDeviationToHigherRatioInDB10">
0..25.4 dB distance from maximum likelihood value. SDefs::INVALID_BYTE_VALUE is used when the confidence interval is bigger.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.S_LTE_RATIO_CONFIDENCE_INTERVALL.bDeviationToLowerRatioInDB10">
0..25.4 dB distance from maximum likelihood value. SDefs::INVALID_BYTE_VALUE is used when the confidence interval is bigger.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.S_LTE_RATIO_CONFIDENCE_INTERVALL">
Confidence interval of a value. The value is inside the interval with a defined probability (confidence probability).
The interval is defined from (maximum likelihood value - bDeviationToLowerRatioInDB10) to
(maximum likelihood value + bDeviationToHigherRatioInDB10). The maximum likelihood value has to be given outside this structure.
Used in S_LTE_RS_CINR_VALUE.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SSettings">
This structure holds all the measurement setup that is configured in the ViCom LTE scanner module. 
It is a result of the CViComLteInterface::GetSettings() method.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SDemodulationSettings.sStartMeasurementRequests">
The requests for the general start measurement command.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SDemodulationSettings.dwFrontEndSelectionMask">
Receiver front end to be used by the demodulator for this channel. 
If no demodulation shall be provided, this shall be set to 0.
Demodulation tasks are not allowed to contain multiple FE's.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SDemodulationSettings.sSINRThresholdDB100">
SINR threshold for demodulation, given in 1/100 dBm.
For default value and range see GetDemodThresholdLimits().

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SDemodulationSettings">
This structure is used to configure the BCH demodulation process.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SDemodRequests.pDemodRequests">
Pointer to an array of demodulation requests. Must be NULL, if no demodulation shall be done.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SDemodRequests.SDemodRequest.dwBtsId">
Unique BTS ID provided by the scanner as SSignals::dwScannerBtsIdent. This ID is used by the 
BCHDemodulator to demodulate a specific BTS, when the bDemodulationMode is set to ON_CMD.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SDemodRequests.SDemodRequest.wRepetitionTimeOutInMs">
Repetition time out in ms (only used if bDemodulationMode == REPETITION).

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SDemodRequests.SDemodRequest.eDemodulationMode">
The mode used for BCH demodulation.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SDemodRequests.SDemodRequest.ePDU">
The PDU to be demodulated.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SDemodRequests.SDemodRequest.dwChannelIndex">
Index of the frequency in SChannelSettings::pTableOfFrequencySetting.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SDemodRequests.SDemodRequest">
   There must be one instance of this structure for each BCH demodulation request,
   therefore different PDUs can be measured on different channels.

   Example for start measurement:
            On the first channel SIBs 3 and 4 shall be decoded, on the the second channel SIBs 3, 5 and 7 shall be decoded.
            SIB 5 shall be decoded repeatedly every 10 seconds (10000 ms) and SIB 7 shall be decoded on demand.
            This requires five structures containing the following parameter sets:
   @code
            (0, SIB3, 0, 0, 0)
            (0, SIB4, 0, 0, 0)
            (1, SIB3, 0, 0, 0)
            (1, SIB5, REPETITION, 10000, 0)
            (1, SIB7, ON_CMD, 0, 0)
   @endcode
   Example during measurement:
            On channel 0 PDU demodulation shall be completely reset for the BTS identified by ID 3
            and on the the second channel SIB 7 shall be decoded for the BTS identified by ID 4 
            with a timeout for the request of 1 sec (1000ms):
   @code
            (0, 0, CHANNEL_RESET, 0, 3)
            (1, SIB7, ON_CMD, 1000, 4)
   @endcode
   Note that you are responsible to manage the memory when you use SetDemodulationSettings().
   Note: All parameters which are not necessary for a certain request shall be set to 0.
   \@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SDemodRequests.dwCountOfRequests">
Number of demodulation requests. Must be 0, if no demodulation shall be done.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SDemodRequests">
This structure is used to configure PDU requests.
It is used in start measurement requests and it is used to issue BCH demodulation requests during measurement,
e.g. SIB requests on demand or to reset SIB demodulation.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.DemodMode">
This enumeration defines modes for the LTE / LTE-M BCH demodulation.
Use this in the SDemodRequest structure to specify when the demodulation 
of this PDU shall be done.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.Pdu">
This enumeration defines IDs for the LTE Layer 3 PDUs. 
Use this in the SDemodRequest structure to specify which PDUs shall be decoded.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SChannelSettings.bDriftScanning">
Setting bDriftScanning to TRUE will enable LTE drift scanning in ViCom to
track drifting eNodeBs.  

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SChannelSettings.fDriftWarningThresholdInPpm">
When an eNodeB is detected to be drifting in excess of this threshold, the value
\ref SMeasResult::SSignals::bExceededDriftLimit is set to TRUE.  The threshold 
is set in units of parts per million (ppm).  1 ppm = 1000 ns/sec.
\note The flag bDriftScanning must be enabled in order to set this value.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SChannelSettings.pTableOfFrequencySetting">
This array of structures can be filled with single frequency configurations.
Only dwCount entries from this table will be used.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SChannelSettings.dwCount">
Number of frequency configurations that shall be used from the pTableOfFrequencySetting to perform the measurement tasks.
For value range see GetChannelCountLimits().

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SChannelSettings.bTddInterferenceKpiThresholdInPct">
Configuration for TDD interference analysis. Disabled for bTddInterferenceKpiThresholdInPct == 0.
If &gt; 0 detailed reports for cells having an interference KPI value above or equal to the specified one
are provided in SMeasResult::SSignals::ListOfTddInterferer.
This feature requires a GPS antenna to be connected to the receiver.
Also PDU::SIB1 has to be requested for channels with interference analysis.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SChannelSettings.dwToaAvgWindowLengthMs">
Length of the sliding window for Time of Arrival averaging in ms.
Values in the near past of the current value contribute more to the average
than older values. Values older than dwToaAvgWindowLengthMs will contribute
significantly less to the average value.
If &gt; 1, this value is treated as double Sigma threshold of a Gaussian distribution
in time, on which the averaging is based.
If 1, results are provided without averaging.
If 0, feature deactivated, no ToA processing and no results. This is the default!

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SChannelSettings.SMbmsRsCinrChannelModel.dwSpeedInKmPerHour">
The maximum speed (velocity) of the measurement platform in km / h. The relative platform to base station velocity gives the rise to
the maximum Doppler frequencies in Hz: (CenterFrequency in Hz) * dwSpeedInKmPerHour / ( 3.6 * 3e8 )

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SChannelSettings.SMbmsRsCinrChannelModel.dwDelaySpreadInNs">
The maximum expected delay spread (time difference of arrival) between the signal received from different RF paths.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SChannelSettings.SMbmsRsCinrChannelModel">
Channel model for RS-CINR measurements performed on MBSFN areas. See SRsCinrChannelModel.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SChannelSettings.SRsCinrChannelModel.dwSpeedInKmPerHour">
The maximum speed (velocity) of the measurement platform in km / h. The relative platform to base station velocity gives the rise to
the maximum Doppler frequencies in Hz: (CenterFrequency in Hz) * dwSpeedInKmPerHour / ( 3.6 * 3e8 )

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SChannelSettings.SRsCinrChannelModel.dwDelaySpreadInNs">
The maximum expected delay spread (time difference of arrival) between the signal received from different RF paths.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SChannelSettings.SRsCinrChannelModel">
In the RS-CINR calculation a channel model is used to specify limits for maximum Doppler frequency and maximum delay
spread. This model is used to separate reference signal power and interference power. If the model allows less freedom
(maximal possible variation) to Doppler frequency and delay spread the RS-CINR result accuracy may be improved. The
measurement accuracy may not be guaranteed if true signal propagation parameters exceed the limits specified in the
channel model!
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SChannelSettings">
This structure holds the measurement setup for the LTE measurement. It
basically consists of the set of frequencies that shall be measured.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.enDssMode">
DSS configuration control mode. Specifies how the DSS configuration is determined by the LTE scanner.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SFrequencySetting.DssMode">
DSS configuration control modes. Specifies how the DSS configuration is determined by the LTE scanner.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SLteMSettings.wLteMMeasMode">
LTE-M measurement modes. Used to configure which types of measurements will be performed. Set to 0 to disable
LTE-M scanner measurements on this channel.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SLteMSettings">
Configuration for LTE-M measurements.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMbmsSettings.dwMaxSubframeRatePer1000Sec">
Maximum allowed eMBMS subframe measurement rate in units of 0.001 Hz.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMbmsSettings.wMbmsMeasMode">
eMBMS measurement modes. Used to configure which types of measurements will be performed. Set to 0 to disable
eMBMS scanner measurements.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMbmsSettings">
Configuration for eMBMS measurements.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMbmsManualConfig.bRadioFrameAllocationOffset">
The frame offset to determine the start of an MBSFN broadcast. The range of valid values is [0, 7].

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMbmsManualConfig.bRadioFrameAllocationPeriod">
      The count of radio frames that occur from the first frame of an MBSFN broadcast to the first frame
      of the following MBSFN broadcast. MBSFN broadcasts contain one or four frames, as indicated by
      bOneFrameOrFourFrames.

      The set of valid values is {1, 2, 4, 8, 16, 32}.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMbmsManualConfig.bOneFrameOrFourFrames">
Indicates if the dwSubframeAllocationBitMap contains the MBSFN subframe mapping for one frame or 
four consecutive frames. The set of valid values is {1, 4}.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMbmsManualConfig.dwSubframeAllocationBitMap">
      Indicates which subframes in an MBSFN frame are allocated for MBSFN.

      If bOneFrameOrFourFrames is 1, then dwSubframeAllocationBitMap is a 6-bit value (that is, the value is
      masked by 0x3F == 0b111111) that indicates which subframes in one MBSFN frame are allocated for MBSFN.

      For FDD and 'oneFrame', subframes #1, #2, #3, #6, #7, and #8 can be allocated for MBSFN. Respectively,
      positions 5, 4, 3, 2, 1, and 0 (where position 0 refers to the least significant bit) of
      dwSubframeAllocationBitMap indicate which of these subframes are actually allocated for MBSFN.

      For TDD and 'oneFrame', subframes #3, #4, #7, #8, and #9 can be allocated for MBSFN, and, similarly,
      positions 5, 4, 3, 2, and 1 of dwSubframeAllocationBitMap indicate which of these subframes are actually
      allocated for MBSFN. For TDD, the bit in position 0 is ignored.

      If bOneFrameOrFourFrames is 4, then dwSubframeAllocationBitMap is a 24-bit value (that is, the value is
      masked by 0xFFFFFF == 0b111111111111111111111111) that indicates which subframes in four consecutive
      MBSFN frames are allocated for MBSFN.

      The 'fourFrames' cases are similar to the 'oneFrame' cases above, except each of the four 6-bit chunks
      of the 24-bit value indicates which subframes are allocated for MBSFN for one of the four MBSFN frames.
      The most significant 6-bit chunk corresponds to the first frame, and so on.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMbmsManualConfig.bMcchModificationPeriod">
Indicates the minimum count of radio frames that must occur between transmissions of MCCH information
for the contents of the transmissions to be different. The set of valid values is {512, 1024}.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMbmsManualConfig.bMcchRepetitionPeriod">
Specifies the interval between transmissions of MCCH information in radio frames. The set of valid 
values is {32, 64, 128, 256}.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMbmsManualConfig.bSignallingMCS">
Indicates the Modulation and Coding Scheme (MCS) used for applicable subframes in the MBSFN area.
The set of valid values is {2, 7, 13, 19}.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMbmsManualConfig.bSfAllocInfoBitMap">
      Indicates which subframes carry MCCH information for applicable radio frames. bSfAllocInfoBitMap is
      a 6-bit value (that is, the value is masked by 0x3F == 0b111111).

      For FDD, subframes #1, #2, #3, #6, #7, and #8 may carry MCCH information. Respectively,
      positions 5, 4, 3, 2, 1, and 0 (where position 0 refers to the least significant bit) of
      bSfAllocInfoBitMap indicate which of these subframes actually carry MCCH information.

      For TDD, subframes #3, #4, #7, #8, and #9 may carry MCCH information, and, similarly,
      positions 5, 4, 3, 2, and 1 of bSfAllocInfoBitMap indicate which of these subframes actually carry MCCH 
      information. For TDD, the bit in position 0 is ignored.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMbmsManualConfig.bMcchOffset">
The frame offset to determine the initial radio frame containing MCCH information.
The range of valid values is [0, 7].

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMbmsManualConfig.bNotificationIndicator">
      Indicates the position of the bit corresponding to the MBSFN area in the MCCH information change
      notification. Value 0 corresponds with the least significant bit and so on.

      The range of valid values is [0, 7].

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMbmsManualConfig.bNonMbsfnRegionLength">
The count of symbols present in each MBSFN subframe that constitute the non-MBFSN region.
The range of valid values is [1, 2].

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMbmsManualConfig.bMbsfnAreaId">
MBSFN area ID. The range of valid values is [0, 255].

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMbmsManualConfig">
Configuration for MBMS. This is only used if SFrequencySetting::enMbmsConfigCtrlMode is set to MBMS_CONFIG_MANUAL.
Additional information for these fields can be found in 3GPP TS 36.331 section 6.3.7. See MBSFN-AreaInfo,
MBMS-NotificationConfig, and MBSFN-SubframeConfig.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMimoSettings.bEnableThroughputEstimation">
Enables throughput estimation to get results for estimated channel capacity and estimated CQI.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMimoSettings.sMinRsCinrInDB100">
The minimum required reference signal CINR value in 0.01 dB (obtained from the narrowband LTE scanner) for the eNodeB 
to enable the measurements.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMimoSettings.wMaxRsrpDiffToBestCellInDB100">
The maximum difference (distance) allowed in subband RSRP in 0.01 dB (obtained from the narrowband LTE scanner)
from the best received eNodeB to enable the measurements.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMimoSettings.sMinCenterRsrpInDBm100">
The minimum required subband RSRP value in 0.01 dB (obtained from the narrowband LTE scanner) for the eNodeB
to enable the measurements.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMimoSettings.bMaxCountOfeNodeBs">
Maximum number of eNodeB's per channel index for which MIMO measurements shall be done.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMimoSettings.sCinrThresholdForRankInDB100">
Minimum CINR for a MIMO layer to be included in the rank calculation in 0.01 dB.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMimoSettings.dwMimoResultMaskFor2x2">
MIMO result selection masks for 2x2, 2x4 and 4x4 MIMO measurements. Can be any combination of dwMIMO_RES_xxx constants as defined above.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMimoSettings.wTimeResolutionInMs">
Defines the time interval between MIMO measurements which are calculated per resource block at a give time position within
the captured IQ data. For example wTimeResolutionInMs of 5ms and 50ms of captured IQ data leads to up to 10 results. 
For TDD the time resolution has to be a multiple of the 10 ms LTE frame duration. Set to 0 for only one result per IQ acquisition.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMimoSettings.wMimoMeasMode">
MIMO measurement configuration. Use wMIMO_MODE_xxx constants defined above. Set to 0 if no MIMO measurement should be done.
Use SFrequencySettings::wNarrowbandRefSignalMeasMode to enable narrowband RS-CINR, as these results are required for MIMO!

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SMimoSettings">
Configuration for MIMO measurements.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SRssiSettings.dwFrontEndSelectionMask">
Specify which TSMW FE should be used for RSSI measurements. For TSMW this could either be
SRFPort::RF_1 or SRFPort::RF_2 or both.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SRssiSettings.wRssiMeasMode">
Rssi measurement configuration. Can be any combination of wRSSI_xxx_MODE constants as defined above.
0 means no measurements.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SRssiSettings">
Configuration for full-channelbandwidth RSSI and spectrum measurements.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.dwFrontEndSelectionMask">
Specify which FE should be used for wideband RS/CINR measurements and MIMO measurements.
In case of SMimoSettings::wMimoMeasMode != 0 at least two front ends have to be specified.
For TSMW this could either be SRFPort::RF_1 or SRFPort::RF_2 or both.
   

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.sMinRsCinrInDB100">
The minimum required reference signal CINR value in 0.01 dB (obtained from the narrowband LTE scanner) for the eNodeB 
to enable the subband measurements.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.wMaxRsrpDiffToBestCellInDB100">
The maximum difference (distance) allowed in subband RSRP in 0.01 dB (obtained from the narrowband LTE scanner)
from the best received eNodeB to enable the subband measurements.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.sMinCenterRsrpInDBm100">
The minimum required subband RSRP value in 0.01 dB (obtained from the narrowband LTE scanner) for the eNodeB
to enable the subband measurements.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.bMaxCountOfeNodeBs">
Maximum number of eNodeB's per channel index for which wideband RS-CINR, RSRP / Q measurements shall be done.
This limitation is only valid for subband measurements, e.g. when wSUBBAND_MEASUREMENTS is set.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.bForceNoGap">
If set to true, then wNumberOfRBsInSubband gets adjusted to avoid gaps between subbands. If wNumberOfRBsInSubband 
is not a divider of the total number of resource blocks in the LTE bandwidth, then possible gaps between subbands
around the DC subcarrier are eliminated by automatically increasing the subbandwidth.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.wNumberOfRBsInSubband">
Number of resource blocks to specify the subband size for the wideband RS-CINR calculation if wSUBBAND_MEASUREMENTS is set.
For LTE-FDD channel types 1 resource block is recommended. In LTE-TDD configurations with a low number of downlink
subframes wNumberOfRBsInSubband &gt; 1 may improve the accuracy of the wideband RS-CINR measurement results. E.g. in 
LTE-TDD some subframe configurations have only 2 DL subframes per frame. In this case, the subband will need to be
wider to gather enough reference signals for an equivalent accuracy in the wideband RS-CINR measurement as in LTE-FDD.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.dwAvgBlockCountPer1000Sec">
Averaged measurement rate in Hertz. The device attempts to perform the desired number of measurements, 
but it is not guaranteed that the number of measurements is performed each second. 
In general, the device tries to achieve the desired rate averaged over a longer period of time.
For default value and range see GetWbMeasRateLimits().

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings">
Configuration for wideband RS-CINR measurements.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SFrequencySetting.MbmsConfigCtrlMode">
MBMS configuration control mode. Specifies how the MBMS configuration is determined by the MIMO, MBMS and LTE-M scanners.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SSyncToPSyncRatioSettings.RatioRange">
@details \@attribute[type="unionfield" discriminator="enSSyncToPSyncRatioType" value="SSyncToPSyncRatioType::Type::RatioRange"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SSyncToPSyncRatioSettings._StructRatioRange.fUpperRatioInDB">
The highest ratio that shall apply to the relation between P-SYNC
and S-SYNC. Possible values are in between fLowerRatioInDB and
fUpperRatioInDB.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SSyncToPSyncRatioSettings._StructRatioRange.fLowerRatioInDB">
The lowest ratio that shall apply to the relation between P-SYNC
and S-SYNC. Possible values are in between fLowerRatioInDB and
fUpperRatioInDB.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SSyncToPSyncRatioSettings._StructRatioRange">
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SSyncToPSyncRatioSettings.RatioList">
@details \@attribute[type="unionfield" discriminator="enSSyncToPSyncRatioType" value="SSyncToPSyncRatioType::Type::RatioList"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SSyncToPSyncRatioSettings._StructRatioList.dwValueCount">
A value between 1 and 6, specifying how many of the values stored
in afSSyncToPSyncRatioInDB array shall be used.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SSyncToPSyncRatioSettings._StructRatioList.afSSyncToPSyncRatioInDB">
1 to 6 valid power ratios; The values need not to be ordered because
ordering is done internally.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SSyncToPSyncRatioSettings._StructRatioList">
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SSyncToPSyncRatioSettings">
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.enSSyncToPSyncRatioType">
   Specify what kind of S-SYNC to P-SYNC ratios are specified in the
   SSyncToPSyncRatio member, either the list of ratio values or a range.

   A power ratio is specified in dB. A value of 0 means that both signals have
   the same power, a value of 3 means the S-SYNC has a signal power which is
   about two times stronger than the on the P-SYNC.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SSyncToPSyncRatioType">
   To improve the synchronization speed of the LTE scanner, it is possible
   to define power ratios between the S-SYNC and the P-SYNC channel. These
   ratios are used to find the two channels in the signal that has been
   measured.

   One way is to define up to 6 fixed ratios for the power ratio between
   the P-SYNC and the S-SYNC channel. The list of these values is used to
   find such a constellation of S-SYNC and P-SYNC on the carrier. There is no
   interpolation or similar applied to them, each value is tested if a
   matching sequence can be found.

   The other possibility is to define a range in which the power ratio must
   reside. This is the more general approach if less information about the
   network(s) measured is known upfront.

   Note that the scanner will also synchronize if those values are of no
   help, but it'll take somewhat longer to do so.
   \@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.wNumberOfResourceBlocks">
Number of resource blocks to use for this channel, if BandwidthCtrlMode is set to BW_KNOWN.
E.g. 50 RB's for 10 MHz channel bandwidth.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.enBandwidthCtrlMode">
Bandwidth control mode.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SFrequencySetting.BandwidthCtrlMode">
Bandwidth control modes. Used to configure if the number of resource blocks to use for wideband, MIMO and LTE-M measurements
on this channel shall be determined from a MIB or are known before.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.wNarrowbandRefSignalMeasMode">
Narrowband Reference Signal measurement modes. Used to configure if narrowband RSRP/Q and RS-CINR measurements
shall be done or not. 0 means no measurements.
Measurements are performed only if enMbmsConfigCtrlMode is set to MBMS_NOT_PRESENT.
Note that the carrier sections are only than on resource block boundaries, when the total number
of resource blocks is even (e.g. in 10 MHz or 20MHz). If the number of resource blocks is odd
(e.g. in 5MHz bandwidth) the boundary of the measurement sections are in the middle of a resource block.
That gives a reason to use sub band notation in kHz rather than Resource Block notation.
For other measurements see defines above. wNARROWBAND_RSRP_RSRQ is used to generally activate narrowband 
RSRP/Q and RS-CINR measurements. Any combination of wCENTER_RSCINR_xxx is allowed. As the 1 MHz input filter
is designed for SYNC signal measurements we produce some internal interference with this filter. This interference
can be taken into account for the RS-CINR measurement. Therefore optionally set one of the two w1MHZ_FILTERN_NOISE_FOR_xxx defines.
The narrwoband RS-CINR measurement is a requirement for wideband RS-CINR measurements. Therefore set a least
wNARROWBAND_RSRP_RSRQ | wCENTER_RSCINR_6x180KHZ if you want to do wideband RS-CINR measurements.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.dwAvgBlockCountPer1000Sec">
Averaged measurement rate in 0.001 Hertz. The device attempts to perform the desired number of measurements, 
but it is not guaranteed that the number of measurements is performed each second. 
In general, the device tries to achieve the desired rate averaged over a longer period of time.
For default value and range see GetMeasRateLimits().

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.enFrameStructureType">
Frame structure type of the channel aka duplex mode: FDD or TDD

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.dwSymbolsPerSlotMask">
Number of OFDM symbols per slot. Can be any combination of dwLTE_xSYMBOLS constants as defined above. Must not be 0.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.dwDefaultSymbolsPerSlot">
Default symbol configuration that should be used to set dwSymbolsPerSlotMask if no details are known about the network to be measured upfront.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.dCenterFrequencyInHz">
The center frequency on which the LTE signals shall be measured.
For value range see SReceiver::SSupportedFrequencies.

</member>
        <member name="F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.dwFrontEndSelectionMask">
   Receiver front end to be used by the scanner for this channel. This is only used for
   narrowband measurement tasks, not for wideband measurements / demodulation.

   Narrowband scanner tasks are not allowed to contain multiple FE's.

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SFrequencySetting">
Configuration of the measurement that is performed on one single frequency.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.SChannelState">
Struct containing the channel measurement settings that can be modified during a running measurement
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.FrameStructureType">
Definition of the channel type.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.LTE.etViComInterfaceVersion">
Data containers used for ViCom LTE interface. Contains measurement configuration and result structures.

</member>
        <member name="F:RohdeSchwarz.ViCom.FastACD.SMeasResult.channels">
List of channel measurement results for each channel detected by ACD.

</member>
        <member name="F:RohdeSchwarz.ViCom.FastACD.SMeasResult.SChannel.additionalChannelInfo">
      List of different bandwidth parts associated with a channel. 

      Each bandwidth part comes with the bandwidth, start/stop/center frequencies and
      a flag to indicate what the bandwidth part is.

      \sa ChannelInfoFlag for more information on which channel information types are supported.

</member>
        <member name="T:RohdeSchwarz.ViCom.FastACD.SMeasResult.SChannel.ChannelInfo">
Frequencies and bandwidths for different bandwidth parts of a channel. 

\note Information is currently only available in ViCom when using FastACD with 5G NR.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.FastACD.SMeasResult.SChannel.ChannelInfoFlag">
Flag to indicate which bandwidth part that the additional channel info is for.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.FastACD.SMeasResult.SChannel.bandsAndChannels">
      List of frequency bands and channel numbers for this channel.

      For technologies that support overlapping frequency bands, where a RF 
      channel frequency can belong to more than one band, an entry for each band 
      ID and channel numbers is provided.  For example, LTE Multi Frequency Band Indicator (MFBI)

      \note If the technology assigns a priority order to the bands, the entries in the list
      will be the sorted so that the first entry has highest priority, followed by bands
      in descending priority.  

      \sa BandIdAndChannelNumber for more information.

</member>
        <member name="T:RohdeSchwarz.ViCom.FastACD.SMeasResult.SChannel.BandIdAndChannelNumber">
Frequency band and channel number pair for a technology.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.FastACD.SMeasResult.SChannel.bandConfirmed">
      True if the band information has been confirmed, False otherwise.
      
      For some technologies (i.e. LTE), band information is verified 
      from broadcast message decoding.  For technologies with a known
      band, this will always be True.

      \sa bandsAndChannels.

</member>
        <member name="F:RohdeSchwarz.ViCom.FastACD.SMeasResult.SChannel.networkOperators">
      List of network operator identifiers (MCC/MNC) for this channel.
      
      For technologies that distinguish between primary and secondary network
      operators (i.e. LTE), the first entry in the list will be the primary identifier,
      followed by entries for any secondary identifiers.

      \sa NetworkOperator for more information.

</member>
        <member name="T:RohdeSchwarz.ViCom.FastACD.SMeasResult.SChannel.NetworkOperator">
      Definition of the network operator information. MCC and MNC values can have leading
      0 and as a result they must be presented as a string. Pointer will never
      be nullptr.

      \note The CDMA/EVDO technology uses System Identifier (SID) and Network
            Identifier (NID) to define system and network operator information.  
            These values are mapped into the mcc and mnc values of the Network
            Operator structure where MCC = SID and MNC = NID.

      \@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.FastACD.SMeasResult.SChannel.channelDirection">
Indicates if the channel is a downlink, uplink, or time division duplex
(TDD) channel.

</member>
        <member name="T:RohdeSchwarz.ViCom.FastACD.SMeasResult.SChannel.Direction">
Definition of link direction types.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.FastACD.SMeasResult.SChannel.rssiInDBm">
Measured received signal strength indicator (RSSI) value in dBm.

</member>
        <member name="F:RohdeSchwarz.ViCom.FastACD.SMeasResult.SChannel.bandwidthConfirmed">
For technologies that have variable channel bandwidths (i.e. LTE),
this indicates if the bandwidth has been confirmed.  For technologies
with a known bandwidth, this will always be True.

</member>
        <member name="F:RohdeSchwarz.ViCom.FastACD.SMeasResult.SChannel.bandwidthInHz">
Bandwidth of the channel, in Hz.

</member>
        <member name="F:RohdeSchwarz.ViCom.FastACD.SMeasResult.SChannel.frequencyInHz">
Channel frequency in Hz.

</member>
        <member name="F:RohdeSchwarz.ViCom.FastACD.SMeasResult.SChannel.technology">
Technology indicator for this ACD measurement result.  Only one technology
is reported in each measurement result.  For scanning on multiple
technologies, separate results are returned.

</member>
        <member name="F:RohdeSchwarz.ViCom.FastACD.SMeasResult.SChannel.chanResultTimeStampInMs">
Timestamp of when this channel was measured last.  GetTickCount() is 
used to provide the value, which is the number of milliseconds that 
have elapsed since the system was started.  The value wraps after 49.7 days.

</member>
        <member name="T:RohdeSchwarz.ViCom.FastACD.SMeasResult.SChannel">
Container for channel specific information.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.FastACD.SMeasResult.measurementStatus">
Measurement status indicator

\sa MeasurementStatus

</member>
        <member name="T:RohdeSchwarz.ViCom.FastACD.SMeasResult.MeasurementStatus">
A status indicator to report when FastACD is using more system resources for 
quick channel detection, or after channels have been found it is using
less system resources to monitor for new channels.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.FastACD.SMeasResult.acdResultTimeStampInMs">
PC local time when the ACD result was processed.

</member>
        <member name="T:RohdeSchwarz.ViCom.FastACD.SMeasResult">
The ACD measurement result returned by ViComFastACDInterface.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.FastACD.TechnologyState">
State of the technology according to ViCom
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.FastACD.ViComInterfaceVersion">
Data containers used for ViCom FastACD interface. Contains measurement configuration and result structures.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterface.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterface.GetType">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.IOT.CViComIotInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.IOT.CViComIotInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
@note
Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage, it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComIotInterface::GetResult() and vice versa.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.Net.IOT.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst,System.UInt32)">
            <summary>
Issue a request to the Layer 3 Decoder to decode the PDU contained by rSL3DecoderRequest. If the data has been decoded successfully within the time given by dwTimeOutInMs, the method creates the SL3DecoderResult and the buffer within on the heap, fills in the Layer 3 Decoder result and returns a pointer to it.
</summary>
            <param name="rSL3DecoderRequest">
Contains the data that was the result of an IoT measurement and holds the PDU data that shall be decoded.
</param>
            <param name="dwTimeOutInMs">
The time in milliseconds that the function should wait before returning an error, if the result buffer is empty.
</param>
            <return>
one measurement result on the heap, if the function succeeded. Otherwise NULL. Attention: The returned pointer is only valid until this function is called again.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterface.GetSettings">
            <summary>
By means of the functions SetConfiguration() internal settings of the NB-IoT-Scanner may be changed. The functions SelectReceiver() of CViComBasicInterface change basic settings. Except for frequency settings all other settings have default values. By means of this function you can retrieve the NB-Scanner settings which apply at the moment for measurements to be started or during running measurements. Note that the result, like all other results too, is only for reading. To change settings the functions mentioned above should be used.
</summary>
            <return>
pointer to a structure holding the current device settings. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterface.IssueDemodRequests(RohdeSchwarz.ViCom.Net.IOT.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary>
Use this function to issue commands (PDU requests, reset commands) for the BCH demodulator during measurement.
PDUs may be acquired for certain eNodeBs. PDU demodulation for eNodeBs or for channels may be reset.
</summary>
            <param name="rDemodRequests">
When the function is called, this pointer contains the request parameters. For details see SDemodRequests.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterface.GetChannelState(System.UInt32)">
            <summary>
GetChannelState returns the current status of the configurable settings from the channel.
</summary>
            <param name="dwChannelIndex">
Specifies the 0-based channel index to be queried.
</param>
            <return>
Returns an object of SChannelState which contains the current state for the channel. The items in SChannelState can be modified during a running measurement using the ModifyChannel method.
SChannelState and ModifyChannel.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterface.ModifyChannel(RohdeSchwarz.ViCom.Net.IOT.SChannelState!System.Runtime.CompilerServices.IsConst)">
            <summary>
ModifyChannel is used to modify configurable channel settings during a running measurement. SChannelState for items that can be modified.
</summary>
            <param name="sChannelState">
sChannelState contains the modified settings to be changed in the channel.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterface.AddChannel(System.Double,RohdeSchwarz.ViCom.Net.IOT.SFrequencySetting.OperationMode.Type)">
            <summary>
AddChannel is used to create additional channels during a running measurement. The measurement settings from channel index 0, as configured by SetConfiguration(), are used for the new channel. @note
This method can not be called in the idle state (IsMeasurementStarted() must return TRUE)
@note
Each channel combination can only be added once. Attempting to add a channel combination multiple times will return the index that is already present.
</summary>
            <param name="dChannelFrequencyInHz">
Center frequency in Hertz for the channel.
</param>
            <param name="operationMode">
Operation mode for the channel (IN_BAND/GUARD_BAND/STAND_ALONE).
</param>
            <return>
If success, the 0-based channel index for new channel is returned. If failure, 0xFFFFFFFF is returned indicating an invalid channel.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.IOT.SChannelSettings!System.Runtime.CompilerServices.IsConst,RohdeSchwarz.ViCom.Net.IOT.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary>
SetConfiguration
</summary>
            <param name="rChannelSettings">
Contains the definition which frequencies shall be measured.
SChannelSettings for a more detailed description on those settings.
</param>
            <param name="rDemodulationSettings">
Contains the definition which PDUs of BCH shall be measured.
SDemodulationSettings for a more detailed description on those settings.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterface.GetMeasRateLimits">
            <summary>
Limits for Parameter SFrequencySettings::dwMeasRatePer1000sec.
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterface.GetDemodThresholdLimits">
            <summary>
Limits for Parameter SDemodulationSettings::sSINRThresholdDB100
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterface.GetChannelCountLimits">
            <summary>
Limits for Parameter SChannelSettings::dwCount
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterface.GetBasicInterface">
            <summary>
The basic interface is a part of any application specific ViCom interface. It is used for different TSMW applications. The purpose is to control basic TSMW functions, which are not specific for a certain measurement. See CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterface.#ctor(RohdeSchwarz.ViCom.IOT.CViComIotInterface*)">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterface.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterface.m_converter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterface.m_nativeIf">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterface.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterface">
            <summary>
IoT measurement module for ViCom. Offers the configuration and result receiving methods for all IoT related measurement tasks.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData.Convert2M(RohdeSchwarz.ViCom.Technology.Type)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData.Convert2M(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData.Convert2M(RohdeSchwarz.ViCom.IOT.SMeasResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData.Convert2M(RohdeSchwarz.ViCom.IOT.SL3DecoderResult!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData.Convert2M(RohdeSchwarz.ViCom.IOT.SSettings!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData.Convert2M(RohdeSchwarz.ViCom.IOT.SChannelState)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData.Convert2M(RohdeSchwarz.ViCom.SRange&lt;System.Int16&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData.Convert2M(RohdeSchwarz.ViCom.SRange&lt;System.UInt32&gt;!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData.CleanUp(RohdeSchwarz.ViCom.IOT.SL3DecoderRequest*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.IOT.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.IOT.SL3DecoderRequest*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.IOT.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData.CleanUp(RohdeSchwarz.ViCom.IOT.SDemodRequests*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.IOT.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.IOT.SDemodRequests*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.IOT.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData.CleanUp(RohdeSchwarz.ViCom.IOT.SChannelState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.IOT.SChannelState!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.IOT.SChannelState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.IOT.SChannelState!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.Net.IOT.SFrequencySetting.OperationMode.Type)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData.CleanUp(RohdeSchwarz.ViCom.IOT.SDemodulationSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.IOT.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.IOT.SDemodulationSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.IOT.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData.CleanUp(RohdeSchwarz.ViCom.IOT.SChannelSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.IOT.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.IOT.SChannelSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.IOT.SChannelSettings!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData.Instance">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData.s_instance">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.DataConverterCViComIotInterfaceData">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.ICViComIotInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.Net.IOT.CViComIotInterfaceDataProcessor)">
            <summary>
Unregister a formerly registered ScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.ICViComIotInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.Net.IOT.CViComIotInterfaceDataProcessor)">
            <summary>
Register a ScannerData listener that will be notified when new data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
@note
Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage, it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComIotInterface::GetResult() and vice versa.
</summary>
            <param name="pListener">
The object that shall be notified when new measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.ICViComIotInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.Net.IOT.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst,System.UInt32)">
            <summary>
Issue a request to the Layer 3 Decoder to decode the PDU contained by rSL3DecoderRequest. If the data has been decoded successfully within the time given by dwTimeOutInMs, the method creates the SL3DecoderResult and the buffer within on the heap, fills in the Layer 3 Decoder result and returns a pointer to it.
</summary>
            <param name="rSL3DecoderRequest">
Contains the data that was the result of an IoT measurement and holds the PDU data that shall be decoded.
</param>
            <param name="dwTimeOutInMs">
The time in milliseconds that the function should wait before returning an error, if the result buffer is empty.
</param>
            <return>
one measurement result on the heap, if the function succeeded. Otherwise NULL. Attention: The returned pointer is only valid until this function is called again.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.ICViComIotInterface.GetSettings">
            <summary>
By means of the functions SetConfiguration() internal settings of the NB-IoT-Scanner may be changed. The functions SelectReceiver() of CViComBasicInterface change basic settings. Except for frequency settings all other settings have default values. By means of this function you can retrieve the NB-Scanner settings which apply at the moment for measurements to be started or during running measurements. Note that the result, like all other results too, is only for reading. To change settings the functions mentioned above should be used.
</summary>
            <return>
pointer to a structure holding the current device settings. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.ICViComIotInterface.IssueDemodRequests(RohdeSchwarz.ViCom.Net.IOT.SDemodRequests!System.Runtime.CompilerServices.IsConst)">
            <summary>
Use this function to issue commands (PDU requests, reset commands) for the BCH demodulator during measurement.
PDUs may be acquired for certain eNodeBs. PDU demodulation for eNodeBs or for channels may be reset.
</summary>
            <param name="rDemodRequests">
When the function is called, this pointer contains the request parameters. For details see SDemodRequests.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.ICViComIotInterface.GetChannelState(System.UInt32)">
            <summary>
GetChannelState returns the current status of the configurable settings from the channel.
</summary>
            <param name="dwChannelIndex">
Specifies the 0-based channel index to be queried.
</param>
            <return>
Returns an object of SChannelState which contains the current state for the channel. The items in SChannelState can be modified during a running measurement using the ModifyChannel method.
SChannelState and ModifyChannel.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.ICViComIotInterface.ModifyChannel(RohdeSchwarz.ViCom.Net.IOT.SChannelState!System.Runtime.CompilerServices.IsConst)">
            <summary>
ModifyChannel is used to modify configurable channel settings during a running measurement. SChannelState for items that can be modified.
</summary>
            <param name="sChannelState">
sChannelState contains the modified settings to be changed in the channel.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.ICViComIotInterface.AddChannel(System.Double,RohdeSchwarz.ViCom.Net.IOT.SFrequencySetting.OperationMode.Type)">
            <summary>
AddChannel is used to create additional channels during a running measurement. The measurement settings from channel index 0, as configured by SetConfiguration(), are used for the new channel. @note
This method can not be called in the idle state (IsMeasurementStarted() must return TRUE)
@note
Each channel combination can only be added once. Attempting to add a channel combination multiple times will return the index that is already present.
</summary>
            <param name="dChannelFrequencyInHz">
Center frequency in Hertz for the channel.
</param>
            <param name="operationMode">
Operation mode for the channel (IN_BAND/GUARD_BAND/STAND_ALONE).
</param>
            <return>
If success, the 0-based channel index for new channel is returned. If failure, 0xFFFFFFFF is returned indicating an invalid channel.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.ICViComIotInterface.SetConfiguration(RohdeSchwarz.ViCom.Net.IOT.SChannelSettings!System.Runtime.CompilerServices.IsConst,RohdeSchwarz.ViCom.Net.IOT.SDemodulationSettings!System.Runtime.CompilerServices.IsConst)">
            <summary>
SetConfiguration
</summary>
            <param name="rChannelSettings">
Contains the definition which frequencies shall be measured.
SChannelSettings for a more detailed description on those settings.
</param>
            <param name="rDemodulationSettings">
Contains the definition which PDUs of BCH shall be measured.
SDemodulationSettings for a more detailed description on those settings.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.ICViComIotInterface.GetMeasRateLimits">
            <summary>
Limits for Parameter SFrequencySettings::dwMeasRatePer1000sec.
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.ICViComIotInterface.GetDemodThresholdLimits">
            <summary>
Limits for Parameter SDemodulationSettings::sSINRThresholdDB100
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.ICViComIotInterface.GetChannelCountLimits">
            <summary>
Limits for Parameter SChannelSettings::dwCount
</summary>
            <return>
pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid as long as no other interface method is called.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.ICViComIotInterface.GetBasicInterface">
            <summary>
The basic interface is a part of any application specific ViCom interface. It is used for different TSMW applications. The purpose is to control basic TSMW functions, which are not specific for a certain measurement. See CViComBasicInterface for specification of basic interface functions.
</summary>
            <return>
reference to the BasicInterface object that can be used to control basic functions like StartMeasurement() and StopMeasurement() et al.
</return>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.ICViComIotInterface">
            <summary>
IoT measurement module for ViCom. Offers the configuration and result receiving methods for all IoT related measurement tasks.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterfaceDataProcessor.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.CViComIotInterfaceDataProcessor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComBasicInterface.Dispose">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComBasicInterface.UnregisterRawDataListener(RohdeSchwarz.ViCom.Net.CViComRawDataProcessor)">
            <summary>
Unregister a formerly registered RawScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
            <return>
if listener has been removed from the list of registered listeners or not
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComBasicInterface.RegisterRawDataListener(RohdeSchwarz.ViCom.Net.CViComRawDataProcessor)">
            <summary>
Register a RawScannerData listener that will be notified when new raw data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
</summary>
            <param name="pListener">
The object that shall be notified when new raw measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
            <return>
if listener has been appended to the list of registered listeners or not
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComBasicInterface.HasMeasurementStopped(System.UInt32)">
            <summary>
This function checks to see if measurement really has stopped.
</summary>
            <param name="dwTimeOutInMs">
The maximum time that this function should delay, before it returns. If the measurements are successfully stopped before the timeout, then the function will return immediately.
@note
The general recommendation for the dwTimeOutInMs values is 15 seconds.
</param>
            <return>
If the measurement has been successfully stopped, this function returns true. If the measurement has not successfully stopped, it returns false.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComBasicInterface.StopMeasurement">
            <summary>
Stop the measurement This function stops R&amp;S TSMx scanner measurement. To confirm that measurement has been successfully stopped, HasMeasurementStopped() should be called.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComBasicInterface.GetMessagesDuringStartMeasurement">
            <summary>
If StartMeasurement fails then additional messages received from the receiver can be retrieved with GetMessagesDuringStartMeasurement().
</summary>
            <return>
Pointer to a list of SMessage objects, containing message information if operation succeeded.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComBasicInterface.IsMeasurementStarted">
            <summary>
This functions allows to retrieve the current state of measurements.
</summary>
            <return>
true if measurement is running. If an error occurred, a CViComError is thrown.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComBasicInterface.StartMeasurement">
            <summary>
This is possible if all preconditions have been met e.g frequencies have been selected, and a previous measurement has been stopped successfully. A sucessful stop can be checked with the HasMeasurementStopped() function below.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.Net.SPreSelection.Type)">
            <summary>
This functions allows to set pre-selection configuration on R&amp;S TSME6 receivers.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComBasicInterface.GetPortConfiguration">
            <summary>
Not supported yet! This functions allows to retrieve the currently active state for any supported port by the connected receiver device. Be aware that there's no synchronization mechanism with other ViCom instances using the same receiver device. It's totally up to the user to ensure that nobody changes the configuration in the meantime.
@note
Reading the port configuration is only possible in idle state, e.g. before any call of the StartMeasurement() method.
@note
For unsupported ports / devices a VICEC_FUNCTION_NOT_SUPPORTED_BY_DEVICE error is returned.
If SelectReceiver was not called once before, the receiver at the index 0 is used by default.
</summary>
            <param name="enPort">
Selected port for the status query.
</param>
            <return>
the port configuration if operation succeeded. If an error occurred, a CViComError is thrown.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComBasicInterface.SetPortConfiguration(RohdeSchwarz.ViCom.Net.STSMPort!System.Runtime.CompilerServices.IsConst)">
            <summary>
Some receivers support user specific configuration of their external multi purpose ports. Be aware that there's no synchronization mechanism with other ViCom instances using the same receiver device. It's totally up to the user to ensure that nobody changes the configuration in the meantime. Each port has to be treated separately, for example activating PPS output on receiver port x does not automatically switch off PPS output on the port which was configured before.
@note
Changing the port configuration is only possible in idle state, e.g. before any call of the StartMeasurement() method.
If SelectReceiver was not called once before, the receiver at the index 0 is used by default.
@note
For unsupported ports / devices a VICEC_FUNCTION_NOT_SUPPORTED_BY_DEVICE error is returned.
</summary>
            <param name="rPortConfiguration">
Desired port and configuration provided as STSMPort structure.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComBasicInterface.LoadTransducerFile(System.String)">
            <summary>
Some receivers support the usage of transducer files to take antenna specific parameters into account during measurement. Basically these XML files contain tables of frequency dependent gain / attenuation values for the used antenna on a per front end basis. This means it's possible to specify the antenna parameters for every front end on every supported receiver device. Be aware that there's no synchronization mechanism with other ViCom instances using the same receiver device. It's totally up to the user to ensure that nobody changes the configuration in the meantime!
@note
It is crucial to load the transducer tables when the receiver is in idle state, e.g. before any call of the StartMeasurement() method.
If SelectReceiver() was not called once before, the receiver at the index 0 is used by default.
@note
Unsupported receivers return the VICEC_FUNCTION_NOT_SUPPORTED_BY_DEVICE error code.
</summary>
            <param name="pcTransducerFilePath">
Path of the transducer XML file. Sample file provided in ".\tools\TsmTransducerTables.xml". Use NULL to clear recently set tables.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComBasicInterface.LoadTransducerFile">
            <summary>
Some receivers support the usage of transducer files to take antenna specific parameters into account during measurement. Basically these XML files contain tables of frequency dependent gain / attenuation values for the used antenna on a per front end basis. This means it's possible to specify the antenna parameters for every front end on every supported receiver device. Be aware that there's no synchronization mechanism with other ViCom instances using the same receiver device. It's totally up to the user to ensure that nobody changes the configuration in the meantime!
@note
It is crucial to load the transducer tables when the receiver is in idle state, e.g. before any call of the StartMeasurement() method.
If SelectReceiver() was not called once before, the receiver at the index 0 is used by default.
@note
Unsupported receivers return the VICEC_FUNCTION_NOT_SUPPORTED_BY_DEVICE error code.
</summary>
            <param name="pcTransducerFilePath">
Path of the transducer XML file. Sample file provided in ".\tools\TsmTransducerTables.xml". Use NULL to clear recently set tables.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComBasicInterface.Identify">
            <summary>
Not supported yet! When many receivers are connected to the control computer, an application can use this function to trigger the identify functionality which leads to flashing LEDs on the receiver front panel.
If SelectReceiver was not called once before, the receiver at the index 0 is used by default.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComBasicInterface.GetSelectedReceiverIndex">
            <summary>
This function is the counterpart for SelectReceiver() and retrieves the index of the currently selected receiver.
</summary>
            <return>
receiver index if operation succeeded. If an error occurred, a CViComError is thrown.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComBasicInterface.SelectReceiver(System.UInt32)">
            <summary>
When many receivers are connected to the control computer, an application can use this function to select which receiver is communicated.
If SelectReceiver is not called, the receiver at the index 0 which is next to the computer is used by default.
</summary>
            <param name="dwReceiverIndex">
The position of the connected R&amp;S TSM, given by the SConnectedReceiverTable returned by GetConnectedReceivers(), above. dwReceiverIndex is the array index of SConnectedReceiverTable::Receiver[dwMaxCountOfConnectedReceivers].
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComBasicInterface.GetConnectedReceivers(System.UInt32)">
            <summary>
This function retrieves the receivers that were connected to the computer when the Connect() function returned successfully.
</summary>
            <param name="dwTimeOutInMs">
The maximum time that this function should delay, before it returns. If query is successfully done before the timeout, then the function will return immediately.
</param>
            <return>
a list of connected devices if successful, NULL otherwise.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComBasicInterface.GetVersionInfoText">
            <summary />
            <return>
the character based version information of the interface, or NULL if an error occurred. The result specifies the version of the ViCom interface that implements the interface.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComBasicInterface.GetVersionInfo">
            <summary />
            <return>
the version of the interface, or NULL if an error occurred. The result specifies the version of the ViCom interface that implements the interface.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComBasicInterface.#ctor(RohdeSchwarz.ViCom.CViComBasicInterface*)">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComBasicInterface.listenerConverter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComBasicInterface.m_converter">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComBasicInterface.m_nativeIf">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComBasicInterface.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComBasicInterface">
            <summary>
The functions in this section are accessed via a function called GetBasicInterface(), which is available from any ViCom interface object. For example, to call the Basic interface function GetConnectedReceivers(), use the following code:
myViComIF-&gt;GetBasicInterface().GetConnectedReceivers(myViComError);
where myViComIF is a pointer to a ViCom interface object.
There are two kinds of interface functions. The first is called control function and does not return specific data. The second kind is called request function which returns requested data.
The first parameter of both, control and request functions, is a reference to an instance of CViComError. In this instance possible error information during the execution of the interface function is stored.
A control function returns a boolean value which is true if no error occurred. The return value of a request function is a pointer to the requested data. This pointer is NULL if an error occurred. If no error occurred the data the pointer points to are valid as long as no other interface function (control or request) is called. The data are for reading only.
This specification applies also for interface functions of CViComLoader and application specific interfaces e.g. CViComBasicInterface.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.DataConverterCViComBasicInterfaceData.Convert2M(RohdeSchwarz.ViCom.SViComList&lt;RohdeSchwarz.ViCom.SMessage&gt;*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.DataConverterCViComBasicInterfaceData.Convert2M(RohdeSchwarz.ViCom.STSMPort!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.DataConverterCViComBasicInterfaceData.Convert2M(RohdeSchwarz.ViCom.SConnectedReceiverTable!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.DataConverterCViComBasicInterfaceData.Convert2M(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.DataConverterCViComBasicInterfaceData.Convert2M(RohdeSchwarz.ViCom.SVersionInfo!System.Runtime.CompilerServices.IsConst*)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.DataConverterCViComBasicInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.Net.SPreSelection.Type)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.DataConverterCViComBasicInterfaceData.CleanUp(RohdeSchwarz.ViCom.STSMPort*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.STSMPort!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.DataConverterCViComBasicInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.STSMPort*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.STSMPort!System.Runtime.CompilerServices.IsConst)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.DataConverterCViComBasicInterfaceData.CleanUp(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**,System.String)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.DataConverterCViComBasicInterfaceData.Convert2Cpp(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**,System.String)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.DataConverterCViComBasicInterfaceData.CleanUp(RohdeSchwarz.ViCom.SReceiverSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.SReceiverSettings)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.DataConverterCViComBasicInterfaceData.Convert2Cpp(RohdeSchwarz.ViCom.SReceiverSettings*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.Net.SReceiverSettings)">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.DataConverterCViComBasicInterfaceData.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.DataConverterCViComBasicInterfaceData.Instance">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.DataConverterCViComBasicInterfaceData.s_instance">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.DataConverterCViComBasicInterfaceData">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComBasicInterface.UnregisterRawDataListener(RohdeSchwarz.ViCom.Net.CViComRawDataProcessor)">
            <summary>
Unregister a formerly registered RawScannerData listener to remove it from the list of objects that shall get notification about new measurement data.
</summary>
            <param name="pListener">
The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered objects, an error is indicated.
</param>
            <return>
if listener has been removed from the list of registered listeners or not
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComBasicInterface.RegisterRawDataListener(RohdeSchwarz.ViCom.Net.CViComRawDataProcessor)">
            <summary>
Register a RawScannerData listener that will be notified when new raw data is available. Note that it is important to Unregister the listener again once it is getting deleted, to avoid crashes.
</summary>
            <param name="pListener">
The object that shall be notified when new raw measurement data is available. This must not be null. If the listener has already been registered to the interface, it will not be registered a second time. Instead, an error will be indicated.
</param>
            <return>
if listener has been appended to the list of registered listeners or not
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComBasicInterface.HasMeasurementStopped(System.UInt32)">
            <summary>
This function checks to see if measurement really has stopped.
</summary>
            <param name="dwTimeOutInMs">
The maximum time that this function should delay, before it returns. If the measurements are successfully stopped before the timeout, then the function will return immediately.
@note
The general recommendation for the dwTimeOutInMs values is 15 seconds.
</param>
            <return>
If the measurement has been successfully stopped, this function returns true. If the measurement has not successfully stopped, it returns false.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComBasicInterface.StopMeasurement">
            <summary>
Stop the measurement This function stops R&amp;S TSMx scanner measurement. To confirm that measurement has been successfully stopped, HasMeasurementStopped() should be called.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComBasicInterface.GetMessagesDuringStartMeasurement">
            <summary>
If StartMeasurement fails then additional messages received from the receiver can be retrieved with GetMessagesDuringStartMeasurement().
</summary>
            <return>
Pointer to a list of SMessage objects, containing message information if operation succeeded.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComBasicInterface.IsMeasurementStarted">
            <summary>
This functions allows to retrieve the current state of measurements.
</summary>
            <return>
true if measurement is running. If an error occurred, a CViComError is thrown.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComBasicInterface.StartMeasurement">
            <summary>
This is possible if all preconditions have been met e.g frequencies have been selected, and a previous measurement has been stopped successfully. A sucessful stop can be checked with the HasMeasurementStopped() function below.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.Net.SPreSelection.Type)">
            <summary>
This functions allows to set pre-selection configuration on R&amp;S TSME6 receivers.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComBasicInterface.GetPortConfiguration">
            <summary>
Not supported yet! This functions allows to retrieve the currently active state for any supported port by the connected receiver device. Be aware that there's no synchronization mechanism with other ViCom instances using the same receiver device. It's totally up to the user to ensure that nobody changes the configuration in the meantime.
@note
Reading the port configuration is only possible in idle state, e.g. before any call of the StartMeasurement() method.
@note
For unsupported ports / devices a VICEC_FUNCTION_NOT_SUPPORTED_BY_DEVICE error is returned.
If SelectReceiver was not called once before, the receiver at the index 0 is used by default.
</summary>
            <param name="enPort">
Selected port for the status query.
</param>
            <return>
the port configuration if operation succeeded. If an error occurred, a CViComError is thrown.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComBasicInterface.SetPortConfiguration(RohdeSchwarz.ViCom.Net.STSMPort!System.Runtime.CompilerServices.IsConst)">
            <summary>
Some receivers support user specific configuration of their external multi purpose ports. Be aware that there's no synchronization mechanism with other ViCom instances using the same receiver device. It's totally up to the user to ensure that nobody changes the configuration in the meantime. Each port has to be treated separately, for example activating PPS output on receiver port x does not automatically switch off PPS output on the port which was configured before.
@note
Changing the port configuration is only possible in idle state, e.g. before any call of the StartMeasurement() method.
If SelectReceiver was not called once before, the receiver at the index 0 is used by default.
@note
For unsupported ports / devices a VICEC_FUNCTION_NOT_SUPPORTED_BY_DEVICE error is returned.
</summary>
            <param name="rPortConfiguration">
Desired port and configuration provided as STSMPort structure.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComBasicInterface.LoadTransducerFile(System.String)">
            <summary>
Some receivers support the usage of transducer files to take antenna specific parameters into account during measurement. Basically these XML files contain tables of frequency dependent gain / attenuation values for the used antenna on a per front end basis. This means it's possible to specify the antenna parameters for every front end on every supported receiver device. Be aware that there's no synchronization mechanism with other ViCom instances using the same receiver device. It's totally up to the user to ensure that nobody changes the configuration in the meantime!
@note
It is crucial to load the transducer tables when the receiver is in idle state, e.g. before any call of the StartMeasurement() method.
If SelectReceiver() was not called once before, the receiver at the index 0 is used by default.
@note
Unsupported receivers return the VICEC_FUNCTION_NOT_SUPPORTED_BY_DEVICE error code.
</summary>
            <param name="pcTransducerFilePath">
Path of the transducer XML file. Sample file provided in ".\tools\TsmTransducerTables.xml". Use NULL to clear recently set tables.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComBasicInterface.LoadTransducerFile">
            <summary>
Some receivers support the usage of transducer files to take antenna specific parameters into account during measurement. Basically these XML files contain tables of frequency dependent gain / attenuation values for the used antenna on a per front end basis. This means it's possible to specify the antenna parameters for every front end on every supported receiver device. Be aware that there's no synchronization mechanism with other ViCom instances using the same receiver device. It's totally up to the user to ensure that nobody changes the configuration in the meantime!
@note
It is crucial to load the transducer tables when the receiver is in idle state, e.g. before any call of the StartMeasurement() method.
If SelectReceiver() was not called once before, the receiver at the index 0 is used by default.
@note
Unsupported receivers return the VICEC_FUNCTION_NOT_SUPPORTED_BY_DEVICE error code.
</summary>
            <param name="pcTransducerFilePath">
Path of the transducer XML file. Sample file provided in ".\tools\TsmTransducerTables.xml". Use NULL to clear recently set tables.
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComBasicInterface.Identify">
            <summary>
Not supported yet! When many receivers are connected to the control computer, an application can use this function to trigger the identify functionality which leads to flashing LEDs on the receiver front panel.
If SelectReceiver was not called once before, the receiver at the index 0 is used by default.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComBasicInterface.GetSelectedReceiverIndex">
            <summary>
This function is the counterpart for SelectReceiver() and retrieves the index of the currently selected receiver.
</summary>
            <return>
receiver index if operation succeeded. If an error occurred, a CViComError is thrown.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComBasicInterface.SelectReceiver(System.UInt32)">
            <summary>
When many receivers are connected to the control computer, an application can use this function to select which receiver is communicated.
If SelectReceiver is not called, the receiver at the index 0 which is next to the computer is used by default.
</summary>
            <param name="dwReceiverIndex">
The position of the connected R&amp;S TSM, given by the SConnectedReceiverTable returned by GetConnectedReceivers(), above. dwReceiverIndex is the array index of SConnectedReceiverTable::Receiver[dwMaxCountOfConnectedReceivers].
</param>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComBasicInterface.GetConnectedReceivers(System.UInt32)">
            <summary>
This function retrieves the receivers that were connected to the computer when the Connect() function returned successfully.
</summary>
            <param name="dwTimeOutInMs">
The maximum time that this function should delay, before it returns. If query is successfully done before the timeout, then the function will return immediately.
</param>
            <return>
a list of connected devices if successful, NULL otherwise.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComBasicInterface.GetVersionInfoText">
            <summary />
            <return>
the character based version information of the interface, or NULL if an error occurred. The result specifies the version of the ViCom interface that implements the interface.
</return>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.ICViComBasicInterface.GetVersionInfo">
            <summary />
            <return>
the version of the interface, or NULL if an error occurred. The result specifies the version of the ViCom interface that implements the interface.
</return>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.ICViComBasicInterface">
            <summary>
The functions in this section are accessed via a function called GetBasicInterface(), which is available from any ViCom interface object. For example, to call the Basic interface function GetConnectedReceivers(), use the following code:
myViComIF-&gt;GetBasicInterface().GetConnectedReceivers(myViComError);
where myViComIF is a pointer to a ViCom interface object.
There are two kinds of interface functions. The first is called control function and does not return specific data. The second kind is called request function which returns requested data.
The first parameter of both, control and request functions, is a reference to an instance of CViComError. In this instance possible error information during the execution of the interface function is stored.
A control function returns a boolean value which is true if no error occurred. The return value of a request function is a pointer to the requested data. This pointer is NULL if an error occurred. If no error occurred the data the pointer points to are valid as long as no other interface function (control or request) is called. The data are for reading only.
This specification applies also for interface functions of CViComLoader and application specific interfaces e.g. CViComBasicInterface.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComRawDataProcessor.RawDataInfo">
Definition of raw packet types.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SL3DecoderResult.pcPduText">
            <summary>
Pointer to a buffer containing the decoded PDU text, as zero terminated ASCII string.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SL3DecoderResult.dwStringLength">
            <summary>
Number of decoding result text bytes in the buffer (incl. terminating '\0').
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SL3DecoderResult.ePDU">
            <summary>
PDU contained.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.SL3DecoderResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.SL3DecoderResult">
            <summary>
Result from the Layer 3 Decoder.
The string returned via this structure is formatted using the ASN.1 notation of the standard (3GPP TS 36.331). It contains one completely decoded PDU terminated by CR+LF. Data subsets (i.e. Information Elements) within the string are headed by "CR+LF+{", indented via spaces and terminated by "}+CR+LF".
In addition to the standard, some Information Elements are added twice (see example cellIdentity below):
-Formatted exactly according to the standard.
-Formatted with unit or format description between square brackets ("[" "]") and representing a reasonable value.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SL3DecoderRequest.pbBitStream">
            <summary>
Pointer to a buffer containing the PDU bits. The first bit is stored in bit 7 of pbBitStream[0]. If dwBitCount is not a multiple of 8, there are remaining bits, which shall be ignored.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SL3DecoderRequest.dwBitCount">
            <summary>
Number of bits for this PDU.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SL3DecoderRequest.ePDU">
            <summary>
PDU contained.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.SL3DecoderRequest.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.SL3DecoderRequest">
            <summary>
Request data container for the Layer 3 Decoder. Is used to decode a demodulation result into a human-readable structure.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.pDemodResult">
            <summary>
Pointer to demodulation result. If NULL, no demodulation result is present.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.ListOfSignals">
            <summary>
The actual set of signals associated with the current channel specified by the dwChannelIndex member.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.ListMeasurementRatesTotal">
            <summary>
List of measurement rates rates and other values in relation to the measurement rate for one or more time intervals of measurement rate calculation. The measurement rate is the ratio of all measurements of the same type of measurement at the time the measurement signals have been picked from the air. So the time of arrival at the host application is not used. And equal measurements at different RF channels are put together.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.u64DeviceTimeInNs">
            <summary>
The time when the signal was started to being measured on the device, with a higher resolution than the default PC clock. This time is relative to the last restart of the device.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.dwPcTimeStampInMs">
            <summary>
PC local time when the signal was measured (or was started to being measured) on the device.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.dwChannelIndex">
            <summary>
The channel to which all the data relates is specified using this index. The index refers to the position in the SChannelSettings::pTableOfFrequencySetting array.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SDemodResult.bOperationMode">
            <summary>
Indicates operational mode Inband - 1 Guardband - 2 Standalone - 3 UNKNOWN - SDefs::INVALID_BYTE_VALUE
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SDemodResult.pbActiveAntennaMask">
            <summary>
Bits 0 to 1 are set to indicate that antenna port 0 to antenna port 1 are active if pbActiveAntennaMask is not NULL.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SDemodResult.wPhysicalCellId">
            <summary>
The physical Cell ID, which can take one from the values defined by [0;503].
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SDemodResult.pbBitStream">
            <summary>
Pointer to (dwBitCount + 7) / 8 bytes which contain the PDU bits. The first bit is stored in the bit 7 of pbBitStream[0]. If dwBitCount is not a multiple of 8, the trailing bits in the last byte pbBitStream[(dwBitCount + 7) / 8 - 1] shall be ignored.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SDemodResult.dwBitCount">
            <summary>
Number of bits the PDU consists of.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SDemodResult.ePDU">
            <summary>
PDU that has been demodulated
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SDemodResult.dwStopTimeInMs">
            <summary>
This is the last time in ms of signals used for this message. All IQ signals used to produce this demodulation result are in between dwStartTimeInMs and dwStopTimeInMs.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SDemodResult.dwStartTimeInMs">
            <summary>
This is the first time in ms of signals used for this message.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SDemodResult.dwFirstBtsId">
            <summary>
The demodulator fills this parameter with the BTS ID the scanner assigned to this BTS first. If later on, the scanner uses a different BTS ID, but after demodulation it is detected that it is the same eNodeB, the demodulator fills this value with the first BTS ID the scanner used. Example: The scanner has measured a eNodeB with ID = 10 and the demodulator has demodulated it successfully. 20 minutes later the scanner found signals of a eNodeB with ID = 55. After demodulating, the demodulator finds out (by comparing unique BTS information from decoding), that it is the same eNodeB as the one with ID = 10. In this case, dwFirstBtsId will be set to 10.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SDemodResult.dwBtsId">
            <summary>
Unique BTS ID provided by the scanner as SSignals::dwScannerBtsIdent. Each time the scanner is not sure whether the signal it could demodulate belongs to an already known eNodeB, it sets a new identifier here. I.e. the same eNodeB could have multiple dwBtsIds, but each dwBtsId relates always to a single cell.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SDemodResult.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SDemodResult.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SDemodResult">
            <summary>
BCH demodulator results
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.dFrameArrivalOffsetToBlockInS">
            <summary>
Time difference between Radio Frame Time of Arrival (TOA) and u64DeviceTimeInNs. The time, when the maximum CIR peak has been received, is used as Radio Frame Time of Arrival. This feature does not require a GPS antenna to be connected to the receiver. If not valid set to DBL_MAX.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.dFrameToaOffsetToPpsInSec">
            <summary>
Time difference between Radio Frame Time of Arrival (TOA) and the latest PPS pulse received. The time, when the maximum CIR peak has been received, is used as Radio Frame Time of Arrival. This feature requires a GPS antenna to be connected to the receiver. If not valid set to DBL_MAX.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.wPhysicalCellId">
            <summary>
Physical Cell ID 0 - 503.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.dwScannerBtsIdent">
            <summary>
Internal ID assigned from the scanner to that specific station. Different stations will become different IDs assigned to them, but if the scanner cannot identify a cell exactly, it also might assign different IDs to the same station.
@note
This is unique only within one measurement. Do not use it when combining the results of different measurements
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.ListOfReferenceSignals">
            <summary>
List of the reference signals.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.ListOfSecondarySyncSignals">
            <summary>
List of the secondary synchronization signals.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.ListOfPrimarySyncSignals">
            <summary>
List of the primary synchronization signals.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.SReferenceSignal.fNrsCinrInDB">
            <summary>
Measured Narrowband Reference Signal Carrier to Interference and Noise Ratio in dBm.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.SReferenceSignal.fNrsRssiInDBm">
            <summary>
Measured Narrowband Reference Signal Received Signal Strength Indicator in dBm.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.SReferenceSignal.fNrsrqInDB">
            <summary>
Measured Narrowband Reference Signal Received Quality in dB.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.SReferenceSignal.fNrsrpInDBm">
            <summary>
Measured Narrowband Reference Signal Received Power in dBm.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.SReferenceSignal.bTxAntennaMask">
            <summary>
If 0, then no reference signal measurement was performed and all further values are invalid. Bit 0 to Bit 1 is set when the corresponding antenna 0 to 1 was used for measurement.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.SReferenceSignal.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.SReferenceSignal.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.SReferenceSignal">
            <summary>
Structure of the reference signals
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.SSyncSignal.fNsssCinrInDB">
            <summary>
CINR of narrowband synchronization signal in dBm.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.SSyncSignal.fNrssiInDBm">
            <summary>
RSSI of narrowband synchronization signal in dBm.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.SSyncSignal.fNsssPowerInDBm">
            <summary>
Correlated power of narrowband synchronization signal in dBm.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.SSyncSignal.ToString">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.SSyncSignal.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals.SSyncSignal">
            <summary>
Structure of the primary and secondary synchronization signals
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.SMeasResult.SSignals">
            <summary>
Actual measurement values for a single server.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.SMeasResult">
            <summary>
The NB-IoT measurement result for a single channel returned by CViComIotInterface::GetResult().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SSettings.DemodulationSettings">
            <summary>
Configuration of the BCH demodulation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SSettings.ChannelSettings">
            <summary>
The set of frequencies that shall be measured.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SSettings.dwReceiverIndex">
            <summary>
Index to SConnectedReceiverTable::Receiver of the currently selected receiver.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.SSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.SSettings">
            <summary>
This structure holds all the measurement setup that is configured in the ViCom NB-IoT scanner module. It is a result of the CViComIoTInterface::GetSettings() method.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SDemodulationSettings.sStartMeasurementRequests">
            <summary>
The requests for the general start measurement command.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SDemodulationSettings.dwFrontEndSelectionMask">
            <summary>
Receiver front end to be used by the demodulator for this channel. If no demodulation shall be provided, this shall be set to 0. Demodulation tasks are not allowed to contain multiple FE's.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SDemodulationSettings.sSINRThresholdDB100">
            <summary>
SINR threshold for demodulation, given in 1/100 dBm. For default value and range see GetDemodThresholdLimits().
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.SDemodulationSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.SDemodulationSettings">
            <summary>
This structure is used to configure the BCH demodulation process.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SDemodRequests.pDemodRequests">
            <summary>
Pointer to an array of demodulation requests. Must be NULL, if no demodulation shall be done.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SDemodRequests.dwCountOfRequests">
            <summary>
Number of demodulation requests. Must be 0, if no demodulation shall be done.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.SDemodRequests.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SDemodRequests.SDemodRequest.dwBtsId">
            <summary>
Unique BTS ID provided by the scanner as SSignals::dwScannerBtsIdent. This ID is used by the BCHDemodulator to demodulate a specific BTS, when the bDemodulationMode is set to ON_CMD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SDemodRequests.SDemodRequest.wRepetitionTimeOutInMs">
            <summary>
Repetition time out in ms (only used if bDemodulationMode == REPETITION).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SDemodRequests.SDemodRequest.eDemodulationMode">
            <summary>
The mode used for BCH demodulation.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SDemodRequests.SDemodRequest.ePDU">
            <summary>
The PDU to be demodulated.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SDemodRequests.SDemodRequest.dwChannelIndex">
            <summary>
Index of the frequency in SChannelSettings::aTableOfFrequencySetting.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.SDemodRequests.SDemodRequest.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.SDemodRequests.SDemodRequest">
            <summary>
There must be one instance of this structure for each BCH demodulation request, therefore different PDUs can be measured on different channels.
Example for start measurement: On the first channel SIBs 3 and 4 shall be decoded, on the the second channel SIBs 3, 5 and 7 shall be decoded. SIB 5 shall be decoded repeatedly every 10 seconds (10000 ms) and SIB 7 shall be decoded on demand. This requires five structures containing the following parameter sets: (0,&lt;sp&gt;&lt;/sp&gt;SIB3,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(0,&lt;sp&gt;&lt;/sp&gt;SIB4,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(1,&lt;sp&gt;&lt;/sp&gt;SIB3,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(1,&lt;sp&gt;&lt;/sp&gt;SIB5,&lt;sp&gt;&lt;/sp&gt;REPETITION,&lt;sp&gt;&lt;/sp&gt;10000,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0)(1,&lt;sp&gt;&lt;/sp&gt;SIB7,&lt;sp&gt;&lt;/sp&gt;ON_CMD,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;0) Example during measurement: On channel 0 PDU demodulation shall be completely reset for the BTS identified by ID 3 and on the the second channel SIB 7 shall be decoded for the BTS identified by ID 4 SC 5 with a timeout for the request of 1 sec (1000ms): (0,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;CHANNEL_RESET,&lt;sp&gt;&lt;/sp&gt;0,&lt;sp&gt;&lt;/sp&gt;3,&lt;sp&gt;&lt;/sp&gt;5)(1,&lt;sp&gt;&lt;/sp&gt;PDU_FOR_SIB7,&lt;sp&gt;&lt;/sp&gt;ON_CMD,&lt;sp&gt;&lt;/sp&gt;1000,&lt;sp&gt;&lt;/sp&gt;4,&lt;sp&gt;&lt;/sp&gt;5)@note
You are responsible to manage memory, when you use SetDemodulationSettings(). All parameters which are not necessary for a certain request shall be set to 0.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.SDemodRequests">
            <summary>
This structure is used to configure PDU requests. It is used in start measurement requests and it is used to issue BCH demodulation requests during measurement, e.g. SIB requests on demand or to reset SIB demodulation.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.DemodMode.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.DemodMode.Type.CHANNEL_RESET">
            <summary>
Delete all demodulation results for all BTS at the specified channel. Restart demodulation for this channel as specified in the command. This can be requested only during a running measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.DemodMode.Type.BTS">
            <summary>
The demodulation is only for a special BTS. This can be requested only during a running measurement and when the PDU was also requested in the start measurement frame. If dwTimeOutOrRepetitionDelayIn100ms is different from 0 then the demodulation is only tried during the given time.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.DemodMode.Type.REPETITION">
            <summary>
After each successful demodulation a new one will be started automatically after the repetition time specified in wRepetitionDelayIn100ms. Only to be used in start measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.DemodMode.Type.ON_CMD">
            <summary>
The PDU is only demodulated if an extra command for demodulation requests the demodulation.
If this is used, then no PDU is decoded until it is explicitly requested. The method IssueDemodRequests can be used for that purpose.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.DemodMode.Type.ONCE">
            <summary>
Demodulate the PDU for each BTS at the specified channel only once. Only to be used in start measurement.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.DemodMode.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.DemodMode">
            <summary>
This enumeration defines modes for the BCH demodulation. Use this in the SDemodRequests structure to specify when the demodulation of this PDU shall be done.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.Pdu.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.Pdu.Type.UNKNOWN">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.Pdu.Type.SIB22">
            <summary>
SIB 22 is PDU 52.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.Pdu.Type.SIB20">
            <summary>
SIB 20 is PDU 50.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.Pdu.Type.SIB16">
            <summary>
SIB 16 is PDU 46.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.Pdu.Type.SIB15">
            <summary>
SIB 15 is PDU 45.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.Pdu.Type.SIB14">
            <summary>
SIB 14 is PDU 44.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.Pdu.Type.SIB5">
            <summary>
SIB 5 is PDU 35.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.Pdu.Type.SIB4">
            <summary>
SIB 4 is PDU 34.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.Pdu.Type.SIB3">
            <summary>
SIB 3 is PDU 33.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.Pdu.Type.SIB2">
            <summary>
SIB 2 is PDU 32.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.Pdu.Type.SIB1">
            <summary>
SIB 1 is PDU 31.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.Pdu.Type.MIB">
            <summary>
MIB is PDU 30.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.Pdu.Type.UNDEFINED">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.Pdu.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.Pdu">
            <summary>
This enumeration defines IDs for the NB-IoT Layer 3 PDUs. Use this in the SDemodRequest structure to specify which PDUs shall be decoded.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SChannelSettings.pTableOfFrequencySetting">
            <summary>
This array of structures can be filled with single frequency configurations. Only dwCount entries from this table will be used.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SChannelSettings.dwCount">
            <summary>
Number of frequency configurations that shall be used from the pTableOfFrequencySetting to perform the measurement tasks. For value range see GetChannelCountLimits().
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.SChannelSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.SChannelSettings">
            <summary>
This structure holds the measurement setup for the NB-IoT measurement. It basically consists of the set of frequencies that shall be measured.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SFrequencySetting.bStopMeasAfterFirstBts">
            <summary>
If set, this channel will discontinue all processing after sending at least one valid BTS result.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SFrequencySetting.dwFrontEndSelectionMask">
            <summary>
Receiver front end to be used by the scanner for this channel. Scanner tasks are not allowed to contain multiple FE's.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SFrequencySetting.enOperationMode">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SFrequencySetting.dwAvgBlockCountPer1000Sec">
            <summary>
Avg. Meas. Rate in milli Hz. This is used for all NB-IoT scanner measurements reported in BtsSignals and PrimarySyncSignals and SecondarySyncSignals.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SFrequencySetting.dCenterFrequencyInHz">
            <summary>
The center frequency on which the NB-IoT signals shall be measured. For value range see SReceiver::SSupportedFrequencies.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.SFrequencySetting.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.SFrequencySetting.OperationMode.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SFrequencySetting.OperationMode.Type.STAND_ALONE">
            <summary>
Standalone operation mode for NB-IoT.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SFrequencySetting.OperationMode.Type.GUARD_BAND">
            <summary>
Guard band operation mode for NB-IoT.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SFrequencySetting.OperationMode.Type.IN_BAND">
            <summary>
Inband operation mode for NB-IoT.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.SFrequencySetting.OperationMode.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.SFrequencySetting.OperationMode">
            <summary>
Operation mode for NB-IoT signal. Must be set to match the mode of the signal that is being scanned.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.SFrequencySetting">
            <summary>
Configuration of the measurement that is performed on one single frequency.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SChannelState.dAvgBlockCountInHz">
            <summary>
Individual rates for each measurement type.
@note
dAvgBlockCountInHz &gt; 0 is required if bIsEnabled is TRUE Measurement rate in Hertz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SChannelState.bIsEnabled">
            <summary>
TRUE - this channel is currently active. FALSE - all channel measurements are switched off (measurement rates below are preserved for future use).
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SChannelState.dwChannelIndex">
            <summary>
The channel index for this measurement settings information.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.IOT.SChannelState.ALL_ENABLED_CHANNELS">
            <summary>
Used in dwChannelIndex to change measurement rates for all active channels can only be used while bIsEnabled is enabled, and only affects currently enabled channels.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.IOT.SChannelState.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.IOT.SChannelState">
            <summary>
Struct containing the channel measurement settings that can be modified during a running measurement
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SubInterval.dStopFrequencyInHz">
            <summary>
Stop frequency in Hz for a sub interval.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SubInterval.dStartFrequencyInHz">
            <summary>
Start frequency in Hz for a sub interval.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.SubInterval.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SubInterval">
            <summary>
Container for a sub interval expressed as frequency range.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SComplexLong.lIm">
            <summary>
Imaginary part of the value.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SComplexLong.lRe">
            <summary>
Real part of the value.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.SComplexLong.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SComplexLong">
            <summary>
Complex long value.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SComplex.fIm">
            <summary>
Imaginary part of the value.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SComplex.fRe">
            <summary>
Real part of the value.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.SComplex.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SComplex">
            <summary>
Complex float value.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SMeasurementRate.dwMeasRateInMilliHz">
            <summary>
Measurement rate in 0.001 per second.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SMeasurementRate.dEndTimeInSec">
            <summary>
Time of the last measurement (or time next to the last measurement) taken for meas rate calculation in seconds.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SMeasurementRate.dStartTimeInSec">
            <summary>
Time of the first measurement the meas rate has been calculated in seconds.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SMeasurementRate.dwCountOfMeasurements">
            <summary>
Count of measurements in the time interval defined below.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SMeasurementRate.eMeasRateType">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.SMeasurementRate.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.SMeasurementRate.MeasRateType.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SMeasurementRate.MeasRateType.Type.RECENT">
            <summary>
All measurements taken in the last minute. Within the first minute after the first measurement the interval is shorter.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SMeasurementRate.MeasRateType.Type.SUB_TOTAL">
            <summary>
All measurements from the first measurement 2 minutes after the first measurement to the last measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SMeasurementRate.MeasRateType.Type.TOTAL">
            <summary>
From first to last available measurement.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SMeasurementRate.MeasRateType.Type.INVALID">
            <summary>
Invalid rate type.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SMeasurementRate.MeasRateType.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SMeasurementRate.MeasRateType">
            <summary>
Rate type
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SMeasurementRate">
            <summary>
Measurement rates result structure for specific ViComs.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.SRFPort.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_31">
            <summary>
RF front end 31.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_30">
            <summary>
RF front end 30.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_29">
            <summary>
RF front end 29.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_28">
            <summary>
RF front end 28.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_27">
            <summary>
RF front end 27.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_26">
            <summary>
RF front end 26.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_25">
            <summary>
RF front end 25.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_24">
            <summary>
RF front end 24.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_23">
            <summary>
RF front end 23.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_22">
            <summary>
RF front end 22.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_21">
            <summary>
RF front end 21.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_20">
            <summary>
RF front end 20.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_19">
            <summary>
RF front end 19.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_18">
            <summary>
RF front end 18.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_17">
            <summary>
RF front end 17.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_16">
            <summary>
RF front end 16.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_15">
            <summary>
RF front end 15.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_14">
            <summary>
RF front end 14.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_13">
            <summary>
RF front end 13.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_12">
            <summary>
RF front end 12.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_11">
            <summary>
RF front end 11.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_10">
            <summary>
RF front end 10.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_9">
            <summary>
RF front end 9.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_8">
            <summary>
RF front end 8.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_7">
            <summary>
RF front end 7.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_6">
            <summary>
RF front end 6.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_5">
            <summary>
RF front end 5.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_4">
            <summary>
RF front end 4.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_3">
            <summary>
RF front end 3.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_2">
            <summary>
RF front end 2.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SRFPort.Type.RF_1">
            <summary>
RF front end 1.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SRFPort.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SRFPort">
            <summary>
The available RF front ends of a connected receiver are listed in SReceiver::dwAvailableFrontEndMask which is an or-combination of the following constants.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SResultCounters.dwCountOfThrashedResults">
            <summary>
Number of results overwritten in the ViCom buffer. This happens only on buffer overrun.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SResultCounters.dwCountOfBufferedResults">
            <summary>
Number of results available in the ViCom result buffer. There may be some exceptions that some results in the ViCom buffer are not relevant for the host application. To improve performance this results are counted here and sorted out in the GetResult() function of the specific interface.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.SResultCounters.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SResultCounters">
            <summary>
This can be used to report the current fill state of the result buffer and a history how many results had to be removed from the buffer before they could be processed.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SMessage.pcszMessageText">
            <summary>
The actual message what has happened.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SMessage.eMessageType">
            <summary>
The actual message type.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.SMessage.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.SMessage.MessageType.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SMessage.MessageType.Type.UNDEFINED">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SMessage.MessageType.Type.ERROR_">
            <summary>
Error messages contain severe problem that stop something from working.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SMessage.MessageType.Type.WARNING">
            <summary>
Warning message means that something is wrong but the function may continue.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SMessage.MessageType.Type.INFO">
            <summary>
Information is something the user should be noticed of.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SMessage.MessageType.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SMessage.MessageType">
            <summary>
Specifies the severity levels of a message
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SMessage">
            <summary>
Structure that describes a message from a sub-system. A message can be either just an info or even an error message. Used in ViComBasicInterface::GetMessagesDuringStartMeasurement().
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.Receivers">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.dwCountOfReceivers">
            <summary>
The number of R&amp;S TSMx receivers which are connected to the PC.
The theoretical maximum count is set to 8, but please note, that at the time of writing, the maximum tested value is 3.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.dwMaxCountOfConnectedReceivers">
            <summary>
There can not be more than 8 receivers connected to one PC at a time.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.bHasGpsAntenna">
            <summary>
Information on a connected GPS antenna. If true the receiver has a GPS antenna connected. The open- / short-circuit detection did not detect any errors. Only available in combination with TSME6 receivers.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.pTsmeDcInfo">
            <summary>
Information on a connected TSME30DC downconverter. Only available in combination with TSME6 receivers.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.CalibrationInfo">
            <summary>
Receiver calibration information.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.ListOfDeviceOptions">
            <summary>
List of receiver options.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.ListOfTemperatures">
            <summary>
List of receiver temperatures.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.ListOfFrequencyBands">
            <summary>
List of frequency bands supported by the receiver. Each sub band is specified in Hz.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask">
            <summary>
Available RF front ends. This value is an or-combination of the SRFPort::RF_xx constants defined below. E.g. dwAvailableFrontEndMask &amp; SRFPort::RF_1 equals true if front end 1 is available.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForTdScdmaScanner">
            <summary>
device supports CViComTdScdmaInterface for TD-SCDMA technology
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForV2x">
            <summary>
device supports LTEV2X measurements.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForLteMScanner">
            <summary>
device supports CViComLteInterface for LTE-M technology
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForReserved1">
            <summary>
reserved
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForBlockIq">
            <summary>
reserved
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForIotScanner">
            <summary>
device supports NB-IoT measurements
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForReserved2">
            <summary>
reserved
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForLteMbmsScanner">
            <summary>
device supports LTE MBSFN measurements
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForAutomaticChannelDetection">
            <summary>
device supports FastAcdInterface for automatic channel detection
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForRemote">
            <summary>
device supports remote ViCom
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForRawDataHandlerAir">
            <summary>
reserved
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForRawDataHandlerGps">
            <summary>
device supports raw data handler for GPS technology
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForTetraDMO">
            <summary>
reserved
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForNrScanner">
            <summary>
device supports CViComNrInterface
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForPps">
            <summary>
reserved
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForNrScannerAddon">
            <summary>
device supports NR addon measurements
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForLteMimoScanner">
            <summary>
device supports LTE WB / MIMO measurements
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForRawDataHandlerTetra">
            <summary>
reserved
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForRawDataHandlerWimax">
            <summary>
device supports raw data handler for WIMAX technology
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForRawDataHandlerLte">
            <summary>
device supports raw data handler for LTE technology
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForTetraScanner">
            <summary>
reserved
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForWimaxScanner">
            <summary>
device supports CViComWimaxInterface
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForRawDataHandlerGsm">
            <summary>
device supports raw data handler for GSM technology
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForRawDataHandlerCdma">
            <summary>
device supports raw data handler for CDMA technology
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForLteScanner">
            <summary>
device supports CViComLteInterface
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForRawDataHandlerNr">
            <summary>
device supports raw data handler for NR technology
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForRawDataHandlerWcdma">
            <summary>
device supports raw data handler for WCDMA technology
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForRawDataHandlerIot">
            <summary>
device supports raw data handler for IOT technology
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForCwMeasurement">
            <summary>
device supports ViComCWInterface
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForRFPowerScan">
            <summary>
device supports CViComRFPowerScanInterface
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForRFScan">
            <summary>
device supports CViComRFScanInterface
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForEvdoScanner">
            <summary>
device supports CViComCdmaInterface for EVDO
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForCdmaScanner">
            <summary>
device supports CViComCdmaInterface for CDMA
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForGsmScanner">
            <summary>
device supports CViComGsmInterface
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForWcdmaDemodulator">
            <summary>
device supports BCH decoding for CViComWcdmaInterface
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwFlagForWcdmaScanner">
            <summary>
device supports CViComWcdmaInterface
measurement capabilities of the device.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwAvailableMeasurementMask">
            <summary>
This defines what special capabilities the receiver has. This value is a or-combination of the constants defined below. For each capability, there is another application interface that can be used to access the specific functionality. For example, if dwFlagForRFPowerScan flag is set, then the ViComRFPowerScanInterface can be used for that receiver.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwHardwareVersion">
            <summary>
Version of the installed hardware inclusive FPGA configuration code, to be read as an 8 digit decimal integer Example: TSMW FW Version 1.15.0.0 =&gt; dwHardwareVersion = 0x010F0000
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwSoftwareVersion">
            <summary>
Version of the application software, to be read as an 8 digit decimal integer.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.pcMaterialNumber">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwModelNumber">
            <summary>
Model number of the receiver.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwSerialNumber">
            <summary>
Serial number of the receiver.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.eReceiver">
            <summary>
Defines the receiver type. The command set of this interface is compatible with certain receiver types.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.dwNetworkInterfaceIndex">
            <summary>
Index of the used network interface if not SDefs::INVALID_DWORD_VALUE
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.bIpVersion">
            <summary>
Version of the internet protocol for TSMW and TSME.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.bAutoIpAddress">
            <summary>
Automatically configured TSME6 IP address using Auto-IP feature. Possible range is: 169.254.0.1 to 169.254.255.254. Only valid if at least one byte is different to SDefs::INVALID_BYTE_VALUE.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.bIpAddress">
            <summary>
TSMW and TSME receiver are connected via IEEE 802.3 Ethernet bus. The address is formated in a dot-decimal like notation, e.g. the first array element is the first octet of the address.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STsmeDcInfo.pcConfigurationComment">
            <summary>
Comment to configuration of TSME30DC downconverter.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STsmeDcInfo.sControllerBoardTemperatureInC">
            <summary>
Temperature of controller board in Ã‚Â°C.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STsmeDcInfo.sRfBoardTemperatureInC">
            <summary>
Temperature of RF board in Ã‚Â°C.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STsmeDcInfo.dwFirmwareVersion">
            <summary>
Version of the installed hardware inclusive FPGA configuration code, to be read as an 8 digit decimal integer Example: FW Version 1.15.0.0 =&gt; dwHardwareVersion = 0x010F0000
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STsmeDcInfo.dwSerialNumber">
            <summary>
Serial number of the downconverter.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STsmeDcInfo.dcType">
            <summary>
Type of the downconverter.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STsmeDcInfo.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STsmeDcInfo.Downconverter.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STsmeDcInfo.Downconverter.Type.TSMS53DC">
            <summary>
R&amp;S TSMS53DC downconverter.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STsmeDcInfo.Downconverter.Type.TSME44DC">
            <summary>
R&amp;S TSME44DC downconverter.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STsmeDcInfo.Downconverter.Type.TSME30DC">
            <summary>
R&amp;S TSME30DC downconverter.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STsmeDcInfo.Downconverter.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STsmeDcInfo.Downconverter">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STsmeDcInfo">
            <summary>
Container for information on TSME30DC / TSME44DC downconverter.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.SCalibrationInfo.fLastMeasuredTotalRfLevelInDBm">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.SCalibrationInfo.bNoValidSelfAlignment">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.SCalibrationInfo.dwLastIQImbalanceSelfAlignmentDateT1970InSec">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.SCalibrationInfo.dwLastQFilterSelfAlignmentDateT1970InSec">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.SCalibrationInfo.dwLastIFilterSelfAlignmentDateT1970InSec">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.SCalibrationInfo.dwLastTcxoSelfAlignmentDateT1970InSec">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.SCalibrationInfo.dwLastTcxoCorrDateT1970InSec">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.SCalibrationInfo.dwVersion">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.SCalibrationInfo.dwCalibrationDateT1970InSec">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.SCalibrationInfo.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.SCalibrationInfo">
            <summary>
Container for calibration information of the receiver.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.SDeviceOption.pcTimeToExpiration">
            <summary>
Time till this option expires, if appropriate.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.SDeviceOption.pcInvalidityReason">
            <summary>
Reason, why this option is inactive, if appropriate.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.SDeviceOption.pcValidTo">
            <summary>
Option is valid till this date.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.SDeviceOption.pcValidFrom">
            <summary>
Option is valid from this date.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.SDeviceOption.pcActivationType">
            <summary>
Type of activation, e.g. permanent or temporary.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.SDeviceOption.pcOptionMaterialNo">
            <summary>
Option material number, e.g. 1514.6794.90.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.SDeviceOption.pcOptionType">
            <summary>
Option type identifier, e.g. TSME-K0.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.SDeviceOption.wOptionIndex">
            <summary>
Index for option Table.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.SDeviceOption.boActiveOption">
            <summary>
true: option active, false: option inactive.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.SDeviceOption.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.SDeviceOption">
            <summary>
Container for option information of the receiver.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STemperature.sTemperatureInDegreeC">
            <summary>
Temperature value in degree Celsius.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STemperature.eType">
            <summary>
Type of the temperature value.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STemperature.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STemperature.TemperatureType.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STemperature.TemperatureType.Type.RF2">
            <summary>
RF2 temperature.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STemperature.TemperatureType.Type.RF1">
            <summary>
RF1 temperature.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STemperature.TemperatureType.Type.PROCESSOR_BOARD">
            <summary>
Processor board temperature.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STemperature.TemperatureType.Type.CONTROLLER">
            <summary>
Controller board temperature.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STemperature.TemperatureType.Type.ANALYZER">
            <summary>
Analyzer board temperature.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STemperature.TemperatureType.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STemperature.TemperatureType">
            <summary>
Specifies the type of a receiver temperature.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver.STemperature">
            <summary>
Container for receiver temperatures.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable.SReceiver">
            <summary>
For each receiver connected to the system, one such structure is filled. dwCountOfReceivers contains how many instances of this structure are available.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SConnectedReceiverTable">
            <summary>
When the system is asked for how many devices are connected, this structure is the result. This contains-version information
-hardware information
-driver information about every receiver that was connected before and are still active.
@note
The table does not contain receivers of various types. E.g. if the system is asked for connected devices on a TSMW, the connected receiver table will not contain any receivers other than TSMW!
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.SPreSelection.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SPreSelection.Type.OFF">
            <summary>
Pre-selection forcibly in-active.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SPreSelection.Type.ON">
            <summary>
Pre-selection forcibly active.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SPreSelection.Type.AUTO">
            <summary>
Pre-selection based on internal spectrum measurements, optimized for best noise figure.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SPreSelection.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SPreSelection">
            <summary>
Specifies operation modes for the TSME6 pre-selection stage.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SReceiverSettings.fAgcTimeConstantInMs">
            <summary>
The AGC time constant defines how long a measured input power in RF spectrum scan is valid to control internal attenuation / gain settings in the receiver. The validity is floating and decrements exponentially (linear in dB). After the given time the power in Watt degrades by 1/e i.e. 4.34 dB in logarithmic scale. The measured RF spectrum is used to find RF board settings to protect the receiver against intermodulation on high input power. This results in lower sensitivity (higher noise figure) during high input power reception. The 30 sec default value is good for normal drive test. With this value the receiver is sensitive in rural areas and well protected against intermodulation in urban areas with very high transmitter density. Applies to TSME / TSME6 receivers only. Can only be set for the very first link to a TSME / TSME6. Limits: 1ms to 60 sec, default: 30 sec
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.SReceiverSettings.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SReceiverSettings">
            <summary>
Definition of special receiver settings.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.STSMPort.eMode">
            <summary>
Receiver port mode.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.STSMPort.ePort">
            <summary>
Special receiver port.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.STSMPort.#ctor">
            <summary />
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.STSMPort.Mode.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.STSMPort.Mode.Type.PPS_IN">
            <summary>
PPS input mode. Not supported yet!
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.STSMPort.Mode.Type.PPS_OUT">
            <summary>
PPS output mode. Used to route the GPS PPS signal of the receiver internal GPS device to the selected port. Only possible with connected GPS antenna and sufficient GPS signal reception.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.STSMPort.Mode.Type.TRIGGER_IN">
            <summary>
Trigger input mode. Not supported yet!
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.STSMPort.Mode.Type.TRIGGER_OUT">
            <summary>
Trigger output mode. Not supported yet!
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.STSMPort.Mode.Type.ACTIVE">
            <summary>
Enabled port. E.g. used to enable the ext. reference port of TSMW receivers.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.STSMPort.Mode.Type.NOT_USED">
            <summary>
Disabled port, not used.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.STSMPort.Mode.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.STSMPort.Mode">
            <summary>
Definition of operating modes for special receiver ports. Only a subset of the following settings might be supported by specific receiver ports in STSMPort::ePort.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.STSMPort.Port.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.STSMPort.Port.Type.TSMW_EXT_REF">
            <summary>
External 10 MHz reference port of TSMW receiver.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.STSMPort.Port.Type.TSMW_PULSE2">
            <summary>
Pulse 2 port of TSMW receiver.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.STSMPort.Port.Type.TSMW_PULSE1">
            <summary>
Pulse 1 port of TSMW receiver.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.STSMPort.Port.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.STSMPort.Port">
            <summary>
Special ports of the receiver.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.STSMPort">
            <summary>
The multi purpose receiver I/O connectors can be used for application specific requirements like external trigger signals or timing reference. The configuration has to be done by specifying a port and the wanted mode. Used in ViComBasicInterface::SetPortConfiguration() method.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.Technology.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Technology.Type.V2X">
            <summary>
V2x (Vehicle to everything)
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Technology.Type.FastACD">
            <summary>
Fast ACD interface.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Technology.Type.IOTACD">
            <summary>
NB-IoT ACD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Technology.Type.NRACD">
            <summary>
New Radio ACD.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Technology.Type.NR">
            <summary>
New Radio.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Technology.Type.BLOCKIQ">
            <summary>
reserved
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Technology.Type.IOT">
            <summary>
NB-IoT.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Technology.Type.CWScan">
            <summary>
CW Scan.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Technology.Type.RS232">
            <summary>
RS232.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Technology.Type.RFSCAN">
            <summary>
RF Scan.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Technology.Type.RFPS">
            <summary>
RF Power Scan.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Technology.Type.CW">
            <summary>
CW.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Technology.Type.GPS">
            <summary>
GPS.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Technology.Type.TETRA">
            <summary>
reserved
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Technology.Type.TDSCDMA">
            <summary>
TD-SCDMA.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Technology.Type.WIMAX">
            <summary>
WIMAX.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Technology.Type.LTE">
            <summary>
LTE / LTE-M.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Technology.Type.EVDO">
            <summary>
EvDO.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Technology.Type.CDMA">
            <summary>
CDMA2000.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Technology.Type.WCDMA">
            <summary>
WCDMA.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Technology.Type.GSM">
            <summary>
GSM.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Technology.Type.UNKNOWN">
            <summary>
Type is not known.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.Technology.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.Technology">
            <summary>
Definitions for technology types.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.Receiver.#ctor">
            <summary />
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Receiver.Type.UNKNOWN">
            <summary>
Unknown receiver, not supported!
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Receiver.Type.TSMQ">
            <summary>
TSMQ Model. Not suppored any more. All firewire based receiver models such as TSMQ, TSMU, TSMM and TSML-CW are end of life and not supported any more.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Receiver.Type.TSMX_PPS2">
            <summary>
TSMX-PPS2.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Receiver.Type.TSME6">
            <summary>
TSME6.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Receiver.Type.TSME">
            <summary>
TSME.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.Receiver.Type.TSMW">
            <summary>
TSMW. Not supported any more.
</summary>
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.Receiver.Type">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.Receiver">
            <summary>
Different versions of the ViCom interface are suitable for different receiver types. This field gives the receiver type, with the following values defined in the enum Receiver::Type:
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SVersionInfo.dwVersionBuild">
            <summary>
Build number.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SVersionInfo.dwApplicationInterfaceVersion">
            <summary>
Version number of the ViComApplicationInterface, such as RF Power Scan etc.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SVersionInfo.dwBasicInterfaceVersion">
            <summary>
Version number of the ViComBasicInterface.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SVersionInfo.dwVersionMinor">
            <summary>
Minor product version.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SVersionInfo.dwVersionMajor">
            <summary>
Major product version.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.SVersionInfo.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SVersionInfo">
            <summary>
Defines a data model to hold version information of the ViCom interface. This should reflect the DLL version information. File version number of DLL is: dwVersionMajor.dwVersionMinor.dwVersionPatch.dwVersionBuild Product version number of DLL is: dwVersionMajor.dwVersionMinor.dwBasicInterfaceVersion.dwApplicationInterfaceVersion
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SDefs.INVALID_BYTE_VALUE">
            <summary>
Invalid value marker for BYTE values.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SDefs.INVALID_SHORT_VALUE">
            <summary>
Invalid value marker for short values.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SDefs.INVALID_WORD_VALUE">
            <summary>
Invalid value marker for WORD values.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SDefs.INVALID_DWORD_VALUE">
            <summary>
Invalid value marker for DWORD values.
</summary>
        </member>
        <member name="F:RohdeSchwarz.ViCom.Net.SDefs.dwDefaultTimeOutInMs">
            <summary>
Default value for all interface methods which require a timeout parameter.
</summary>
        </member>
        <member name="M:RohdeSchwarz.ViCom.Net.SDefs.#ctor">
            <summary />
        </member>
        <member name="T:RohdeSchwarz.ViCom.Net.SDefs">
            <summary>
Definition of constants
</summary>
        </member>
        <member name="D:RohdeSchwarz.ViCom.Net.RegisterScannerIdFnc">
This code should allow creation of a callback from C++ into .NET, while the .NET side runs inside an AppDomain
Info was taken from http://www.lenholgate.com/blog/2009/07/error-cannot-pass-a-gchandle-across-appdomains.html
Unfortunatelly the solution works on function-callbacks. We do not know yet how to use it on callback interfaces.


This code should allow creation of a callback from C++ into .NET, while the .NET side runs inside an AppDomain
Info was taken from http://www.lenholgate.com/blog/2009/07/error-cannot-pass-a-gchandle-across-appdomains.html
Unfortunatelly the solution works on function-callbacks. We do not know yet how to use it on callback interfaces.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComDataProcessor.RemoveScannerId(System.UInt16)">
		Called when the data processor is unregistered from a scanner.

		@param[in] dwScannerDataId
		internal address of the scanner module

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComDataProcessor.RegisterScannerId(System.UInt16)">
		Called when the data processor is registered to a scanner.

		@param[in] dwScannerDataId
		internal address of the scanner module

</member>
        <member name="T:RohdeSchwarz.ViCom.Net.CViComDataProcessor">
Common interface for both CViComResultDataProcessor and CViComRawDataProcessor.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComErrorConverter.Dispose">
Checks the native error object, converts and throws, if necessary

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComErrorConverter.#ctor(std.exception*)">
Constructs an object with a pointer to a native std::exception
The destructor checks the error, converts it and throws, if necessary

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComErrorConverter.#ctor(RohdeSchwarz.ViCom.CViComError*)">
Constructs an object with a pointer to a native CViComError.
The destructor checks the error, converts it and throws, if necessary

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComErrorConverter.ConvertNoThrow(RohdeSchwarz.ViCom.CViComError*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert to managed object, or return null when it is no error.

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComErrorConverter.Convert(std.exception*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert and throw, if error is present

</member>
        <member name="M:RohdeSchwarz.ViCom.Net.CViComErrorConverter.Convert(RohdeSchwarz.ViCom.CViComError*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert and throw, if error is present

</member>
        <member name="F:RohdeSchwarz.ViCom.Net.CViComError.ErrorCode">
      This function returns an error code which is unique for the vicom interface. Error code definitions are declared in
      ViComBasicErrors.h and the error code file for the specific application (e.g. ViComWcdma3GppPnsErrors.h)

      @return an unique error code. If no error occured the function returns 0.

</member>
        <member name="M:RohdeSchwarz.ViCom.IOT.CViComIotInterface.UnregisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.IOT.SMeasResult&gt;*)">
   Unregister a formerly registered ScannerData listener to remove it from the list of objects that
   shall get notification about new measurement data.

   @param[in] pListener
      The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered
      objects, an error is indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.IOT.CViComIotInterface.RegisterResultDataListener(RohdeSchwarz.ViCom.CViComResultDataProcessor&lt;RohdeSchwarz.ViCom.IOT.SMeasResult&gt;*)">
   Register a ScannerData listener that will be notified when new data is available. Note that it is
   important to Unregister the listener again once it is getting deleted, to avoid crashes.

   @note Both possibilities to retrieve results are to be used exclusively. In case of ResultDataListener usage,
   it is not allowed to call CViComBasicInterface::GetResultCounters() or CViComIotInterface::GetResult() and vice versa.

   @param[in] pListener
      The object that shall be notified when new measurement data is available. This must not be
      null. If the listener has already been registered to the interface, it will not be
      registered a second time. Instead, an error will be indicated.

</member>
        <member name="M:RohdeSchwarz.ViCom.IOT.CViComIotInterface.RetrieveTextForPDU(RohdeSchwarz.ViCom.IOT.SL3DecoderRequest!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsLong)">
   Issue a request to the Layer 3 Decoder to decode the PDU contained by rSL3DecoderRequest.
   If the data has been decoded successfully within the time given by dwTimeOutInMs,
   the method creates the SL3DecoderResult and the buffer within on the heap, fills in the Layer 3 Decoder result
   and returns a pointer to it.

   @param[in] rSL3DecoderRequest
   Contains the data that was the result of an IoT measurement and holds the PDU data that shall be decoded.

   @param[in] dwTimeOutInMs
      The time in milliseconds that the function should wait before returning an error, if the result buffer is empty.

   @return
   one measurement result on the heap, if the function succeeded. Otherwise NULL.
   Attention: The returned pointer is only valid until this function is called again.

</member>
        <member name="M:RohdeSchwarz.ViCom.IOT.CViComIotInterface.GetSettings">
   By means of the functions SetConfiguration() internal settings of the NB-IoT-Scanner may be changed.
   The functions SelectReceiver() of CViComBasicInterface 
   change basic settings. Except for frequency settings all other settings have default values.
   By means of this function you can retrieve the NB-Scanner settings which apply at the moment for measurements to be started
   or during running measurements.
   Note that the result, like all other results too, is only for reading.
   To change settings the functions mentioned above should be used.

   @return
      pointer to a structure holding the current device settings. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.IOT.CViComIotInterface.IssueDemodRequests(RohdeSchwarz.ViCom.IOT.SDemodRequests!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   Use this function to issue commands (PDU requests, reset commands) for the BCH demodulator during measurement.

   PDUs may be acquired for certain eNodeBs. PDU demodulation for eNodeBs or for channels may be reset.

   @param[in] rDemodRequests
   When the function is called, this pointer contains the request parameters.
   For details see SDemodRequests.

</member>
        <member name="M:RohdeSchwarz.ViCom.IOT.CViComIotInterface.GetChannelState(System.UInt32!System.Runtime.CompilerServices.IsLong)">
   GetChannelState returns the current status of the configurable settings from the channel.

   @param[in] dwChannelIndex
      Specifies the 0-based channel index to be queried.

   @return
      Returns an object of SChannelState which contains the current state for the channel.  The items
      in SChannelState can be modified during a running measurement using the ModifyChannel method.
      @sa SChannelState and ModifyChannel.

</member>
        <member name="M:RohdeSchwarz.ViCom.IOT.CViComIotInterface.ModifyChannel(RohdeSchwarz.ViCom.IOT.SChannelState!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   ModifyChannel is used to modify configurable channel settings during a running measurement.
   @sa SChannelState for items that can be modified.

   @param[in] sChannelState
      sChannelState contains the modified settings to be changed in the channel.

</member>
        <member name="M:RohdeSchwarz.ViCom.IOT.CViComIotInterface.AddChannel(System.Double,RohdeSchwarz.ViCom.IOT.SFrequencySetting.OperationMode.Type)">
   AddChannel is used to create additional channels during a running measurement.  The measurement settings from channel index 0,
   as configured by SetConfiguration(), are used for the new channel.
   @note This method can not be called in the idle state (IsMeasurementStarted() must return TRUE)
   @note Each channel combination can only be added once. Attempting to add a channel combination multiple times will return the index that is already present.

   @param[in] dChannelFrequencyInHz
      Center frequency in Hertz for the channel.

   @param[in] operationMode
      Operation mode for the channel (IN_BAND/GUARD_BAND/STAND_ALONE).

   @return
      If success, the 0-based channel index for new channel is returned.  If failure, 0xFFFFFFFF is returned indicating an invalid channel.

</member>
        <member name="M:RohdeSchwarz.ViCom.IOT.CViComIotInterface.SetConfiguration(RohdeSchwarz.ViCom.IOT.SChannelSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.IOT.SDemodulationSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   SetConfiguration

   @param[in] rChannelSettings
      Contains the definition which frequencies shall be measured. @see SChannelSettings for
      a more detailed description on those settings.

   @param[in] rDemodulationSettings
      Contains the definition which PDUs of BCH shall be measured. @see SDemodulationSettings for
      a more detailed description on those settings.

</member>
        <member name="M:RohdeSchwarz.ViCom.IOT.CViComIotInterface.GetMeasRateLimits">
   Limits for Parameter SFrequencySettings::dwMeasRatePer1000sec.

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.IOT.CViComIotInterface.GetDemodThresholdLimits">
   Limits for Parameter SDemodulationSettings::sSINRThresholdDB100

   @return
   pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
   as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.IOT.CViComIotInterface.GetChannelCountLimits">
   Limits for Parameter SChannelSettings::dwCount

   @return
      pointer to a structure holding the limits for this setting. In case of failure, NULL. The returned value is valid
      as long as no other interface method is called.

</member>
        <member name="M:RohdeSchwarz.ViCom.IOT.CViComIotInterface.GetBasicInterface">
   The basic interface is a part of any application specific ViCom interface. It is used for different TSMW applications.
   The purpose is to control basic TSMW functions, which are not specific for a certain measurement.
   See CViComBasicInterface for specification of basic interface functions.


   @return
      reference to the BasicInterface object that can be used to control basic functions like
      StartMeasurement() and StopMeasurement() et al.

</member>
        <member name="T:RohdeSchwarz.ViCom.IOT.CViComIotInterface">
IoT measurement module for ViCom. Offers the configuration and result receiving methods for all IoT related
measurement tasks.
\@attribute[type="interface"]

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComBasicInterface.UnregisterRawDataListener(RohdeSchwarz.ViCom.CViComRawDataProcessor*)">
   Unregister a formerly registered RawScannerData listener to remove it from the list of objects that
   shall get notification about new measurement data.

   @param[in] pListener
      The listener that shall be unregistered. If NULL or if the listener is not found in the list of registered
      objects, an error is indicated.

   @return
      if listener has been removed from the list of registered listeners or not

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComBasicInterface.RegisterRawDataListener(RohdeSchwarz.ViCom.CViComRawDataProcessor*)">
   Register a RawScannerData listener that will be notified when new raw data is available. Note that it is
   important to Unregister the listener again once it is getting deleted, to avoid crashes.

   @param[in] pListener
      The object that shall be notified when new raw measurement data is available. This must not be
      null. If the listener has already been registered to the interface, it will not be
      registered a second time. Instead, an error will be indicated.

   @return
      if listener has been appended to the list of registered listeners or not

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComBasicInterface.HasMeasurementStopped(System.UInt32!System.Runtime.CompilerServices.IsLong)">
   This function checks to see if measurement really has stopped.

   @param[in] dwTimeOutInMs
      The maximum time that this function should delay, before it returns. If the measurements are successfully
      stopped before the timeout, then the function will return immediately.

   @note
      The general recommendation for the dwTimeOutInMs values is 15 seconds.

   @return
      If the measurement has been successfully stopped, this function returns true.
      If the measurement has not successfully stopped, it returns false.

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComBasicInterface.GetMessagesDuringStartMeasurement">
   If StartMeasurement fails then additional messages received from the receiver can be retrieved with
   GetMessagesDuringStartMeasurement().

   @return
      Pointer to a list of SMessage objects, containing message information if operation succeeded.

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComBasicInterface.IsMeasurementStarted">
   This functions allows to retrieve the current state of measurements.

   @return
   true if measurement is running. If an error occurred, a CViComError is thrown.

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComBasicInterface.StartMeasurement">
This is possible if all preconditions have been met e.g frequencies have been selected, and a previous measurement has been stopped
successfully. A sucessful stop can be checked with the HasMeasurementStopped() function below.

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComBasicInterface.GetPortConfiguration">
Not supported yet!
   This functions allows to retrieve the currently active state for any supported port by the connected receiver
   device. Be aware that there's no synchronization mechanism with other ViCom instances using the same receiver device.
   It's totally up to the user to ensure that nobody changes the configuration in the meantime.

   @note
         Reading the port configuration is only possible in idle state, e.g. before any call of the
      StartMeasurement() method.

   @note
      For unsupported ports / devices a VICEC_FUNCTION_NOT_SUPPORTED_BY_DEVICE error is returned.

      If SelectReceiver was not called once before, the receiver at the index 0 is used by default.

   @param[in] enPort
      Selected port for the status query.

   @return
      the port configuration if operation succeeded. If an error occurred, a CViComError is thrown.

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPortConfiguration(RohdeSchwarz.ViCom.STSMPort!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
   Some receivers support user specific configuration of their external multi purpose ports. Be aware that there's
   no synchronization mechanism with other ViCom instances using the same receiver device. It's totally up to the
   user to ensure that nobody changes the configuration in the meantime. Each port has to be treated separately, 
   for example activating PPS output on receiver port x does not automatically switch off PPS output on the port
   which was configured before.

   @note
      Changing the port configuration is only possible in idle state, e.g. before any call of the StartMeasurement() 
      method.

      If SelectReceiver was not called once before, the receiver at the index 0 is used by default.

   @note
      For unsupported ports / devices a VICEC_FUNCTION_NOT_SUPPORTED_BY_DEVICE error is returned.

   @param[in] rPortConfiguration
      Desired port and configuration provided as STSMPort structure.

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComBasicInterface.LoadTransducerFile(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
   Some receivers support the usage of transducer files to take antenna specific parameters into account during measurement.
   Basically these XML files contain tables of frequency dependent gain / attenuation values for the used antenna on a per
   front end basis. This means it's possible to specify the antenna parameters for every front end on every supported
   receiver device. Be aware that there's no synchronization mechanism with other ViCom instances using the same receiver device.
   It's totally up to the user to ensure that nobody changes the configuration in the meantime!

   @note
         It is crucial to load the transducer tables when the receiver is in idle state, e.g. before any call of the
      StartMeasurement() method.

      If SelectReceiver() was not called once before, the receiver at the index 0 is used by default.

   @note
      Unsupported receivers return the VICEC_FUNCTION_NOT_SUPPORTED_BY_DEVICE error code.

   @param[in] pcTransducerFilePath
      Path of the transducer XML file. Sample file provided in ".\tools\TsmTransducerTables.xml".
      Use NULL to clear recently set tables.

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComBasicInterface.Identify">
   Not supported yet!
   When many receivers are connected to the control computer, an application can use this function to trigger the identify
   functionality which leads to flashing LEDs on the receiver front panel.

   If SelectReceiver was not called once before, the receiver at the index 0 is used by default.

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComBasicInterface.GetSelectedReceiverIndex">
   This function is the counterpart for SelectReceiver() and retrieves the index of the currently selected receiver.

   @return
   receiver index if operation succeeded. If an error occurred, a CViComError is thrown.

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComBasicInterface.GetConnectedReceivers(System.UInt32!System.Runtime.CompilerServices.IsLong)">
   This function retrieves the receivers that were connected to the computer when the Connect() function returned
   successfully.

   @param[in] dwTimeOutInMs
   The maximum time that this function should delay, before it returns. If query is successfully done
   before the timeout, then the function will return immediately.

   @return
      a list of connected devices if successful, NULL otherwise.

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComBasicInterface.GetVersionInfoText">

   @return the character based version information of the interface, or NULL if an error occurred. The result specifies the
      version of the ViCom interface that implements the interface.

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComBasicInterface.GetVersionInfo">

   @return the version of the interface, or NULL if an error occurred. The result specifies the
      version of the ViCom interface that implements the interface.

</member>
        <member name="M:RohdeSchwarz.ViCom.RegisterMessageTracer(RohdeSchwarz.ViCom.CViComMessageTracer*)">
Registers the given message tracer interface, replaces any previously registered tracer.
When set to null the previously registered tracer will be unregistered.
@note: De-registration automatically done on destruction of the last available CViComLoader object.

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComMessageTracer.OnMessage(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
   Every time a status information event is available, it is reported by this function.

   @note The callback is not allowed to throw exceptions!

   @param [out] pcMessage
         the informative text message of the status information.

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComLoaderBase.Disconnect">
Release the interface created with this loader if one is available. Frees the
allocated resources and unload the interface DLLs.

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComLoaderBase.Connected">
   Check the state connection state.

   @return
   if the Loader has an active interface available that can be queried using GetInterface()
   or not. In other words, if a connection to the device has been established or not.
   *
</member>
        <member name="M:RohdeSchwarz.ViCom.CViComLoaderBase.Connect(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,RohdeSchwarz.ViCom.CViComReceiverListener*)">
   Loads the interface, e.g. triggers the device connection.

   As various threads have to be started and executed, the call of the load function must not be done
   during process startup and DLL initialization routines, as threads do not begin execution until DLL
   initialization is done for the process. Microsoft thread startup specification can be found at:

   @see http://msdn.microsoft.com/en-us/library/ms682453(VS.85).aspx

   After this function has returned successfully:
   - the DLLs used to run the specific ViCom interface will be loaded
   - a pointer to a ViCom interface object will be available when GetInterface() is called.

   @param[in] uri (optional)
   The network address where the device can be reached. For TSMW this can be an IPv4 address in
   dot decimal notation, e.g. 192.168.0.2.
   In case there's no address or 0.0.0.0 specified ViCom internal device detection mechanisms get active
   and connect up to 4 detected devices.

   @param[in] pListener (optional) 
   Listener to collect receiver status information during the connection establishment
   as well as during runtime.

</member>
        <member name="T:RohdeSchwarz.ViCom.CViComLoaderBase">
Generic interface specifying how a ViCom interface loader looks like.

</member>
        <member name="T:RohdeSchwarz.ViCom.LibLoad">
Helper class to load dynamic libraries. Used in CViComLoader.

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComReceiverListener.OnError(RohdeSchwarz.ViCom.CViComReceiverListener.Error.Type,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
   Every time a receiver error occurred, it is reported by the listener using this function.

   @note The callback is not allowed to throw exceptions!

   @param [out] error
         the specific receiver error.
   @param [out] errorMessage
         the informative text message related to the specific receiver error.

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComReceiverListener.OnWarning(RohdeSchwarz.ViCom.CViComReceiverListener.Warning.Type,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
   Every time a receiver warning occurred, it is reported by the listener using this function.

   @note The callback is not allowed to throw exceptions!

   @param [out] warning
         the specific receiver warning.
   @param [out] warningMessage
         the informative text message related to the specific receiver warning.

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComReceiverListener.OnConnectProgress(System.Single,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
   Every time a connection progress event is available, it is reported by the listener
   using this function. This is used to indicate the connection progress.

   @note The callback is not allowed to throw exceptions!

   @param [out] progressInPct
         the connection progress in percent, value range [0, 100].
   @param [out] message
         the informative text message related to the connection progress.

</member>
        <member name="T:RohdeSchwarz.ViCom.CViComReceiverListener.Error">
Definition of receiver error events.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.CViComReceiverListener.Warning">
Definition of receiver warning events.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.CViComReceiverListener">
This interface can be used for registration at a ViCom loader object to
collect receiver status information during the connection establishment
and during runtime as well as during disconnect.

@note
   It is sufficient to have only one receiver listener object which gets registered
   at the very first ViCom loader used.

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComRawDataProcessor.OnScannerDataMeasured(System.Byte*!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsLong,RohdeSchwarz.ViCom.CViComRawDataProcessor.RawDataInfo.Type)">
   Every time raw data is available, it is reported to the raw data processor
   using this function. The raw data is given as byte array.

   @note
      This is called during the reception of the internal data structure, so
      this MUST process data very fast or delay processing into another thread
      to make sure the calling thread is not blocked for too long. This implies
      that this method may be called from different threads on the same object.
      Make sure to put synchronization mechanisms into the implementation to
      avoid race-conditions. The callback is not allowed to throw exceptions!

   @param [in] pRawData
         the internal data structure that carries the raw data

   @param[in] dwLength
         the length in bytes of the measured data block

   @param[in] rawDataInfo
         \sa RawDataInfo

</member>
        <member name="T:RohdeSchwarz.ViCom.CViComRawDataProcessor.RawDataInfo">
Definition of raw packet types.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.CViComRawDataProcessor">
This interface can be used to register at a data generating ViCom interface to
collect the raw data originating from the underlying device.

@note
   Only internal ViCom components will provide adequate implementations of this
   this interface, since they need to now the internal data format used in the
   scanners.

   You can still extend this class and handle the binary block that is given
   in the OnScannerDataMeasured() method as data chunk.

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComDataProcessor.RemoveScannerId(System.UInt16)">
   Called when the data processor is unregistered from a scanner.

   @param[in] dwScannerDataId
      internal address of the scanner module

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComDataProcessor.RegisterScannerId(System.UInt16)">
   Called when the data processor is registered to a scanner.

   @param[in] dwScannerDataId
      internal address of the scanner module

</member>
        <member name="T:RohdeSchwarz.ViCom.CViComDataProcessor">
ViCom data processors are listeners which can be registered at an ViCom interface
to retrieve different kind of data.

</member>
        <member name="T:RohdeSchwarz.ViCom.IOT.SL3DecoderResult">
Result from the Layer 3 Decoder.

The string returned via this structure is formatted using the ASN.1 notation of the standard (3GPP TS 36.331).
It contains one completely decoded PDU terminated by CR+LF. Data subsets (i.e. Information Elements)
within the string are headed by "CR+LF+{", indented via spaces and terminated by "}+CR+LF".

In addition to the standard, some Information Elements are added twice (see example cellIdentity below):
1. Formatted exactly according to the standard.
2. Formatted with unit or format description between square brackets ("[" "]") and representing a reasonable value.

\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.IOT.SL3DecoderRequest">
Request data container for the Layer 3 Decoder. Is used to decode a demodulation result into
a human-readable structure.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SMeasResult.pDemodResult">
Pointer to demodulation result. If NULL, no demodulation result is present.

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SMeasResult.SDemodResult.pbActiveAntennaMask">
Bits 0 to 1 are set to indicate that antenna port 0 to antenna port 1 are active if pbActiveAntennaMask is not NULL.

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SMeasResult.SDemodResult.wPhysicalCellId">
The physical Cell ID, which can take one from the values defined by [0;503].

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SMeasResult.SDemodResult.pbBitStream">
Pointer to (dwBitCount + 7) / 8 bytes which contain the PDU bits. The first bit is stored in the bit 7 of pbBitStream[0]. 
If dwBitCount is not a multiple of 8, the trailing bits in the last byte pbBitStream[(dwBitCount + 7) / 8 - 1] shall be ignored.
\@attribute[type="bitfield" size="dwBitCount" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SMeasResult.SDemodResult.dwBitCount">
Number of bits the PDU consists of.

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SMeasResult.SDemodResult.ePDU">
PDU that has been demodulated

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SMeasResult.SDemodResult.dwStopTimeInMs">
This is the last time in ms of signals used for this message. 
All IQ signals used to produce this demodulation result are in between dwStartTimeInMs and dwStopTimeInMs.

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SMeasResult.SDemodResult.dwStartTimeInMs">
This is the first time in ms of signals used for this message.

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SMeasResult.SDemodResult.dwFirstBtsId">
The demodulator fills this parameter with the BTS ID the scanner assigned to this BTS first.
If later on, the scanner uses a different BTS ID, but after demodulation it is detected that it is the same eNodeB,
the demodulator fills this value with the first BTS ID the scanner used.  
Example: 
The scanner has measured a eNodeB with ID = 10 and the demodulator has demodulated it successfully. 
20 minutes later the scanner found signals of a eNodeB with ID = 55. After demodulating, the demodulator finds 
out (by comparing unique BTS information from decoding), that it is the same eNodeB as the one with ID = 10. 
In this case, dwFirstBtsId will be set to 10.

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SMeasResult.SDemodResult.dwBtsId">
Unique BTS ID provided by the scanner as SSignals::dwScannerBtsIdent. Each time the scanner is not
sure whether the signal it could demodulate belongs to an already known eNodeB, it sets a new identifier
here. I.e. the same eNodeB could have multiple dwBtsIds, but each dwBtsId relates always to a single cell.

</member>
        <member name="T:RohdeSchwarz.ViCom.IOT.SMeasResult.SDemodResult">
BCH demodulator results
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SMeasResult.ListOfSignals">
The actual set of signals associated with the current channel specified
by the dwChannelIndex member.

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SMeasResult.SSignals.dFrameArrivalOffsetToBlockInS">
Time difference between Radio Frame Time of Arrival (TOA) and u64DeviceTimeInNs.
The time, when the maximum CIR peak has been received, is used as Radio Frame Time of Arrival.
This feature does not require a GPS antenna to be connected to the receiver.
If not valid set to DBL_MAX.

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SMeasResult.SSignals.dFrameToaOffsetToPpsInSec">
Time difference between Radio Frame Time of Arrival (TOA) and the latest PPS pulse received.
The time, when the maximum CIR peak has been received, is used as Radio Frame Time of Arrival.
This feature requires a GPS antenna to be connected to the receiver.
If not valid set to DBL_MAX.

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SMeasResult.SSignals.wPhysicalCellId">
Physical Cell ID 0 - 503.

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SMeasResult.SSignals.dwScannerBtsIdent">
        Internal ID assigned from the scanner to that specific station. Different
        stations will become different IDs assigned to them, but if the scanner
        cannot identify a cell exactly, it also might assign different IDs to
        the same station.

        @note
        This is unique only within one measurement. Do not use it when
        combining the results of different measurements

</member>
        <member name="T:RohdeSchwarz.ViCom.IOT.SMeasResult.SSignals.SReferenceSignal">
Structure of the reference signals
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.IOT.SMeasResult.SSignals.SSyncSignal">
Structure of the primary and secondary synchronization signals
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.IOT.SMeasResult.SSignals">
Actual measurement values for a single server.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SMeasResult.ListMeasurementRatesTotal">
List of measurement rates rates and other values in relation to the measurement rate for 
one or more time intervals of measurement rate calculation. The measurement rate is 
the ratio of all measurements of the same type of measurement at the time
the measurement signals have been picked from the air. So the time of arrival 
at the host application is not used. And equal measurements at different RF channels are put together.      

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SMeasResult.u64DeviceTimeInNs">
The time when the signal was started to being measured on the device, with a higher resolution than the default PC clock. 
This time is relative to the last restart of the device.

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SMeasResult.dwPcTimeStampInMs">
PC local time when the signal was measured (or was started to being measured) on the device.

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SMeasResult.dwChannelIndex">
The channel to which all the data relates is specified using this index.
The index refers to the position in the SChannelSettings::pTableOfFrequencySetting array.

</member>
        <member name="T:RohdeSchwarz.ViCom.IOT.SMeasResult">
The NB-IoT measurement result for a single channel returned by CViComIotInterface::GetResult().
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.IOT.SSettings">
This structure holds all the measurement setup that is configured in the ViCom NB-IoT scanner module. 
It is a result of the CViComIoTInterface::GetSettings() method.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SDemodulationSettings.sStartMeasurementRequests">
The requests for the general start measurement command.

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SDemodulationSettings.dwFrontEndSelectionMask">
Receiver front end to be used by the demodulator for this channel. 
If no demodulation shall be provided, this shall be set to 0.
Demodulation tasks are not allowed to contain multiple FE's.

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SDemodulationSettings.sSINRThresholdDB100">
SINR threshold for demodulation, given in 1/100 dBm.
For default value and range see GetDemodThresholdLimits().

</member>
        <member name="T:RohdeSchwarz.ViCom.IOT.SDemodulationSettings">
This structure is used to configure the BCH demodulation process.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SDemodRequests.pDemodRequests">
Pointer to an array of demodulation requests. Must be NULL, if no demodulation shall be done.
\@attribute[type="array" size="dwCountOfRequests" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SDemodRequests.SDemodRequest.dwBtsId">
Unique BTS ID provided by the scanner as SSignals::dwScannerBtsIdent. This ID is used by the 
BCHDemodulator to demodulate a specific BTS, when the bDemodulationMode is set to ON_CMD.

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SDemodRequests.SDemodRequest.wRepetitionTimeOutInMs">
Repetition time out in ms (only used if bDemodulationMode == REPETITION).

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SDemodRequests.SDemodRequest.eDemodulationMode">
The mode used for BCH demodulation.

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SDemodRequests.SDemodRequest.ePDU">
The PDU to be demodulated.

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SDemodRequests.SDemodRequest.dwChannelIndex">
Index of the frequency in SChannelSettings::aTableOfFrequencySetting.

</member>
        <member name="T:RohdeSchwarz.ViCom.IOT.SDemodRequests.SDemodRequest">
   There must be one instance of this structure for each BCH demodulation request,
   therefore different PDUs can be measured on different channels.

   Example for start measurement:
   On the first channel SIBs 3 and 4 shall be decoded, on the the second channel SIBs 3, 5 and 7 shall be decoded.
   SIB 5 shall be decoded repeatedly every 10 seconds (10000 ms) and SIB 7 shall be decoded on demand.
   This requires five structures containing the following parameter sets:
   @code
   (0, SIB3, 0, 0, 0, 0)
   (0, SIB4, 0, 0, 0, 0)
   (1, SIB3, 0, 0, 0, 0)
   (1, SIB5, REPETITION, 10000, 0, 0)
   (1, SIB7, ON_CMD, 0, 0, 0)
   @endcode
   Example during measurement:
   On channel 0 PDU demodulation shall be completely reset for the BTS identified by ID 3
   and on the the second channel SIB 7 shall be decoded for the BTS identified by ID 4 
   SC 5 with a timeout for the request of 1 sec (1000ms):
   @code
   (0, 0, CHANNEL_RESET, 0, 3, 5)
   (1, PDU_FOR_SIB7, ON_CMD, 1000, 4, 5)
   @endcode
   @note
   You are responsible to manage memory, when you use SetDemodulationSettings().
   All parameters which are not necessary for a certain request shall be set to 0.
   \@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SDemodRequests.dwCountOfRequests">
Number of demodulation requests. Must be 0, if no demodulation shall be done.

</member>
        <member name="T:RohdeSchwarz.ViCom.IOT.SDemodRequests">
This structure is used to configure PDU requests.
It is used in start measurement requests and it is used to issue BCH demodulation requests during measurement,
e.g. SIB requests on demand or to reset SIB demodulation.
\@attribute[type="serializable"]

</member>
        <member name="F:CHANNEL_RESET">
Delete all demodulation results for all BTS at the specified channel. 
Restart demodulation for this channel as specified in the command.
This can be requested only during a running measurement.


Delete all demodulation results for all BTS at the specified channel. 
Restart demodulation for this channel as specified in the command.
This can be requested only during a running measurement.


Delete all demodulation results for all BTS at the specified channel. 
Restart demodulation for this channel as specified in the command.
This can be requested only during a running measurement.


All demodulation results for each BTS on the specified channel will be deleted and
the demodulation for this channel starts as specified in SDemodulationSettings::sStartMeasurementRequests.
This can be requested only during a running measurement.


Delete all demodulation results for all BTS at the specified channel. 
Restart demodulation for this channel as specified in the command.
This can be requested only during a running measurement.


All demodulation results for each BTS on the specified channel will be deleted and
the demodulation for this channel starts as specified in SDemodulationSettings::sStartMeasurementRequests.
This can be requested only during a running measurement.


Delete all demodulation results for all BTS at the specified channel. 
Restart demodulation for this channel as specified in the command.
This can be requested only during a running measurement.


All demodulation results for each BTS on the specified channel will be deleted and
the demodulation for this channel starts as specified in SDemodulationSettings::sStartMeasurementRequests.
This can be requested only during a running measurement.

</member>
        <member name="F:BTS">
The demodulation is only for a special BTS.
This can be requested only during a running measurement and when the PDU was also requested in the start measurement frame.
If dwTimeOutOrRepetitionDelayIn100ms is different from 0 then the demodulation is only tried during the given time.


The demodulation is only for a special BTS.
This can be requested only during a running measurement and when the PDU was also requested in the start measurement frame.
If dwTimeOutOrRepetitionDelayIn100ms is different from 0 then the demodulation is only tried during the given time.


The demodulation is only for a special BTS.
This can be requested only during a running measurement and when the PDU was also requested in the start measurement frame.
If wRepetitionTimeOutInMs is different from 0 then the demodulation is only tried during the given time.


The demodulation is only for a BTS.
This can be requested only during a running measurement and when the PDU was also requested in SDemodulationSettings::sStartMeasurementRequests.
If dwTimeOutOrRepetitionDelayIn100ms is different from 0 then the demodulation is only tried during the given time.


The demodulation is only for a special BTS.
This can be requested only during a running measurement and when the PDU was also requested in the start measurement frame.
If dwTimeOutOrRepetitionDelayIn100ms is different from 0 then the demodulation is only tried during the given time.


The demodulation is only for a BTS.
This can be requested only during a running measurement and when the PDU was also requested in SDemodulationSettings::sStartMeasurementRequests.
If dwTimeOutOrRepetitionDelayIn100ms is different from 0 then the demodulation is only tried during the given time.


Demodulate the PDU only for a specific BTS. The BTS is specified in the S_PDU_Request::dwBtsId field.
This demodulation mode is only valid during a running measurement (i.e. on demand).


The demodulation is only for a BTS.
This can be requested only during a running measurement and when the PDU was also requested in SDemodulationSettings::sStartMeasurementRequests.
If dwTimeOutOrRepetitionDelayIn100ms is different from 0 then the demodulation is only tried during the given time.

</member>
        <member name="F:REPETITION">
After each successful demodulation a new one will be started automatically after the repetition time specified in wRepetitionDelayIn100ms.
Only to be used in start measurement.


After each successful demodulation a new one will be started automatically after the repetition time specified in wRepetitionDelayIn100ms.
Only to be used in start measurement.


After each successful demodulation a new one will be started automatically after the repetition time specified in wRepetitionTimeOutInMs.
Results are provided for the strongest SS/PBCH block only.
Only to be used in start measurement.


After each successful demodulation a new one will be started automatically after the delay time specified in wRepetitionDelayIn100ms
Only to be used in start measurement.


After each successful demodulation a new one will be started automatically after the repetition time specified in wRepetitionDelayIn100ms.
Only to be used in start measurement.


After each successful demodulation a new one will be started automatically after the delay time specified in wRepetitionDelayIn100ms
Only to be used in start measurement.


After each successful demodulation a new one will be started automatically after the repetition time specified in wRepetitionDelayIn100ms.
This is only to be used in start measurement.


After each successful demodulation a new one will be started automatically after the delay time specified in wRepetitionDelayIn100ms
Only to be used in start measurement.

</member>
        <member name="F:ON_CMD">
   The PDU is only demodulated if an extra command for demodulation requests the demodulation.

   If this is used, then no PDU is decoded until it is explicitly requested. 
   The method IssueDemodRequests can be used for that purpose.


   The PDU is only demodulated if an extra command for demodulation requests the demodulation.
   Only to be used in start measurement.

   If this is used, then no PDU is decoded until it is explicitly requested. 
   The method IssueDemodRequests can be used for that purpose.


   The PDU is only demodulated if an extra command for demodulation requests the demodulation.

   If this is used, then no PDU is decoded until it is explicitly requested. 
   The method IssueDemodRequests can be used for that purpose.


   The PDU is only demodulated if an extra command requests the demodulation.
   Only to be used in SDemodulationSettings::sStartMeasurementRequests.

   If this is used, then no PDU is decoded until it is explicitly requested. The method
   IssueDemodRequests can be used for that purpose.

   PDUs configured with this setting can be decoded using one of BTS, BTS_FORCE,
   BTS_OLD, BTS_OLD_FORCE modes.


   The PDU is only demodulated if an extra command for demodulation requests the demodulation.

   If this is used, then no PDU is decoded until it is explicitly requested. 
   The method IssueDemodRequests can be used for that purpose.


   The PDU is only demodulated if an extra command requests the demodulation.
   Only to be used in SDemodulationSettings::sStartMeasurementRequests.

   If this is used, then no PDU is decoded until it is explicitly requested. The method
   IssueDemodRequests can be used for that purpose.

   PDUs configured with this setting can be decoded using one of BTS, BTS_FORCE,
   BTS_OLD, DEMOD_BTS_OLD_HIGH modes.


   The PDU is only demodulated if an extra command for demodulation requests the demodulation.
   Only to be used in start measurement.

   If this is used, then no PDU is decoded until it is explicitly requested. 
   The method IssueDemodRequests can be used for that purpose.


   The PDU is only demodulated if an extra command requests the demodulation.
   Only to be used in SDemodulationSettings::sStartMeasurementRequests.

   If this is used, then no PDU is decoded until it is explicitly requested. The method
   CViComGsmInterface::IssueDemodRequests can be used for that purpose.

   PDUs configured with this setting can be decoded using one of BTS, BTS_FORCE,
   BTS_OLD, BTS_OLD_FORCE modes.

</member>
        <member name="F:ONCE">
Demodulate the PDU for each BTS at the specified channel only once.
Only to be used in start measurement.


Demodulate the PDU for each BTS at the specified channel only once.
Only to be used in start measurement.


Demodulate the PDU for each BTS at the specified channel only once. Results are provided for the strongest SS/PBCH block only.
Only to be used in start measurement.


Sync channel has to be demodulated only once for time synchronization. This has to be done for each
RF band, but processing power is saved for other tasks in that mode.


The PDU is demodulated only once for each BTS.
Only to be used in SDemodulationSettings::sStartMeasurementRequests.


Demodulate the PDU for each BTS at the specified channel only once.
Only to be used in start measurement.


The PDU is demodulated only once for each BTS.
Only to be used in SDemodulationSettings::sStartMeasurementRequests.


Demodulate the PDU for each BTS at the specified channel only once.
This is only to be used in start measurement.


The PDU is demodulated only once for each BTS.
Only to be used in SDemodulationSettings::sStartMeasurementRequests.

</member>
        <member name="T:RohdeSchwarz.ViCom.IOT.DemodMode">
This enumeration defines modes for the BCH demodulation.
Use this in the SDemodRequests structure to specify when the demodulation 
of this PDU shall be done.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.IOT.Pdu">
This enumeration defines IDs for the NB-IoT Layer 3 PDUs. 
Use this in the SDemodRequest structure to specify which PDUs shall be decoded.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SChannelSettings.pTableOfFrequencySetting">
This array of structures can be filled with single frequency configurations.
Only dwCount entries from this table will be used.
\@attribute[type="array" size="dwCount" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SChannelSettings.dwCount">
Number of frequency configurations that shall be used from the pTableOfFrequencySetting to perform the measurement tasks.
For value range see GetChannelCountLimits().

</member>
        <member name="T:RohdeSchwarz.ViCom.IOT.SChannelSettings">
This structure holds the measurement setup for the NB-IoT measurement. It
basically consists of the set of frequencies that shall be measured.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SFrequencySetting.bStopMeasAfterFirstBts">
If set, this channel will discontinue all processing after sending at least one valid BTS result.

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SFrequencySetting.dwFrontEndSelectionMask">
Receiver front end to be used by the scanner for this channel.
Scanner tasks are not allowed to contain multiple FE's.

</member>
        <member name="T:RohdeSchwarz.ViCom.IOT.SFrequencySetting.OperationMode">
Operation mode for NB-IoT signal. Must be set to match the mode of the signal that is being scanned.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SFrequencySetting.dwAvgBlockCountPer1000Sec">
Avg. Meas. Rate in milli Hz. This is used for all NB-IoT scanner measurements reported in 
BtsSignals and PrimarySyncSignals and SecondarySyncSignals.

</member>
        <member name="F:RohdeSchwarz.ViCom.IOT.SFrequencySetting.dCenterFrequencyInHz">
The center frequency on which the NB-IoT signals shall be measured.
For value range see SReceiver::SSupportedFrequencies.

</member>
        <member name="T:RohdeSchwarz.ViCom.IOT.SFrequencySetting">
Configuration of the measurement that is performed on one single frequency.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.IOT.SChannelState">
Struct containing the channel measurement settings that can be modified during a running measurement
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.IOT.etViComInterfaceVersion">
Data containers used for ViCom NB-IoT interface. Contains measurement configuration and result structures.

</member>
        <member name="F:RohdeSchwarz.ViCom.SubInterval.dStopFrequencyInHz">
Stop frequency in Hz for a sub interval.

</member>
        <member name="F:RohdeSchwarz.ViCom.SubInterval.dStartFrequencyInHz">
Start frequency in Hz for a sub interval.

</member>
        <member name="T:RohdeSchwarz.ViCom.SubInterval">
Container for a sub interval expressed as frequency range.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.SComplexLong.lIm">
Imaginary part of the value.

</member>
        <member name="F:RohdeSchwarz.ViCom.SComplexLong.lRe">
Real part of the value.

</member>
        <member name="T:RohdeSchwarz.ViCom.SComplexLong">
Complex long value.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.SComplex.fIm">
Imaginary part of the value.

</member>
        <member name="F:RohdeSchwarz.ViCom.SComplex.fRe">
Real part of the value.

</member>
        <member name="T:RohdeSchwarz.ViCom.SComplex">
Complex float value.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.SMeasurementRate.dwMeasRateInMilliHz">
Measurement rate in 0.001 per second.

</member>
        <member name="F:RohdeSchwarz.ViCom.SMeasurementRate.dEndTimeInSec">
Time of the last measurement (or time next to the last measurement) taken for meas rate calculation in seconds.

</member>
        <member name="F:RohdeSchwarz.ViCom.SMeasurementRate.dStartTimeInSec">
Time of the first measurement the meas rate has been calculated in seconds.

</member>
        <member name="F:RohdeSchwarz.ViCom.SMeasurementRate.dwCountOfMeasurements">
Count of measurements in the time interval defined below.

</member>
        <member name="F:RECENT">
All measurements taken in the last minute. Within the first minute after the 
first measurement the interval is shorter.

</member>
        <member name="F:SUB_TOTAL">
All measurements from the first measurement 2 minutes after the first measurement to the last measurement.

</member>
        <member name="F:TOTAL">
From first to last available measurement.

</member>
        <member name="F:INVALID">
Invalid rate type.

</member>
        <member name="T:RohdeSchwarz.ViCom.SMeasurementRate.MeasRateType">
Rate type
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.SMeasurementRate">
Measurement rates result structure for specific ViComs.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.SRFPort">
The available RF front ends of a connected receiver are listed in SReceiver::dwAvailableFrontEndMask
which is an or-combination of the following constants.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.SResultCounters">
This can be used to report the current fill state of the result buffer and a history how many results had
to be removed from the buffer before they could be processed.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.SMessage.MessageType">
Specifies the severity levels of a message 
   \@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.SMessage">
Structure that describes a message from a sub-system. A message can be either just an info or even an error message.
Used in ViComBasicInterface::GetMessagesDuringStartMeasurement().
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.SConnectedReceiverTable.Receivers">
\@attribute[type="array" size="dwCountOfReceivers" sizeismember="true"]

</member>
        <member name="F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.bHasGpsAntenna">
Information on a connected GPS antenna. If true the receiver has a
GPS antenna connected. The open- / short-circuit detection did not
detect any errors.
Only available in combination with TSME6 receivers.

</member>
        <member name="F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.pTsmeDcInfo">
Information on a connected TSME30DC downconverter.
Only available in combination with TSME6 receivers.

</member>
        <member name="T:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.STsmeDcInfo">
Container for information on TSME30DC / TSME44DC downconverter.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.CalibrationInfo">
Receiver calibration information.

</member>
        <member name="T:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.SCalibrationInfo">
Container for calibration information of the receiver.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.ListOfDeviceOptions">
List of receiver options.

</member>
        <member name="T:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.SDeviceOption">
Container for option information of the receiver.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.ListOfTemperatures">
List of receiver temperatures.

</member>
        <member name="T:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.STemperature.TemperatureType">
Specifies the type of a receiver temperature.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.STemperature">
Container for receiver temperatures.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.ListOfFrequencyBands">
List of frequency bands supported by the receiver. Each sub band is specified in Hz.

</member>
        <member name="F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwFlagForWcdmaScanner">
measurement capabilities of the device. 
</member>
        <member name="F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableMeasurementMask">
This defines what special capabilities the receiver has. This value is a or-combination of the
constants defined below. For each capability, there is another application interface that can be
used to access the specific functionality. For example, if dwFlagForRFPowerScan flag is set, then
the ViComRFPowerScanInterface can be used for that receiver.

</member>
        <member name="F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwHardwareVersion">
Version of the installed hardware inclusive FPGA configuration code, to be read as an 8 digit decimal integer
Example: TSMW FW Version 1.15.0.0 =&gt; dwHardwareVersion = 0x010F0000

</member>
        <member name="F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwSoftwareVersion">
Version of the application software, to be read as an 8 digit decimal integer. 
</member>
        <member name="F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwModelNumber">
Model number of the receiver. 
</member>
        <member name="F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwSerialNumber">
Serial number of the receiver. 
</member>
        <member name="F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.eReceiver">
Defines the receiver type. The command set of this interface is compatible with certain receiver types. 
</member>
        <member name="F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwNetworkInterfaceIndex">
Index of the used network interface if not SDefs::INVALID_DWORD_VALUE 
</member>
        <member name="F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.bIpVersion">
Version of the internet protocol for TSMW and TSME. 
</member>
        <member name="F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.bAutoIpAddress">
Automatically configured TSME6 IP address using Auto-IP feature.
Possible range is: 169.254.0.1 to 169.254.255.254.
Only valid if at least one byte is different to SDefs::INVALID_BYTE_VALUE.

</member>
        <member name="F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.bIpAddress">
TSMW and TSME receiver are connected via IEEE 802.3 Ethernet bus.
The address is formated in a dot-decimal like notation, e.g. the first array element
is the first octet of the address.

</member>
        <member name="T:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver">
For each receiver connected to the system, one such structure is filled. dwCountOfReceivers contains
how many instances of this structure are available.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwMaxCountOfConnectedReceivers">
There can not be more than 8 receivers connected to one PC at a time.

</member>
        <member name="T:RohdeSchwarz.ViCom.SConnectedReceiverTable">
When the system is asked for how many devices are connected, this structure is the result. This contains
- version information
- hardware information
- driver information
about every receiver that was connected before and are still active.

@note The table does not contain receivers of various types. E.g. if the system is asked for connected devices
on a TSMW, the connected receiver table will not contain any receivers other than TSMW!
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.SPreSelection">
Specifies operation modes for the TSME6 pre-selection stage.
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.SReceiverSettings.fAgcTimeConstantInMs">
The AGC time constant defines how long a measured input power in RF spectrum scan is valid to control internal 
attenuation / gain settings in the receiver. The validity is floating and decrements exponentially (linear in dB).
After the given time the power in Watt degrades by 1/e i.e. 4.34 dB in logarithmic scale. The measured RF spectrum
is used to find RF board settings to protect the receiver against intermodulation on high input power.
This results in lower sensitivity (higher noise figure) during high input power reception.
The 30 sec default value is good for normal drive test. With this value the receiver is sensitive in rural areas
and well protected against intermodulation in urban areas with very high transmitter density. 
Applies to TSME / TSME6 receivers only.
Can only be set for the very first link to a TSME / TSME6.
Limits: 1ms to 60 sec, default: 30 sec
*
</member>
        <member name="T:RohdeSchwarz.ViCom.SReceiverSettings">
Definition of special receiver settings.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.STSMPort.Mode">
Definition of operating modes for special receiver ports.
Only a subset of the following settings might be supported by specific receiver ports
in STSMPort::ePort.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.STSMPort.Port">
Special ports of the receiver.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.STSMPort">
The multi purpose receiver I/O connectors can be used for application specific requirements like external trigger signals
or timing reference. The configuration has to be done by specifying a port and the wanted mode. Used in
ViComBasicInterface::SetPortConfiguration() method.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.Technology">
Definitions for technology types.
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.Receiver">
Different versions of the ViCom interface are suitable for different receiver types. This field gives the receiver type,
with the following values defined in the enum Receiver::Type:
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.SVersionInfo">
Defines a data model to hold version information of the ViCom interface. This should reflect the
DLL version information.
File version number of DLL is:    dwVersionMajor.dwVersionMinor.dwVersionPatch.dwVersionBuild
Product version number of DLL is: dwVersionMajor.dwVersionMinor.dwBasicInterfaceVersion.dwApplicationInterfaceVersion
\@attribute[type="serializable"]

</member>
        <member name="F:RohdeSchwarz.ViCom.SDefs.INVALID_BYTE_VALUE">
Invalid value marker for BYTE values.

</member>
        <member name="F:RohdeSchwarz.ViCom.SDefs.INVALID_SHORT_VALUE">
Invalid value marker for short values.

</member>
        <member name="F:RohdeSchwarz.ViCom.SDefs.INVALID_WORD_VALUE">
Invalid value marker for WORD values.

</member>
        <member name="F:RohdeSchwarz.ViCom.SDefs.INVALID_DWORD_VALUE">
Invalid value marker for DWORD values.

</member>
        <member name="F:RohdeSchwarz.ViCom.SDefs.dwDefaultTimeOutInMs">
Default value for all interface methods which require a timeout parameter.

</member>
        <member name="T:RohdeSchwarz.ViCom.SDefs">
Definition of constants
\@attribute[type="serializable"]

</member>
        <member name="T:RohdeSchwarz.ViCom.etBasicInterfaceVersion">
This class defines the basic data structures used in the specialized ViCom interfaces. All structures
are available in the technology implementations, such as version info, Receiver table etc.

@see CViComBasicInterface also for details on what to do with the data containers defined here.

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComError.GetErrorCode">
   This function returns an error code which is unique for the ViCom interface. Error code definitions are declared in
   ViComBasicErrors.h and the error code file for the specific application (e.g. ViComWcdmaErrors.h)

   @return an unique error code. If no error occurred the function returns 0.

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComError.#ctor(System.UInt32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Convenience constructor to directly create an error object with all information possible.
@param dwErrorCode
    [in] error specific code (can be used to look-up error string in error definition header).
@param pszErrorString
    [in] descriptive string. Should be the same as defined in the error header for the error code.
@param pszUserString
    [in] descriptive string added by the user, to provide more information

</member>
        <member name="M:RohdeSchwarz.ViCom.CViComError.#ctor(System.UInt32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Convenience constructor to directly create an error object with all information possible.
@param dwErrorCode
    [in] error specific code (can be used to look-up error string in error definition header).
@param pszErrorString
    [in] descriptive string. Should be the same as defined in the error header for the error code.

</member>
        <member name="T:RohdeSchwarz.ViCom.CViComError">
The following functions can be used to get error information from an object of class CViComError.
A full list of general ViCom errors can be found in the header file ViComBasicErrors.h, and a list of specific
errors are in ViCom***Errors.h.

</member>
        <member name="T:_EXCEPTION_DISPOSITION">
File: CViComIotInterface.cpp
(generated file, do not edit)


File: CViComFastACDInterface.cpp
(generated file, do not edit)


File: CViComCdmaInterfaceData.cpp
(generated file, do not edit)


File: CViComTdScdmaInterface.cpp
(generated file, do not edit)


File: CViComLoaderNrMcpp.cpp
(generated file, do not edit)

File: CViComLoaderNrMcpp.h
(generated file, do not edit)


File: DataConverterCViComV2xInterfaceData.cpp
(generated file, do not edit)

File: DataConverterCViComV2xInterfaceData.h
(generated file, do not edit)


File: CViComLoaderV2xMcpp.cpp
(generated file, do not edit)

File: CViComLoaderV2xMcpp.h
(generated file, do not edit)


File: CViComLoaderWcdmaMcpp.cpp
(generated file, do not edit)

File: CViComLoaderWcdmaMcpp.h
(generated file, do not edit)


File: CViComLoaderRFPowerScanMcpp.cpp
(generated file, do not edit)

File: CViComLoaderRFPowerScanMcpp.h
(generated file, do not edit)


File: CViComLoaderLteMcpp.cpp
(generated file, do not edit)

File: CViComLoaderLteMcpp.h
(generated file, do not edit)


File: DataConverterViComFastACDInterfaceData.cpp
(generated file, do not edit)

File: DataConverterViComFastACDInterfaceData.h
(generated file, do not edit)


File: CViComGpsInterface.cpp
(generated file, do not edit)


File: CViComLoaderWimaxMcpp.cpp
(generated file, do not edit)

File: CViComLoaderWimaxMcpp.h
(generated file, do not edit)


File: DataConverterCViComTdScdmaInterfaceData.cpp
(generated file, do not edit)

File: DataConverterCViComTdScdmaInterfaceData.h
(generated file, do not edit)


File: CViComNrInterface.cpp
(generated file, do not edit)


File: CViComWimaxInterface.cpp
(generated file, do not edit)


File: CViComWcdmaInterface.cpp
(generated file, do not edit)


File: CViComRFPowerScanInterfaceData.cpp
(generated file, do not edit)


File: CViComBasicInterface.cpp
(generated file, do not edit)


File: CViComLoaderFastACDMcpp.cpp
(generated file, do not edit)

File: CViComLoaderFastACDMcpp.h
(generated file, do not edit)


File: CViComIotInterfaceData.cpp
(generated file, do not edit)


File: DataConverterCViComWimaxInterfaceData.cpp
(generated file, do not edit)

File: DataConverterCViComWimaxInterfaceData.h
(generated file, do not edit)


File: CViComLoaderBlockIqMcpp.cpp
(generated file, do not edit)

File: CViComLoaderBlockIqMcpp.h
(generated file, do not edit)


File: CViComWcdmaInterfaceData.cpp
(generated file, do not edit)


File: CViComBasicInterface.h
(generated file, do not edit)


File: CViComLoaderTdScdmaMcpp.cpp
(generated file, do not edit)

File: CViComLoaderTdScdmaMcpp.h
(generated file, do not edit)


File: DataConverterCViComNrInterfaceData.cpp
(generated file, do not edit)

File: DataConverterCViComNrInterfaceData.h
(generated file, do not edit)


File: CViComLoaderGsmMcpp.cpp
(generated file, do not edit)

File: CViComLoaderGsmMcpp.h
(generated file, do not edit)


File: DataConverterCViComLteInterfaceData.cpp
(generated file, do not edit)

File: DataConverterCViComLteInterfaceData.h
(generated file, do not edit)


File: CViComBasicInterfaceData.cpp
(generated file, do not edit)


File: CViComWimaxInterfaceData.cpp
(generated file, do not edit)


File: CViComCdmaInterface.cpp
(generated file, do not edit)


Base class for technology specific bridges between native ViCom loaders
and the .NET wrappers

Base class for technology specific bridges between native ViCom loaders
and the .NET wrappers

File: CViComBasicInterface.h
(generated file, do not edit)


File: CViComBlockIqInterface.cpp
(generated file, do not edit)


File: DataConverterCViComCWScanInterfaceData.cpp
(generated file, do not edit)

File: DataConverterCViComCWScanInterfaceData.h
(generated file, do not edit)


File: CViComRFPowerScanInterface.cpp
(generated file, do not edit)


File: DataConverterCViComGpsInterfaceData.cpp
(generated file, do not edit)

File: DataConverterCViComGpsInterfaceData.h
(generated file, do not edit)


File: CViComLoaderIotMcpp.cpp
(generated file, do not edit)

File: CViComLoaderIotMcpp.h
(generated file, do not edit)


The common, no-template, implementation part of the CViComLoader generic classes

The common, no-template, implementation part of the CViComLoader generic classes

Base class for technology specific bridges between native ViCom loaders
and the .NET wrappers

File: CViComBasicInterface.h
(generated file, do not edit)


File: CViComFastACDInterfaceData.cpp
(generated file, do not edit)


File: CViComCWScanInterface.cpp
(generated file, do not edit)


File: CViComGsmInterface.cpp
(generated file, do not edit)


File: DataConverterCViComIotInterfaceData.cpp
(generated file, do not edit)

File: DataConverterCViComIotInterfaceData.h
(generated file, do not edit)


File: DataConverterCViComBasicInterfaceData.cpp
(generated file, do not edit)

File: DataConverterCViComBasicInterfaceData.h
(generated file, do not edit)


File: CViComGsmInterfaceData.cpp
(generated file, do not edit)


The ViCom.NET loaders, wrappers around their native ViCom counterpart

The ViCom.NET loaders, wrappers around their native ViCom counterpart

The common, no-template, implementation part of the CViComLoader generic classes

Base class for technology specific bridges between native ViCom loaders
and the .NET wrappers

File: CViComBasicInterface.h
(generated file, do not edit)


File: CViComLoaderGpsMcpp.cpp
(generated file, do not edit)

File: CViComLoaderGpsMcpp.h
(generated file, do not edit)


File: CViComLteInterface.cpp
(generated file, do not edit)


File: CViComNrInterfaceData.cpp
(generated file, do not edit)


File: CViComCWScanInterfaceData.cpp
(generated file, do not edit)


File: CViComGpsInterfaceData.cpp
(generated file, do not edit)


File: CViComBlockIqInterfaceData.cpp
(generated file, do not edit)


File: CViComV2xInterfaceData.cpp
(generated file, do not edit)


File: DataConverterCViComGsmInterfaceData.cpp
(generated file, do not edit)

File: DataConverterCViComGsmInterfaceData.h
(generated file, do not edit)


File: CViComLoaderCdmaMcpp.cpp
(generated file, do not edit)

File: CViComLoaderCdmaMcpp.h
(generated file, do not edit)


File: CViComBasicInterface.cpp
(generated file, do not edit)


File: DataConverterCViComRFPowerScanInterfaceData.cpp
(generated file, do not edit)

File: DataConverterCViComRFPowerScanInterfaceData.h
(generated file, do not edit)


File: CViComLoaderCWScanMcpp.cpp
(generated file, do not edit)

File: CViComLoaderCWScanMcpp.h
(generated file, do not edit)


File: DataConverterCViComCdmaInterfaceData.cpp
(generated file, do not edit)

File: DataConverterCViComCdmaInterfaceData.h
(generated file, do not edit)


File: DataConverterCViComWcdmaInterfaceData.cpp
(generated file, do not edit)

File: DataConverterCViComWcdmaInterfaceData.h
(generated file, do not edit)


File: DataConverterCViComBlockIqInterfaceData.cpp
(generated file, do not edit)

File: DataConverterCViComBlockIqInterfaceData.h
(generated file, do not edit)


File: CViComV2xInterface.cpp
(generated file, do not edit)


File: CViComLteInterfaceData.cpp
(generated file, do not edit)


File: CViComTdScdmaInterfaceData.cpp
(generated file, do not edit)

</member>
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.bUpDownLinkMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.wSpecialSubframe1ConfigurationMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.wSpecialSubframe6ConfigurationMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.wWidebandRsCinrMeasMode'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.bTransmitAntennaSelectionMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.SMaxPeak.dFrameToaOffsetToPpsInSec'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.pMaxPeak'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pbUpDownLinkConfig'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pwSpecialSubframe1Config'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pwSpecialSubframe6Config'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.CDMA.SEvdoControlSettings.dwFullSyncRatePer1000Sec'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.CDMA.SEvdoControlSettings.dwShortSyncRatePer1000Sec'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.CDMA.SMeasResult.SFPichCir.ExtendedPNOffset'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.SCir.SMaxPeak'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.dwPcTimeStampInMs'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.u64DeviceTimeInNs'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SDemodResult'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SCPichCir.SMaxPeak'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.WCDMA.CViComWcdmaInterface.GetSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.RFPOWERSCAN.CViComRFPowerScanInterface.GetBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.bUpDownLinkMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.wSpecialSubframe1ConfigurationMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.wSpecialSubframe6ConfigurationMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.wWidebandRsCinrMeasMode'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.bTransmitAntennaSelectionMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.SMaxPeak.dFrameToaOffsetToPpsInSec'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.pMaxPeak'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pbUpDownLinkConfig'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pwSpecialSubframe1Config'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pwSpecialSubframe6Config'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.bUpDownLinkMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.wSpecialSubframe1ConfigurationMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.wSpecialSubframe6ConfigurationMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.wWidebandRsCinrMeasMode'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.bTransmitAntennaSelectionMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.SMaxPeak.dFrameToaOffsetToPpsInSec'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.pMaxPeak'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pbUpDownLinkConfig'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pwSpecialSubframe1Config'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pwSpecialSubframe6Config'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GPS.DynamicPlatformModel'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GPS.SDeadReckoningSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GPS.SDeadReckoningSettings.DirectionPinPolarity'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.GPS.SGPSDeviceSettings.enGnssMode'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.GPS.SGPSDeviceSettings.enDynamicPlatformModel'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.WIMAX.CViComWimaxInterface.GetBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.SCir.SMaxPeak'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.WIMAX.CViComWimaxInterface.GetBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.dwPcTimeStampInMs'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.u64DeviceTimeInNs'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SDemodResult'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SCPichCir.SMaxPeak'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.WCDMA.CViComWcdmaInterface.GetSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.bUpDownLinkMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.wSpecialSubframe1ConfigurationMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.wSpecialSubframe6ConfigurationMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.wWidebandRsCinrMeasMode'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.bTransmitAntennaSelectionMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.SMaxPeak.dFrameToaOffsetToPpsInSec'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.pMaxPeak'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pbUpDownLinkConfig'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pwSpecialSubframe1Config'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pwSpecialSubframe6Config'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.BLOCKIQ.CViComBlockIqInterface.GetBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.dwPcTimeStampInMs'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.u64DeviceTimeInNs'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SDemodResult'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SCPichCir.SMaxPeak'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.SCir.SMaxPeak'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GSM.SL3DecoderResult'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.GSM.CViComGsmInterface.GetBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.GSM.CViComGsmInterface.SetConfiguration(RohdeSchwarz.ViCom.GSM.SChannelSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.GSM.SDemodulationSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.GSM.SMeasurementDetails!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.bUpDownLinkMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.wSpecialSubframe1ConfigurationMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.wSpecialSubframe6ConfigurationMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.wWidebandRsCinrMeasMode'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.bTransmitAntennaSelectionMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.SMaxPeak.dFrameToaOffsetToPpsInSec'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.pMaxPeak'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pbUpDownLinkConfig'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pwSpecialSubframe1Config'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pwSpecialSubframe6Config'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.CDMA.SEvdoControlSettings.dwFullSyncRatePer1000Sec'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.CDMA.SEvdoControlSettings.dwShortSyncRatePer1000Sec'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.CDMA.SMeasResult.SFPichCir.ExtendedPNOffset'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CDMA.CViComCdmaInterface.GetBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CDMA.CViComCdmaInterface.SetConfiguration(RohdeSchwarz.ViCom.CDMA.SChannelSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.CDMA.SDemodulationSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.CDMA.SyncChannelDemodulationMode.Type,RohdeSchwarz.ViCom.CDMA.SEvdoControlSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.CDMA.SMaxVelocity!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CDMA.CViComCdmaInterface.GetSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.BLOCKIQ.CViComBlockIqInterface.GetBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.RFPOWERSCAN.CViComRFPowerScanInterface.GetBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GPS.DynamicPlatformModel'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GPS.SDeadReckoningSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GPS.SDeadReckoningSettings.DirectionPinPolarity'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.GPS.SGPSDeviceSettings.enGnssMode'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.GPS.SGPSDeviceSettings.enDynamicPlatformModel'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.CDMA.SEvdoControlSettings.dwFullSyncRatePer1000Sec'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.CDMA.SEvdoControlSettings.dwShortSyncRatePer1000Sec'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.CDMA.SMeasResult.SFPichCir.ExtendedPNOffset'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CDMA.CViComCdmaInterface.GetBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CDMA.CViComCdmaInterface.SetConfiguration(RohdeSchwarz.ViCom.CDMA.SChannelSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.CDMA.SDemodulationSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.CDMA.SyncChannelDemodulationMode.Type,RohdeSchwarz.ViCom.CDMA.SEvdoControlSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.CDMA.SMaxVelocity!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CDMA.CViComCdmaInterface.GetSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GPS.DynamicPlatformModel'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GPS.SDeadReckoningSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GPS.SDeadReckoningSettings.DirectionPinPolarity'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.GPS.SGPSDeviceSettings.enGnssMode'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.GPS.SGPSDeviceSettings.enDynamicPlatformModel'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GSM.SL3DecoderResult'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.GSM.CViComGsmInterface.GetBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.GSM.CViComGsmInterface.SetConfiguration(RohdeSchwarz.ViCom.GSM.SChannelSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.GSM.SDemodulationSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.GSM.SMeasurementDetails!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.dwPcTimeStampInMs'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.u64DeviceTimeInNs'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SDemodResult'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SCPichCir.SMaxPeak'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.WCDMA.CViComWcdmaInterface.GetSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.bUpDownLinkMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.wSpecialSubframe1ConfigurationMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.wSpecialSubframe6ConfigurationMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.wWidebandRsCinrMeasMode'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.bTransmitAntennaSelectionMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.SMaxPeak.dFrameToaOffsetToPpsInSec'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.pMaxPeak'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pbUpDownLinkConfig'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pwSpecialSubframe1Config'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pwSpecialSubframe6Config'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.RFPOWERSCAN.CViComRFPowerScanInterface.GetBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CWScan.CViComCWScanInterface.GetBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.WIMAX.CViComWimaxInterface.GetBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.BLOCKIQ.CViComBlockIqInterface.GetBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CWScan.CViComCWScanInterface.GetBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GSM.SL3DecoderResult'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.GSM.CViComGsmInterface.GetBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.GSM.CViComGsmInterface.SetConfiguration(RohdeSchwarz.ViCom.GSM.SChannelSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.GSM.SDemodulationSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.GSM.SMeasurementDetails!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GSM.SL3DecoderResult'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GPS.DynamicPlatformModel'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GPS.SDeadReckoningSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GPS.SDeadReckoningSettings.DirectionPinPolarity'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.GPS.SGPSDeviceSettings.enGnssMode'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.GPS.SGPSDeviceSettings.enDynamicPlatformModel'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.bUpDownLinkMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.wSpecialSubframe1ConfigurationMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.wSpecialSubframe6ConfigurationMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.wWidebandRsCinrMeasMode'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.bTransmitAntennaSelectionMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.SMaxPeak.dFrameToaOffsetToPpsInSec'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.pMaxPeak'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pbUpDownLinkConfig'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pwSpecialSubframe1Config'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pwSpecialSubframe6Config'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GPS.DynamicPlatformModel'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GPS.SDeadReckoningSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GPS.SDeadReckoningSettings.DirectionPinPolarity'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.GPS.SGPSDeviceSettings.enGnssMode'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.GPS.SGPSDeviceSettings.enDynamicPlatformModel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GPS.DynamicPlatformModel'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GPS.SDeadReckoningSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GPS.SDeadReckoningSettings.DirectionPinPolarity'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.GPS.SGPSDeviceSettings.enGnssMode'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.GPS.SGPSDeviceSettings.enDynamicPlatformModel'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.GSM.SL3DecoderResult'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.CDMA.SEvdoControlSettings.dwFullSyncRatePer1000Sec'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.CDMA.SEvdoControlSettings.dwShortSyncRatePer1000Sec'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.CDMA.SMeasResult.SFPichCir.ExtendedPNOffset'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CDMA.CViComCdmaInterface.GetBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CDMA.CViComCdmaInterface.SetConfiguration(RohdeSchwarz.ViCom.CDMA.SChannelSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.CDMA.SDemodulationSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.CDMA.SyncChannelDemodulationMode.Type,RohdeSchwarz.ViCom.CDMA.SEvdoControlSettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RohdeSchwarz.ViCom.CDMA.SMaxVelocity!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CDMA.CViComCdmaInterface.GetSettings'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CWScan.CViComCWScanInterface.GetBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.CDMA.SEvdoControlSettings.dwFullSyncRatePer1000Sec'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.CDMA.SEvdoControlSettings.dwShortSyncRatePer1000Sec'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.CDMA.SMeasResult.SFPichCir.ExtendedPNOffset'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.dwPcTimeStampInMs'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.WCDMA.SMeasResult.u64DeviceTimeInNs'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SDemodResult'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.WCDMA.SMeasResult.SCPichCir.SMaxPeak'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComError.GetErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComMessageTracer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.CViComBasicInterface'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SelectReceiver(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.SetPreSelection(RohdeSchwarz.ViCom.SPreSelection.Type)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RohdeSchwarz.ViCom.CViComBasicInterface.StopMeasurement'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.Net.CViComError.ErrorString'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.bUpDownLinkMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.wSpecialSubframe1ConfigurationMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.wSpecialSubframe6ConfigurationMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.wWidebandRsCinrMeasMode'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SFrequencySetting.SWidebandRsCinrSettings.bTransmitAntennaSelectionMask'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.SMaxPeak.dFrameToaOffsetToPpsInSec'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SCir.pMaxPeak'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pbUpDownLinkConfig'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pwSpecialSubframe1Config'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.LTE.SMeasResult.SSignals.SReferenceSignal.pwSpecialSubframe6Config'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.dwCountOfReceivers'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RohdeSchwarz.ViCom.SConnectedReceiverTable.SReceiver.dwAvailableFrontEndMask'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RohdeSchwarz.ViCom.TDSCDMA.SMeasResult.SSignals.SCir.SMaxPeak'. -->
    </members>
</doc>